
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001884  00001918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  0080008e  0080008e  00001946  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002819  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d88  00000000  00000000  000043d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000164e  00000000  00000000  00005159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  000067a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000878  00000000  00000000  00006d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a2c  00000000  00000000  000075c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	7e c6       	rjmp	.+3324   	; 0xd00 <__vector_1>
       4:	88 c2       	rjmp	.+1296   	; 0x516 <__vector_2>
       6:	5a c1       	rjmp	.+692    	; 0x2bc <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	07 c2       	rjmp	.+1038   	; 0x41c <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	e5 c2       	rjmp	.+1482   	; 0x5e2 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e8       	ldi	r30, 0x84	; 132
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 38       	cpi	r26, 0x8E	; 142
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	ae e8       	ldi	r26, 0x8E	; 142
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a2 3d       	cpi	r26, 0xD2	; 210
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	34 d3       	rcall	.+1640   	; 0x6c2 <main>
      5a:	12 cc       	rjmp	.-2012   	; 0xfffff880 <__eeprom_end+0xff7ef880>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t work_mode;

void gas_boiler_controller(void)
{
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	3c c0       	rjmp	.+120    	; 0xde <gas_boiler_controller+0x80>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
      66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	9c 01       	movw	r18, r24
      6e:	22 0f       	add	r18, r18
      70:	33 1f       	adc	r19, r19
      72:	88 0f       	add	r24, r24
      74:	99 1f       	adc	r25, r25
      76:	88 0f       	add	r24, r24
      78:	99 1f       	adc	r25, r25
      7a:	88 0f       	add	r24, r24
      7c:	99 1f       	adc	r25, r25
      7e:	28 0f       	add	r18, r24
      80:	39 1f       	adc	r19, r25
      82:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
      86:	28 0f       	add	r18, r24
      88:	31 1d       	adc	r19, r1
      8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	ac 01       	movw	r20, r24
      92:	44 0f       	add	r20, r20
      94:	55 1f       	adc	r21, r21
      96:	88 0f       	add	r24, r24
      98:	99 1f       	adc	r25, r25
      9a:	88 0f       	add	r24, r24
      9c:	99 1f       	adc	r25, r25
      9e:	88 0f       	add	r24, r24
      a0:	99 1f       	adc	r25, r25
      a2:	84 0f       	add	r24, r20
      a4:	95 1f       	adc	r25, r21
      a6:	40 91 fa 00 	lds	r20, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
      aa:	84 0f       	add	r24, r20
      ac:	91 1d       	adc	r25, r1
      ae:	28 17       	cp	r18, r24
      b0:	39 07       	cpc	r19, r25
      b2:	54 f4       	brge	.+20     	; 0xc8 <gas_boiler_controller+0x6a>
		{
			gas_boiler_enable_flag = 1;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	88 bb       	out	0x18, r24	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      c0:	82 b3       	in	r24, 0x12	; 18
      c2:	80 61       	ori	r24, 0x10	; 16
      c4:	82 bb       	out	0x12, r24	; 18
      c6:	08 95       	ret
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
      c8:	28 17       	cp	r18, r24
      ca:	39 07       	cpc	r19, r25
      cc:	44 f0       	brlt	.+16     	; 0xde <gas_boiler_controller+0x80>
		{
			gas_boiler_enable_flag = 0;
      ce:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      d2:	88 b3       	in	r24, 0x18	; 24
      d4:	81 60       	ori	r24, 0x01	; 1
      d6:	88 bb       	out	0x18, r24	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      d8:	82 b3       	in	r24, 0x12	; 18
      da:	8f 7e       	andi	r24, 0xEF	; 239
      dc:	82 bb       	out	0x12, r24	; 18
      de:	08 95       	ret

000000e0 <dt_testdevice>:
  return tt;
}
//функци€ определени€ датчика на шине
char dt_testdevice(void) //dt Ч digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      e0:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывани€
      e2:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      e4:	81 b3       	in	r24, 0x11	; 17
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	e3 e9       	ldi	r30, 0x93	; 147
      ec:	f7 e0       	ldi	r31, 0x07	; 7
      ee:	31 97       	sbiw	r30, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <dt_testdevice+0xe>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <dt_testdevice+0x14>
      f4:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      f6:	81 b3       	in	r24, 0x11	; 17
      f8:	8f 77       	andi	r24, 0x7F	; 127
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	e3 e0       	ldi	r30, 0x03	; 3
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	31 97       	sbiw	r30, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <dt_testdevice+0x20>
     104:	00 c0       	rjmp	.+0      	; 0x106 <dt_testdevice+0x26>
     106:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//провер€ем, ответит ли устройство
     108:	87 99       	sbic	0x10, 7	; 16
     10a:	02 c0       	rjmp	.+4      	; 0x110 <dt_testdevice+0x30>
  {
	  dt=1;//устройство есть
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <dt_testdevice+0x32>
  }
  else dt=0;//устройства нет
     110:	80 e0       	ldi	r24, 0x00	; 0
  SREG = stektemp;// вернем значение стека
     112:	9f bf       	out	0x3f, r25	; 63
     114:	ef e8       	ldi	r30, 0x8F	; 143
     116:	f6 e0       	ldi	r31, 0x06	; 6
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <dt_testdevice+0x38>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <dt_testdevice+0x3e>
     11e:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
     120:	08 95       	ret

00000122 <dt_readbit>:
	return c;
}
//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
     122:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
     124:	f8 94       	cli
  char bt; //переменна€ хранени€ бита
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     126:	81 b3       	in	r24, 0x11	; 17
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	81 bb       	out	0x11, r24	; 17
     12c:	2a e0       	ldi	r18, 0x0A	; 10
     12e:	2a 95       	dec	r18
     130:	f1 f7       	brne	.-4      	; 0x12e <dt_readbit+0xc>
     132:	00 c0       	rjmp	.+0      	; 0x134 <dt_readbit+0x12>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     134:	81 b3       	in	r24, 0x11	; 17
     136:	8f 77       	andi	r24, 0x7F	; 127
     138:	81 bb       	out	0x11, r24	; 17
     13a:	85 e4       	ldi	r24, 0x45	; 69
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <dt_readbit+0x1a>
     140:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     142:	80 b3       	in	r24, 0x10	; 16
     144:	88 1f       	adc	r24, r24
     146:	88 27       	eor	r24, r24
     148:	88 1f       	adc	r24, r24
     14a:	20 ef       	ldi	r18, 0xF0	; 240
     14c:	2a 95       	dec	r18
     14e:	f1 f7       	brne	.-4      	; 0x14c <dt_readbit+0x2a>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     150:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     152:	08 95       	ret

00000154 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
     158:	c0 e0       	ldi	r28, 0x00	; 0
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
     15a:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
     15c:	0a c0       	rjmp	.+20     	; 0x172 <dt_readbyte+0x1e>
	{
	  c|=dt_readbit()<<i; //читаем бит
     15e:	e1 df       	rcall	.-62     	; 0x122 <dt_readbit>
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0c 2e       	mov	r0, r28
     164:	02 c0       	rjmp	.+4      	; 0x16a <dt_readbyte+0x16>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	0a 94       	dec	r0
     16c:	e2 f7       	brpl	.-8      	; 0x166 <dt_readbyte+0x12>
     16e:	d8 2b       	or	r29, r24
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     170:	cf 5f       	subi	r28, 0xFF	; 255
     172:	c8 30       	cpi	r28, 0x08	; 8
     174:	a0 f3       	brcs	.-24     	; 0x15e <dt_readbyte+0xa>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     176:	8d 2f       	mov	r24, r29
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <dt_sendbit>:
	}
}
//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     17e:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
     180:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     182:	91 b3       	in	r25, 0x11	; 17
     184:	90 68       	ori	r25, 0x80	; 128
     186:	91 bb       	out	0x11, r25	; 17
     188:	9a e0       	ldi	r25, 0x0A	; 10
     18a:	9a 95       	dec	r25
     18c:	f1 f7       	brne	.-4      	; 0x18a <dt_sendbit+0xc>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     190:	88 23       	and	r24, r24
     192:	19 f0       	breq	.+6      	; 0x19a <dt_sendbit+0x1c>
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     194:	81 b3       	in	r24, 0x11	; 17
     196:	8f 77       	andi	r24, 0x7F	; 127
     198:	81 bb       	out	0x11, r24	; 17
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <dt_sendbit+0x20>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <dt_sendbit+0x26>
     1a4:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     1a6:	81 b3       	in	r24, 0x11	; 17
     1a8:	8f 77       	andi	r24, 0x7F	; 127
     1aa:	81 bb       	out	0x11, r24	; 17
	SREG = stektemp;// вернем значение стека
     1ac:	2f bf       	out	0x3f, r18	; 63
     1ae:	08 95       	ret

000001b0 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1b6:	c0 e0       	ldi	r28, 0x00	; 0
     1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <dt_sendbyte+0x34>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0c 2e       	mov	r0, r28
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <dt_sendbyte+0x16>
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	0a 94       	dec	r0
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <dt_sendbyte+0x12>
     1ca:	2d 2f       	mov	r18, r29
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	28 23       	and	r18, r24
     1d0:	39 23       	and	r19, r25
     1d2:	82 17       	cp	r24, r18
     1d4:	93 07       	cpc	r25, r19
     1d6:	19 f4       	brne	.+6      	; 0x1de <dt_sendbyte+0x2e>
		dt_sendbit(1);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	d1 df       	rcall	.-94     	; 0x17e <dt_sendbit>
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <dt_sendbyte+0x32>
		else //посылаем 0
		dt_sendbit(0);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	ce df       	rcall	.-100    	; 0x17e <dt_sendbit>
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1e2:	cf 5f       	subi	r28, 0xFF	; 255
     1e4:	c8 30       	cpi	r28, 0x08	; 8
     1e6:	48 f3       	brcs	.-46     	; 0x1ba <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
     1ee:	cf 93       	push	r28
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     1f0:	77 df       	rcall	.-274    	; 0xe0 <dt_testdevice>
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	d1 f4       	brne	.+52     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1f6:	8c ec       	ldi	r24, 0xCC	; 204
     1f8:	db df       	rcall	.-74     	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измер€ем температуру
     1fa:	84 e4       	ldi	r24, 0x44	; 68
     1fc:	d9 df       	rcall	.-78     	; 0x1b0 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	2f ef       	ldi	r18, 0xFF	; 255
     200:	8d e2       	ldi	r24, 0x2D	; 45
     202:	99 e0       	ldi	r25, 0x09	; 9
     204:	21 50       	subi	r18, 0x01	; 1
     206:	80 40       	sbci	r24, 0x00	; 0
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	e1 f7       	brne	.-8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
     20e:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразовани€ Ч 188 милисекунд
   dt_testdevice(); //снова используем те же манипул€ции с шиной что и при проверке ее присутстви€
     210:	67 df       	rcall	.-306    	; 0xe0 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     212:	8c ec       	ldi	r24, 0xCC	; 204
     214:	cd df       	rcall	.-102    	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     216:	8e eb       	ldi	r24, 0xBE	; 190
     218:	cb df       	rcall	.-106    	; 0x1b0 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     21a:	9c df       	rcall	.-200    	; 0x154 <dt_readbyte>
     21c:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     21e:	9a df       	rcall	.-204    	; 0x154 <dt_readbyte>
     220:	90 e0       	ldi	r25, 0x00	; 0
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     222:	98 2f       	mov	r25, r24
     224:	88 27       	eor	r24, r24
     226:	8c 2b       	or	r24, r28
     228:	02 c0       	rjmp	.+4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     232:	dd df       	rcall	.-70     	; 0x1ee <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
     234:	29 2f       	mov	r18, r25
     236:	25 95       	asr	r18
     238:	25 95       	asr	r18
     23a:	25 95       	asr	r18
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     23c:	c1 f4       	brne	.+48     	; 0x26e <DS18b0_find_temp+0x3c>
	{
		home_temp_own_fraction = tt & 0xF;
     23e:	28 2f       	mov	r18, r24
     240:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
     242:	32 2f       	mov	r19, r18
     244:	33 0f       	add	r19, r19
     246:	22 0f       	add	r18, r18
     248:	22 0f       	add	r18, r18
     24a:	22 0f       	add	r18, r18
     24c:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     24e:	22 95       	swap	r18
     250:	2f 70       	andi	r18, 0x0F	; 15
     252:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <home_temp_own_fraction>
		home_temp_own_integer = (tt&0x07FF)>>4;
     256:	97 70       	andi	r25, 0x07	; 7
     258:	95 95       	asr	r25
     25a:	87 95       	ror	r24
     25c:	95 95       	asr	r25
     25e:	87 95       	ror	r24
     260:	95 95       	asr	r25
     262:	87 95       	ror	r24
     264:	95 95       	asr	r25
     266:	87 95       	ror	r24
     268:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <home_temp_own_integer>
     26c:	08 95       	ret
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     26e:	28 2f       	mov	r18, r24
     270:	20 95       	com	r18
     272:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// Фмножаем на 10
     274:	32 2f       	mov	r19, r18
     276:	33 0f       	add	r19, r19
     278:	22 0f       	add	r18, r18
     27a:	22 0f       	add	r18, r18
     27c:	22 0f       	add	r18, r18
     27e:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     280:	22 95       	swap	r18
     282:	2f 70       	andi	r18, 0x0F	; 15
     284:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     288:	80 95       	com	r24
     28a:	90 95       	com	r25
     28c:	97 70       	andi	r25, 0x07	; 7
     28e:	95 95       	asr	r25
     290:	87 95       	ror	r24
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <home_temp_own_integer>
     2a2:	08 95       	ret

000002a4 <timer2_ini>:
char DATA_TO_UART[80] = {0};

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим —“— (сброс по совпадению)
     2a4:	85 b5       	in	r24, 0x25	; 37
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     2aa:	89 b7       	in	r24, 0x39	; 57
     2ac:	80 68       	ori	r24, 0x80	; 128
     2ae:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число дл€ сравнени€ 200
     2b0:	88 ec       	ldi	r24, 0xC8	; 200
     2b2:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     2b4:	85 b5       	in	r24, 0x25	; 37
     2b6:	82 60       	ori	r24, 0x02	; 2
     2b8:	85 bd       	out	0x25, r24	; 37
     2ba:	08 95       	ret

000002bc <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     2bc:	1f 92       	push	r1
     2be:	0f 92       	push	r0
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
	if(OK_BUTTON_FLAG == 1)
     2da:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <OK_BUTTON_FLAG>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_3+0x28>
     2e2:	7f c0       	rjmp	.+254    	; 0x3e2 <__vector_3+0x126>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     2e4:	9a 99       	sbic	0x13, 2	; 19
     2e6:	3b c0       	rjmp	.+118    	; 0x35e <__vector_3+0xa2>
     2e8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <UP_BUTTON_FLAG>
     2ec:	81 11       	cpse	r24, r1
     2ee:	37 c0       	rjmp	.+110    	; 0x35e <__vector_3+0xa2>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     2f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	ac 01       	movw	r20, r24
     2f8:	44 0f       	add	r20, r20
     2fa:	55 1f       	adc	r21, r21
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	48 0f       	add	r20, r24
     30a:	59 1f       	adc	r21, r25
     30c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     310:	48 0f       	add	r20, r24
     312:	51 1d       	adc	r21, r1
			temp_setpoint += 5;
     314:	4b 5f       	subi	r20, 0xFB	; 251
     316:	5f 4f       	sbci	r21, 0xFF	; 255
     318:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <temp_setpoint+0x1>
     31c:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     320:	9a 01       	movw	r18, r20
     322:	ad ec       	ldi	r26, 0xCD	; 205
     324:	bc ec       	ldi	r27, 0xCC	; 204
     326:	68 d7       	rcall	.+3792   	; 0x11f8 <__umulhisi3>
     328:	96 95       	lsr	r25
     32a:	87 95       	ror	r24
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     338:	9c 01       	movw	r18, r24
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	48 1b       	sub	r20, r24
     350:	59 0b       	sbc	r21, r25
     352:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <temp_setpoint_fraction>
			UP_BUTTON_FLAG = 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <UP_BUTTON_FLAG>
     35c:	3c c0       	rjmp	.+120    	; 0x3d6 <__vector_3+0x11a>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     35e:	9b 99       	sbic	0x13, 3	; 19
     360:	3a c0       	rjmp	.+116    	; 0x3d6 <__vector_3+0x11a>
     362:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <DOWN_BUTTON_FLAG>
     366:	81 11       	cpse	r24, r1
     368:	36 c0       	rjmp	.+108    	; 0x3d6 <__vector_3+0x11a>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     36a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	ac 01       	movw	r20, r24
     372:	44 0f       	add	r20, r20
     374:	55 1f       	adc	r21, r21
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	48 0f       	add	r20, r24
     384:	59 1f       	adc	r21, r25
     386:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     38a:	48 0f       	add	r20, r24
     38c:	51 1d       	adc	r21, r1
			temp_setpoint -= 5;
     38e:	45 50       	subi	r20, 0x05	; 5
     390:	51 09       	sbc	r21, r1
     392:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <temp_setpoint+0x1>
     396:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     39a:	9a 01       	movw	r18, r20
     39c:	ad ec       	ldi	r26, 0xCD	; 205
     39e:	bc ec       	ldi	r27, 0xCC	; 204
     3a0:	2b d7       	rcall	.+3670   	; 0x11f8 <__umulhisi3>
     3a2:	96 95       	lsr	r25
     3a4:	87 95       	ror	r24
     3a6:	96 95       	lsr	r25
     3a8:	87 95       	ror	r24
     3aa:	96 95       	lsr	r25
     3ac:	87 95       	ror	r24
     3ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     3b2:	9c 01       	movw	r18, r24
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	48 1b       	sub	r20, r24
     3ca:	59 0b       	sbc	r21, r25
     3cc:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <temp_setpoint_fraction>
			DOWN_BUTTON_FLAG = 1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <DOWN_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     3d6:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     3d8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     3dc:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     3de:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <DOWN_BUTTON_FLAG>
		}
	}
}
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	0f 90       	pop	r0
     3fc:	1f 90       	pop	r1
     3fe:	18 95       	reti

00000400 <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
     400:	8e b5       	in	r24, 0x2e	; 46
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     406:	89 b7       	in	r24, 0x39	; 57
     408:	80 61       	ori	r24, 0x10	; 16
     40a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число дл€ сравнени€ 2000
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     410:	80 ed       	ldi	r24, 0xD0	; 208
     412:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     414:	8e b5       	in	r24, 0x2e	; 46
     416:	82 60       	ori	r24, 0x02	; 2
     418:	8e bd       	out	0x2e, r24	; 46
     41a:	08 95       	ret

0000041c <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	millis++;
     442:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis>
     446:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x1>
     44a:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis+0x2>
     44e:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis+0x3>
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	8f 4f       	sbci	r24, 0xFF	; 255
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	60 93 e7 00 	sts	0x00E7, r22	; 0x8000e7 <millis>
     462:	70 93 e8 00 	sts	0x00E8, r23	; 0x8000e8 <millis+0x1>
     466:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <millis+0x2>
     46a:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <millis+0x3>
	{
		millis = 0;
		millis_hometemp_update = 0;
	}
	//каждые 10 сек работает контроллер и отправка актуальных данных в Ѕƒ
	if ((millis % 10000)==0)
     46e:	20 e1       	ldi	r18, 0x10	; 16
     470:	37 e2       	ldi	r19, 0x27	; 39
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	a4 d6       	rcall	.+3400   	; 0x11c0 <__divmodsi4>
     478:	67 2b       	or	r22, r23
     47a:	68 2b       	or	r22, r24
     47c:	69 2b       	or	r22, r25
     47e:	c1 f5       	brne	.+112    	; 0x4f0 <__stack+0x91>
	{
		gas_boiler_controller();
     480:	ee dd       	rcall	.-1060   	; 0x5e <gas_boiler_controller>
		//отправл€ем в Ѕƒ данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     482:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <work_mode>
     486:	1f 92       	push	r1
     488:	8f 93       	push	r24
     48a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     48e:	1f 92       	push	r1
     490:	8f 93       	push	r24
     492:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     496:	1f 92       	push	r1
     498:	8f 93       	push	r24
     49a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     49e:	1f 92       	push	r1
     4a0:	8f 93       	push	r24
     4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4a6:	1f 92       	push	r1
     4a8:	8f 93       	push	r24
     4aa:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     4ae:	1f 92       	push	r1
     4b0:	8f 93       	push	r24
     4b2:	88 e6       	ldi	r24, 0x68	; 104
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	c0 e9       	ldi	r28, 0x90	; 144
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	06 d7       	rcall	.+3596   	; 0x12d0 <sprintf>
		USART_Transmit(DATA_TO_UART);
     4c4:	ce 01       	movw	r24, r28
     4c6:	51 d6       	rcall	.+3234   	; 0x116a <USART_Transmit>
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     4c8:	09 90       	ld	r0, Y+
     4ca:	00 20       	and	r0, r0
     4cc:	e9 f7       	brne	.-6      	; 0x4c8 <__stack+0x69>
     4ce:	21 97       	sbiw	r28, 0x01	; 1
     4d0:	ae 01       	movw	r20, r28
     4d2:	40 59       	subi	r20, 0x90	; 144
     4d4:	50 40       	sbci	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	80 e9       	ldi	r24, 0x90	; 144
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	d7 d6       	rcall	.+3502   	; 0x128e <memset>
     4e0:	8d b7       	in	r24, 0x3d	; 61
     4e2:	9e b7       	in	r25, 0x3e	; 62
     4e4:	40 96       	adiw	r24, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	9e bf       	out	0x3e, r25	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	8d bf       	out	0x3d, r24	; 61
	}
}
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	7f 91       	pop	r23
     502:	6f 91       	pop	r22
     504:	5f 91       	pop	r21
     506:	4f 91       	pop	r20
     508:	3f 91       	pop	r19
     50a:	2f 91       	pop	r18
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	8f 93       	push	r24
	if (OK_BUTTON_FLAG == 1) OK_BUTTON_FLAG = 0;
     522:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <OK_BUTTON_FLAG>
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	19 f4       	brne	.+6      	; 0x530 <__vector_2+0x1a>
     52a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <OK_BUTTON_FLAG>
     52e:	03 c0       	rjmp	.+6      	; 0x536 <__vector_2+0x20>
	else OK_BUTTON_FLAG = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <OK_BUTTON_FLAG>
}
     536:	8f 91       	pop	r24
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <SPI_init>:
SPI_init(void) //инициализаци€ SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     542:	87 b3       	in	r24, 0x17	; 23
     544:	8e 62       	ori	r24, 0x2E	; 46
     546:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     548:	88 b3       	in	r24, 0x18	; 24
     54a:	83 7d       	andi	r24, 0xD3	; 211
     54c:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     54e:	88 b3       	in	r24, 0x18	; 24
     550:	84 60       	ori	r24, 0x04	; 4
     552:	88 bb       	out	0x18, r24	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ§вим ведущим
     554:	8d b1       	in	r24, 0x0d	; 13
     556:	80 65       	ori	r24, 0x50	; 80
     558:	8d b9       	out	0x0d, r24	; 13
}
     55a:	08 95       	ret

0000055c <port_init>:
port_init(void)
{
	//инициализаци€ ножки IRQ дл€ внеш прерывани€
	DDRD &= ~(1<<IRQ);
     55c:	81 b3       	in	r24, 0x11	; 17
     55e:	8b 7f       	andi	r24, 0xFB	; 251
     560:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<IRQ);
     562:	82 b3       	in	r24, 0x12	; 18
     564:	84 60       	ori	r24, 0x04	; 4
     566:	82 bb       	out	0x12, r24	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     568:	81 b3       	in	r24, 0x11	; 17
     56a:	80 64       	ori	r24, 0x40	; 64
     56c:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_TX);
     56e:	82 b3       	in	r24, 0x12	; 18
     570:	8f 7b       	andi	r24, 0xBF	; 191
     572:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     574:	81 b3       	in	r24, 0x11	; 17
     576:	80 62       	ori	r24, 0x20	; 32
     578:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_RX);
     57a:	82 b3       	in	r24, 0x12	; 18
     57c:	8f 7d       	andi	r24, 0xDF	; 223
     57e:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     580:	81 b3       	in	r24, 0x11	; 17
     582:	80 61       	ori	r24, 0x10	; 16
     584:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     586:	82 b3       	in	r24, 0x12	; 18
     588:	8f 7e       	andi	r24, 0xEF	; 239
     58a:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     58c:	84 b3       	in	r24, 0x14	; 20
     58e:	82 60       	ori	r24, 0x02	; 2
     590:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<LED_WIFI);
     592:	85 b3       	in	r24, 0x15	; 21
     594:	8d 7f       	andi	r24, 0xFD	; 253
     596:	85 bb       	out	0x15, r24	; 21
	//инициализаци€ мосфета
	DDRB |= (1<<MOSFET);
     598:	87 b3       	in	r24, 0x17	; 23
     59a:	81 60       	ori	r24, 0x01	; 1
     59c:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<MOSFET);
     59e:	88 b3       	in	r24, 0x18	; 24
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	88 bb       	out	0x18, r24	; 24
	//инициализаци€ индикатора
	DDRC |= (1<<MAX7219_SS);
     5a4:	84 b3       	in	r24, 0x14	; 20
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<MAX7219_SS);
     5aa:	85 b3       	in	r24, 0x15	; 21
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	85 bb       	out	0x15, r24	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     5b0:	81 b3       	in	r24, 0x11	; 17
     5b2:	87 7f       	andi	r24, 0xF7	; 247
     5b4:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<BUTTON_OK);
     5b6:	82 b3       	in	r24, 0x12	; 18
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~(1<<BUTTON_UP);
     5bc:	84 b3       	in	r24, 0x14	; 20
     5be:	8b 7f       	andi	r24, 0xFB	; 251
     5c0:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_UP);
     5c2:	85 b3       	in	r24, 0x15	; 21
     5c4:	84 60       	ori	r24, 0x04	; 4
     5c6:	85 bb       	out	0x15, r24	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     5c8:	84 b3       	in	r24, 0x14	; 20
     5ca:	87 7f       	andi	r24, 0xF7	; 247
     5cc:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_DOWN);
     5ce:	85 b3       	in	r24, 0x15	; 21
     5d0:	88 60       	ori	r24, 0x08	; 8
     5d2:	85 bb       	out	0x15, r24	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     5d4:	81 b3       	in	r24, 0x11	; 17
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	81 bb       	out	0x11, r24	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     5da:	82 b3       	in	r24, 0x12	; 18
     5dc:	8f 77       	andi	r24, 0x7F	; 127
     5de:	82 bb       	out	0x12, r24	; 18
}
     5e0:	08 95       	ret

000005e2 <__vector_11>:
//обработчик прерывани€ по UART
int uart_rx_count = 0;
char uart_rx_buffer[100];
char uart_message[100];
ISR(USART_RXC_vect)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
	uart_rx_buffer[uart_rx_count] = UDR;
     608:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     60c:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     610:	2c b1       	in	r18, 0x0c	; 12
     612:	fc 01       	movw	r30, r24
     614:	e5 59       	subi	r30, 0x95	; 149
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     61a:	2f 32       	cpi	r18, 0x2F	; 47
     61c:	a9 f5       	brne	.+106    	; 0x688 <__vector_11+0xa6>
	{
		memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     61e:	cb e6       	ldi	r28, 0x6B	; 107
     620:	d1 e0       	ldi	r29, 0x01	; 1
     622:	fe 01       	movw	r30, r28
     624:	01 90       	ld	r0, Z+
     626:	00 20       	and	r0, r0
     628:	e9 f7       	brne	.-6      	; 0x624 <__vector_11+0x42>
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	af 01       	movw	r20, r30
     62e:	4b 56       	subi	r20, 0x6B	; 107
     630:	51 40       	sbci	r21, 0x01	; 1
     632:	41 50       	subi	r20, 0x01	; 1
     634:	51 09       	sbc	r21, r1
     636:	be 01       	movw	r22, r28
     638:	86 e0       	ldi	r24, 0x06	; 6
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	1f d6       	rcall	.+3134   	; 0x127c <memcpy>
		memset(uart_rx_buffer,'\0',strlen(uart_rx_buffer));
     63e:	fe 01       	movw	r30, r28
     640:	01 90       	ld	r0, Z+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <__vector_11+0x5e>
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	af 01       	movw	r20, r30
     64a:	4b 56       	subi	r20, 0x6B	; 107
     64c:	51 40       	sbci	r21, 0x01	; 1
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	ce 01       	movw	r24, r28
     654:	1c d6       	rcall	.+3128   	; 0x128e <memset>
		uart_rx_count = 0;
     656:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__data_end+0x1>
     65a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
		//ѕолучение данные о wifi по uart
		if (strstr(uart_message,"WiFi-OK")!=0)
     65e:	6b e7       	ldi	r22, 0x7B	; 123
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	86 e0       	ldi	r24, 0x06	; 6
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	1a d6       	rcall	.+3124   	; 0x129c <strstr>
     668:	89 2b       	or	r24, r25
     66a:	19 f0       	breq	.+6      	; 0x672 <__vector_11+0x90>
		{
			PORTC |= (1<<LED_WIFI);
     66c:	85 b3       	in	r24, 0x15	; 21
     66e:	82 60       	ori	r24, 0x02	; 2
     670:	85 bb       	out	0x15, r24	; 21
		}
		if (strstr(uart_message,"WiFi-ERROR")!=0)
     672:	63 e8       	ldi	r22, 0x83	; 131
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	86 e0       	ldi	r24, 0x06	; 6
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	10 d6       	rcall	.+3104   	; 0x129c <strstr>
     67c:	89 2b       	or	r24, r25
     67e:	49 f0       	breq	.+18     	; 0x692 <__vector_11+0xb0>
		{
			PORTC &= ~(1<<LED_WIFI);
     680:	85 b3       	in	r24, 0x15	; 21
     682:	8d 7f       	andi	r24, 0xFD	; 253
     684:	85 bb       	out	0x15, r24	; 21
     686:	05 c0       	rjmp	.+10     	; 0x692 <__vector_11+0xb0>
		}
	}
	else
	{
		uart_rx_count++;
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
     68e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	}
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	bf 91       	pop	r27
     69c:	af 91       	pop	r26
     69e:	9f 91       	pop	r25
     6a0:	8f 91       	pop	r24
     6a2:	7f 91       	pop	r23
     6a4:	6f 91       	pop	r22
     6a6:	5f 91       	pop	r21
     6a8:	4f 91       	pop	r20
     6aa:	3f 91       	pop	r19
     6ac:	2f 91       	pop	r18
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // ѕередаЄт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     6b8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <spi_send_recv+0x2>
	return SPDR;
     6be:	8f b1       	in	r24, 0x0f	; 15
}
     6c0:	08 95       	ret

000006c2 <main>:
     6c2:	2f ef       	ldi	r18, 0xFF	; 255
     6c4:	43 ed       	ldi	r20, 0xD3	; 211
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	21 50       	subi	r18, 0x01	; 1
     6ca:	40 40       	sbci	r20, 0x00	; 0
     6cc:	80 40       	sbci	r24, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x6>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x10>
     6d2:	00 00       	nop
int main(void)
{
	_delay_ms(1000);
	int k = 0;
	uint8_t data[5] = {0};
	port_init();
     6d4:	43 df       	rcall	.-378    	; 0x55c <port_init>
	PORTD |= (1<<LED_TX);
     6d6:	82 b3       	in	r24, 0x12	; 18
     6d8:	80 64       	ori	r24, 0x40	; 64
     6da:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_RX);
     6dc:	82 b3       	in	r24, 0x12	; 18
     6de:	80 62       	ori	r24, 0x20	; 32
     6e0:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     6e2:	82 b3       	in	r24, 0x12	; 18
     6e4:	80 61       	ori	r24, 0x10	; 16
     6e6:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<LED_WIFI);
     6e8:	85 b3       	in	r24, 0x15	; 21
     6ea:	82 60       	ori	r24, 0x02	; 2
     6ec:	85 bb       	out	0x15, r24	; 21
	SPI_init();
     6ee:	29 df       	rcall	.-430    	; 0x542 <SPI_init>
	USART_Init(16);    //»нициализаци€ модул€ USART скорость 115200	
     6f0:	80 e1       	ldi	r24, 0x10	; 16
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2b d5       	rcall	.+2646   	; 0x114c <USART_Init>
    NRF24_ini();
     6f6:	a4 d4       	rcall	.+2376   	; 0x1040 <NRF24_ini>
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	21 ee       	ldi	r18, 0xE1	; 225
     6fc:	44 e0       	ldi	r20, 0x04	; 4
     6fe:	91 50       	subi	r25, 0x01	; 1
     700:	20 40       	sbci	r18, 0x00	; 0
     702:	40 40       	sbci	r20, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <main+0x3c>
     706:	00 c0       	rjmp	.+0      	; 0x708 <main+0x46>
     708:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     70a:	44 d1       	rcall	.+648    	; 0x994 <MAX7219_init>
     70c:	8f ef       	ldi	r24, 0xFF	; 255
     70e:	93 ed       	ldi	r25, 0xD3	; 211
     710:	20 e3       	ldi	r18, 0x30	; 48
     712:	81 50       	subi	r24, 0x01	; 1
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	20 40       	sbci	r18, 0x00	; 0
     718:	e1 f7       	brne	.-8      	; 0x712 <main+0x50>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <main+0x5a>
     71c:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывани€
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     71e:	85 b7       	in	r24, 0x35	; 53
     720:	8a 60       	ori	r24, 0x0A	; 10
     722:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     724:	8b b7       	in	r24, 0x3b	; 59
     726:	80 6c       	ori	r24, 0xC0	; 192
     728:	8b bf       	out	0x3b, r24	; 59
     72a:	4f ef       	ldi	r20, 0xFF	; 255
     72c:	87 ea       	ldi	r24, 0xA7	; 167
     72e:	91 e6       	ldi	r25, 0x61	; 97
     730:	41 50       	subi	r20, 0x01	; 1
     732:	80 40       	sbci	r24, 0x00	; 0
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <main+0x6e>
     738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x78>
     73a:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     73c:	82 b3       	in	r24, 0x12	; 18
     73e:	8f 7b       	andi	r24, 0xBF	; 191
     740:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_RX);
     742:	82 b3       	in	r24, 0x12	; 18
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     748:	82 b3       	in	r24, 0x12	; 18
     74a:	8f 7e       	andi	r24, 0xEF	; 239
     74c:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<LED_WIFI);
     74e:	85 b3       	in	r24, 0x15	; 21
     750:	8d 7f       	andi	r24, 0xFD	; 253
     752:	85 bb       	out	0x15, r24	; 21
	timer1_ini();
     754:	55 de       	rcall	.-854    	; 0x400 <timer1_ini>
	timer2_ini();
     756:	a6 dd       	rcall	.-1204   	; 0x2a4 <timer2_ini>
	gas_boiler_controller();
     758:	82 dc       	rcall	.-1788   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     75a:	81 b5       	in	r24, 0x21	; 33
     75c:	87 7f       	andi	r24, 0xF7	; 247
     75e:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     760:	9f e0       	ldi	r25, 0x0F	; 15
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	a8 95       	wdr
     76a:	81 bd       	out	0x21, r24	; 33
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     770:	88 b1       	in	r24, 0x08	; 8
     772:	80 68       	ori	r24, 0x80	; 128
     774:	88 b9       	out	0x08, r24	; 8
	sei();
     776:	78 94       	sei
     778:	2f ef       	ldi	r18, 0xFF	; 255
     77a:	4d e3       	ldi	r20, 0x3D	; 61
     77c:	89 e4       	ldi	r24, 0x49	; 73
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	40 40       	sbci	r20, 0x00	; 0
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <main+0xbc>
     786:	00 c0       	rjmp	.+0      	; 0x788 <main+0xc6>
     788:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     78a:	a8 95       	wdr
     78c:	9f ef       	ldi	r25, 0xFF	; 255
     78e:	2d e3       	ldi	r18, 0x3D	; 61
     790:	49 e4       	ldi	r20, 0x49	; 73
     792:	91 50       	subi	r25, 0x01	; 1
     794:	20 40       	sbci	r18, 0x00	; 0
     796:	40 40       	sbci	r20, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <main+0xd0>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0xda>
     79c:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     79e:	a8 95       	wdr
	//отправл€ем в Ѕƒ первичные данные после включени€
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     7a0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <work_mode>
     7a4:	1f 92       	push	r1
     7a6:	8f 93       	push	r24
     7a8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     7ac:	1f 92       	push	r1
     7ae:	8f 93       	push	r24
     7b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     7b4:	1f 92       	push	r1
     7b6:	8f 93       	push	r24
     7b8:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7c4:	1f 92       	push	r1
     7c6:	8f 93       	push	r24
     7c8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     7cc:	1f 92       	push	r1
     7ce:	8f 93       	push	r24
     7d0:	88 e6       	ldi	r24, 0x68	; 104
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	c0 e9       	ldi	r28, 0x90	; 144
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	77 d5       	rcall	.+2798   	; 0x12d0 <sprintf>
	USART_Transmit(DATA_TO_UART);
     7e2:	ce 01       	movw	r24, r28
     7e4:	c2 d4       	rcall	.+2436   	; 0x116a <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     7e6:	09 90       	ld	r0, Y+
     7e8:	00 20       	and	r0, r0
     7ea:	e9 f7       	brne	.-6      	; 0x7e6 <main+0x124>
     7ec:	21 97       	sbiw	r28, 0x01	; 1
     7ee:	ae 01       	movw	r20, r28
     7f0:	40 59       	subi	r20, 0x90	; 144
     7f2:	50 40       	sbci	r21, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e9       	ldi	r24, 0x90	; 144
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	48 d5       	rcall	.+2704   	; 0x128e <memset>
     7fe:	8d b7       	in	r24, 0x3d	; 61
     800:	9e b7       	in	r25, 0x3e	; 62
     802:	40 96       	adiw	r24, 0x10	; 16
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	9e bf       	out	0x3e, r25	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	8d bf       	out	0x3d, r24	; 61
	while (1) 
    {
		
		//если нет св€зи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     80e:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <millis>
     812:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <millis+0x1>
     816:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis+0x2>
     81a:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis+0x3>
     81e:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <millis_hometemp_update>
     822:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <millis_hometemp_update+0x1>
     826:	ab 01       	movw	r20, r22
     828:	42 1b       	sub	r20, r18
     82a:	53 0b       	sbc	r21, r19
     82c:	9a 01       	movw	r18, r20
     82e:	22 f4       	brpl	.+8      	; 0x838 <main+0x176>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	24 1b       	sub	r18, r20
     836:	35 0b       	sbc	r19, r21
     838:	29 39       	cpi	r18, 0x99	; 153
     83a:	3a 43       	sbci	r19, 0x3A	; 58
     83c:	94 f0       	brlt	.+36     	; 0x862 <main+0x1a0>
		{
			work_mode = 0;
     83e:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     842:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <home_temp_own_integer>
     846:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			home_temp_rx_fraction = home_temp_own_fraction;
     84a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <home_temp_own_fraction>
     84e:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     852:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <millis_hometemp_update>
     856:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <millis_hometemp_update+0x1>
     85a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <millis_hometemp_update+0x2>
     85e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <millis_hometemp_update+0x3>
		}
		//каждые 3сек отправл€ем данные и измер€ем температуру
		if ((millis%3000) == 0)
     862:	28 eb       	ldi	r18, 0xB8	; 184
     864:	3b e0       	ldi	r19, 0x0B	; 11
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	aa d4       	rcall	.+2388   	; 0x11c0 <__divmodsi4>
     86c:	67 2b       	or	r22, r23
     86e:	68 2b       	or	r22, r24
     870:	69 2b       	or	r22, r25
     872:	91 f5       	brne	.+100    	; 0x8d8 <main+0x216>
		{
			buf1[0] = gas_boiler_enable_flag;
     874:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     878:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <buf1>
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     87c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     880:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <temp_setpoint_integer>
     884:	29 13       	cpse	r18, r25
     886:	06 c0       	rjmp	.+12     	; 0x894 <main+0x1d2>
     888:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     88c:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     890:	32 17       	cp	r19, r18
     892:	19 f0       	breq	.+6      	; 0x89a <main+0x1d8>
			{
				buf1[0] += 100;
     894:	8c 59       	subi	r24, 0x9C	; 156
     896:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     89a:	cf ee       	ldi	r28, 0xEF	; 239
     89c:	d0 e0       	ldi	r29, 0x00	; 0
     89e:	99 83       	std	Y+1, r25	; 0x01
			buf1[2] = temp_setpoint_fraction;
     8a0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     8a4:	8a 83       	std	Y+2, r24	; 0x02
			buf1[3] = home_temp_rx_integer;
     8a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8aa:	8b 83       	std	Y+3, r24	; 0x03
			buf1[4] = home_temp_rx_fraction;
     8ac:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     8b0:	8c 83       	std	Y+4, r24	; 0x04
			dt = NRF24L01_Send(buf1);
     8b2:	ce 01       	movw	r24, r28
     8b4:	02 d4       	rcall	.+2052   	; 0x10ba <NRF24L01_Send>
     8b6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     8ba:	09 90       	ld	r0, Y+
     8bc:	00 20       	and	r0, r0
     8be:	e9 f7       	brne	.-6      	; 0x8ba <main+0x1f8>
     8c0:	21 97       	sbiw	r28, 0x01	; 1
     8c2:	cf 5e       	subi	r28, 0xEF	; 239
     8c4:	d0 40       	sbci	r29, 0x00	; 0
     8c6:	ae 01       	movw	r20, r28
     8c8:	44 0f       	add	r20, r20
     8ca:	55 1f       	adc	r21, r21
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	8f ee       	ldi	r24, 0xEF	; 239
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	dc d4       	rcall	.+2488   	; 0x128e <memset>
			DS18b0_find_temp();
     8d6:	ad dc       	rcall	.-1702   	; 0x232 <DS18b0_find_temp>
		}
		//вывод инфы на индикатор
		if ((millis%500) == 0)
     8d8:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <millis>
     8dc:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <millis+0x1>
     8e0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis+0x2>
     8e4:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis+0x3>
     8e8:	24 ef       	ldi	r18, 0xF4	; 244
     8ea:	31 e0       	ldi	r19, 0x01	; 1
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	67 d4       	rcall	.+2254   	; 0x11c0 <__divmodsi4>
     8f2:	67 2b       	or	r22, r23
     8f4:	68 2b       	or	r22, r24
     8f6:	69 2b       	or	r22, r25
     8f8:	29 f5       	brne	.+74     	; 0x944 <main+0x282>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     8fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	bc 01       	movw	r22, r24
     902:	66 0f       	add	r22, r22
     904:	77 1f       	adc	r23, r23
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	68 0f       	add	r22, r24
     914:	79 1f       	adc	r23, r25
     916:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	c9 01       	movw	r24, r18
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	82 0f       	add	r24, r18
     930:	93 1f       	adc	r25, r19
     932:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     936:	62 0f       	add	r22, r18
     938:	71 1d       	adc	r23, r1
     93a:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     93e:	82 0f       	add	r24, r18
     940:	91 1d       	adc	r25, r1
     942:	81 d0       	rcall	.+258    	; 0xa46 <PrintTemp_MAX7219>
		}
		wdt_reset();
     944:	a8 95       	wdr
    }
     946:	63 cf       	rjmp	.-314    	; 0x80e <main+0x14c>

00000948 <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
     948:	cf 93       	push	r28
     94a:	c6 2f       	mov	r28, r22
     94c:	95 b3       	in	r25, 0x15	; 21
     94e:	9e 7f       	andi	r25, 0xFE	; 254
     950:	95 bb       	out	0x15, r25	; 21
     952:	00 00       	nop
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	b0 de       	rcall	.-672    	; 0x6b8 <spi_send_recv>
     958:	8c 2f       	mov	r24, r28
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	ad de       	rcall	.-678    	; 0x6b8 <spi_send_recv>
     95e:	85 b3       	in	r24, 0x15	; 21
     960:	81 60       	ori	r24, 0x01	; 1
     962:	85 bb       	out	0x15, r24	; 21
     964:	00 00       	nop
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <MAX7219_clear>:
     96a:	cf 93       	push	r28
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	8f e0       	ldi	r24, 0x0F	; 15
     970:	eb df       	rcall	.-42     	; 0x948 <Send_MAX7219>
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	8c e0       	ldi	r24, 0x0C	; 12
     976:	e8 df       	rcall	.-48     	; 0x948 <Send_MAX7219>
     978:	67 e0       	ldi	r22, 0x07	; 7
     97a:	8b e0       	ldi	r24, 0x0B	; 11
     97c:	e5 df       	rcall	.-54     	; 0x948 <Send_MAX7219>
     97e:	6f ef       	ldi	r22, 0xFF	; 255
     980:	89 e0       	ldi	r24, 0x09	; 9
     982:	e2 df       	rcall	.-60     	; 0x948 <Send_MAX7219>
     984:	c8 e0       	ldi	r28, 0x08	; 8
     986:	6f e0       	ldi	r22, 0x0F	; 15
     988:	8c 2f       	mov	r24, r28
     98a:	de df       	rcall	.-68     	; 0x948 <Send_MAX7219>
     98c:	c1 50       	subi	r28, 0x01	; 1
     98e:	d9 f7       	brne	.-10     	; 0x986 <MAX7219_clear+0x1c>
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <MAX7219_init>:
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8f e0       	ldi	r24, 0x0F	; 15
     998:	d7 df       	rcall	.-82     	; 0x948 <Send_MAX7219>
     99a:	8f e3       	ldi	r24, 0x3F	; 63
     99c:	9c e9       	ldi	r25, 0x9C	; 156
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <MAX7219_init+0xa>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <MAX7219_init+0x10>
     9a4:	00 00       	nop
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	8c e0       	ldi	r24, 0x0C	; 12
     9aa:	ce df       	rcall	.-100    	; 0x948 <Send_MAX7219>
     9ac:	8f e3       	ldi	r24, 0x3F	; 63
     9ae:	9c e9       	ldi	r25, 0x9C	; 156
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <MAX7219_init+0x1c>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <MAX7219_init+0x22>
     9b6:	00 00       	nop
     9b8:	67 e0       	ldi	r22, 0x07	; 7
     9ba:	8b e0       	ldi	r24, 0x0B	; 11
     9bc:	c5 df       	rcall	.-118    	; 0x948 <Send_MAX7219>
     9be:	8f e3       	ldi	r24, 0x3F	; 63
     9c0:	9c e9       	ldi	r25, 0x9C	; 156
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <MAX7219_init+0x2e>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <MAX7219_init+0x34>
     9c8:	00 00       	nop
     9ca:	6f ef       	ldi	r22, 0xFF	; 255
     9cc:	89 e0       	ldi	r24, 0x09	; 9
     9ce:	bc df       	rcall	.-136    	; 0x948 <Send_MAX7219>
     9d0:	8f e3       	ldi	r24, 0x3F	; 63
     9d2:	9c e9       	ldi	r25, 0x9C	; 156
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <MAX7219_init+0x40>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <MAX7219_init+0x46>
     9da:	00 00       	nop
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	b3 df       	rcall	.-154    	; 0x948 <Send_MAX7219>
     9e2:	8f e3       	ldi	r24, 0x3F	; 63
     9e4:	9c e9       	ldi	r25, 0x9C	; 156
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <MAX7219_init+0x52>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <MAX7219_init+0x58>
     9ec:	00 00       	nop
     9ee:	bd df       	rcall	.-134    	; 0x96a <MAX7219_clear>
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	89 e0       	ldi	r24, 0x09	; 9
     9f4:	a9 df       	rcall	.-174    	; 0x948 <Send_MAX7219>
     9f6:	8f e3       	ldi	r24, 0x3F	; 63
     9f8:	9c e9       	ldi	r25, 0x9C	; 156
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <MAX7219_init+0x66>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <MAX7219_init+0x6c>
     a00:	00 00       	nop
     a02:	6f ef       	ldi	r22, 0xFF	; 255
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	a0 df       	rcall	.-192    	; 0x948 <Send_MAX7219>
     a08:	6f ef       	ldi	r22, 0xFF	; 255
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	9d df       	rcall	.-198    	; 0x948 <Send_MAX7219>
     a0e:	6f ef       	ldi	r22, 0xFF	; 255
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	9a df       	rcall	.-204    	; 0x948 <Send_MAX7219>
     a14:	6f ef       	ldi	r22, 0xFF	; 255
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	97 df       	rcall	.-210    	; 0x948 <Send_MAX7219>
     a1a:	6f ef       	ldi	r22, 0xFF	; 255
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	94 df       	rcall	.-216    	; 0x948 <Send_MAX7219>
     a20:	6f ef       	ldi	r22, 0xFF	; 255
     a22:	86 e0       	ldi	r24, 0x06	; 6
     a24:	91 df       	rcall	.-222    	; 0x948 <Send_MAX7219>
     a26:	6f ef       	ldi	r22, 0xFF	; 255
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	8e df       	rcall	.-228    	; 0x948 <Send_MAX7219>
     a2c:	6f ef       	ldi	r22, 0xFF	; 255
     a2e:	88 e0       	ldi	r24, 0x08	; 8
     a30:	8b df       	rcall	.-234    	; 0x948 <Send_MAX7219>
     a32:	9f ef       	ldi	r25, 0xFF	; 255
     a34:	23 ed       	ldi	r18, 0xD3	; 211
     a36:	80 e3       	ldi	r24, 0x30	; 48
     a38:	91 50       	subi	r25, 0x01	; 1
     a3a:	20 40       	sbci	r18, 0x00	; 0
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <MAX7219_init+0xa4>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <MAX7219_init+0xae>
     a42:	00 00       	nop
     a44:	08 95       	ret

00000a46 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	8c 01       	movw	r16, r24
     a52:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     a54:	08 3e       	cpi	r16, 0xE8	; 232
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	18 07       	cpc	r17, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <PrintTemp_MAX7219+0x18>
     a5c:	67 c0       	rjmp	.+206    	; 0xb2c <PrintTemp_MAX7219+0xe6>
     a5e:	68 3e       	cpi	r22, 0xE8	; 232
     a60:	73 40       	sbci	r23, 0x03	; 3
     a62:	0c f0       	brlt	.+2      	; 0xa66 <PrintTemp_MAX7219+0x20>
     a64:	65 c0       	rjmp	.+202    	; 0xb30 <PrintTemp_MAX7219+0xea>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     a66:	81 df       	rcall	.-254    	; 0x96a <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодировани€ дл€ всех разр€дов кроме позиций 2 и 6
     a68:	6e ee       	ldi	r22, 0xEE	; 238
     a6a:	89 e0       	ldi	r24, 0x09	; 9
     a6c:	6d df       	rcall	.-294    	; 0x948 <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв —
     a6e:	6e e4       	ldi	r22, 0x4E	; 78
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	6a df       	rcall	.-300    	; 0x948 <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв —
     a74:	6e e4       	ldi	r22, 0x4E	; 78
     a76:	85 e0       	ldi	r24, 0x05	; 5
     a78:	67 df       	rcall	.-306    	; 0x948 <Send_MAX7219>
	if (current_temp == 0)
     a7a:	01 15       	cp	r16, r1
     a7c:	11 05       	cpc	r17, r1
     a7e:	29 f5       	brne	.+74     	; 0xaca <PrintTemp_MAX7219+0x84>
	{
		Send_MAX7219(start_pos, 0);
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	61 df       	rcall	.-318    	; 0x948 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     a86:	60 e8       	ldi	r22, 0x80	; 128
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	5e df       	rcall	.-324    	; 0x948 <Send_MAX7219>
     a8c:	24 c0       	rjmp	.+72     	; 0xad6 <PrintTemp_MAX7219+0x90>
	}
	else
	{
		while (current_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	f8 16       	cp	r15, r24
     a92:	19 f0       	breq	.+6      	; 0xa9a <PrintTemp_MAX7219+0x54>
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	f8 12       	cpse	r15, r24
     a98:	09 c0       	rjmp	.+18     	; 0xaac <PrintTemp_MAX7219+0x66>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     a9a:	c8 01       	movw	r24, r16
     a9c:	6a e0       	ldi	r22, 0x0A	; 10
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	7c d3       	rcall	.+1784   	; 0x119a <__divmodhi4>
     aa2:	68 2f       	mov	r22, r24
     aa4:	60 68       	ori	r22, 0x80	; 128
     aa6:	8f 2d       	mov	r24, r15
     aa8:	4f df       	rcall	.-354    	; 0x948 <Send_MAX7219>
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <PrintTemp_MAX7219+0x74>
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     aac:	c8 01       	movw	r24, r16
     aae:	6a e0       	ldi	r22, 0x0A	; 10
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	73 d3       	rcall	.+1766   	; 0x119a <__divmodhi4>
     ab4:	68 2f       	mov	r22, r24
     ab6:	8f 2d       	mov	r24, r15
     ab8:	47 df       	rcall	.-370    	; 0x948 <Send_MAX7219>
			}
			start_pos++;
     aba:	f3 94       	inc	r15
			current_temp /= 10;
     abc:	c8 01       	movw	r24, r16
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	6b d3       	rcall	.+1750   	; 0x119a <__divmodhi4>
     ac4:	8b 01       	movw	r16, r22
			asm("nop");
     ac6:	00 00       	nop
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <PrintTemp_MAX7219+0x8a>
     aca:	68 94       	set
     acc:	ff 24       	eor	r15, r15
     ace:	f1 f8       	bld	r15, 1
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     ad0:	01 15       	cp	r16, r1
     ad2:	11 05       	cpc	r17, r1
     ad4:	e1 f6       	brne	.-72     	; 0xa8e <PrintTemp_MAX7219+0x48>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     ad6:	20 97       	sbiw	r28, 0x00	; 0
     ad8:	21 f5       	brne	.+72     	; 0xb22 <PrintTemp_MAX7219+0xdc>
	{
		Send_MAX7219(start_pos, 0);
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	86 e0       	ldi	r24, 0x06	; 6
     ade:	34 df       	rcall	.-408    	; 0x948 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     ae0:	60 e8       	ldi	r22, 0x80	; 128
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	31 df       	rcall	.-414    	; 0x948 <Send_MAX7219>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	24 c0       	rjmp	.+72     	; 0xb32 <PrintTemp_MAX7219+0xec>
	}
	else
	{
		while (setpoint_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     aea:	13 30       	cpi	r17, 0x03	; 3
     aec:	11 f0       	breq	.+4      	; 0xaf2 <PrintTemp_MAX7219+0xac>
     aee:	17 30       	cpi	r17, 0x07	; 7
     af0:	49 f4       	brne	.+18     	; 0xb04 <PrintTemp_MAX7219+0xbe>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     af2:	ce 01       	movw	r24, r28
     af4:	6a e0       	ldi	r22, 0x0A	; 10
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	50 d3       	rcall	.+1696   	; 0x119a <__divmodhi4>
     afa:	68 2f       	mov	r22, r24
     afc:	60 68       	ori	r22, 0x80	; 128
     afe:	81 2f       	mov	r24, r17
     b00:	23 df       	rcall	.-442    	; 0x948 <Send_MAX7219>
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <PrintTemp_MAX7219+0xcc>
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     b04:	ce 01       	movw	r24, r28
     b06:	6a e0       	ldi	r22, 0x0A	; 10
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	47 d3       	rcall	.+1678   	; 0x119a <__divmodhi4>
     b0c:	68 2f       	mov	r22, r24
     b0e:	81 2f       	mov	r24, r17
     b10:	1b df       	rcall	.-458    	; 0x948 <Send_MAX7219>
			}
			start_pos++;
     b12:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     b14:	ce 01       	movw	r24, r28
     b16:	6a e0       	ldi	r22, 0x0A	; 10
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	3f d3       	rcall	.+1662   	; 0x119a <__divmodhi4>
     b1c:	eb 01       	movw	r28, r22
			asm("nop");
     b1e:	00 00       	nop
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <PrintTemp_MAX7219+0xde>
     b22:	16 e0       	ldi	r17, 0x06	; 6
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     b24:	20 97       	sbiw	r28, 0x00	; 0
     b26:	09 f7       	brne	.-62     	; 0xaea <PrintTemp_MAX7219+0xa4>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <PrintTemp_MAX7219+0xec>
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <PrintTemp_MAX7219+0xec>
     b30:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	08 95       	ret

00000b3e <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	8b 01       	movw	r16, r22
     b4c:	c4 2f       	mov	r28, r20
     b4e:	98 b3       	in	r25, 0x18	; 24
     b50:	9d 7f       	andi	r25, 0xFD	; 253
     b52:	98 bb       	out	0x18, r25	; 24
     b54:	98 b3       	in	r25, 0x18	; 24
     b56:	9b 7f       	andi	r25, 0xFB	; 251
     b58:	98 bb       	out	0x18, r25	; 24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	ad dd       	rcall	.-1190   	; 0x6b8 <spi_send_recv>
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <NRF24_Transmit+0x22>
     b64:	00 00       	nop
     b66:	0a c0       	rjmp	.+20     	; 0xb7c <NRF24_Transmit+0x3e>
     b68:	78 01       	movw	r14, r16
     b6a:	ef ef       	ldi	r30, 0xFF	; 255
     b6c:	ee 1a       	sub	r14, r30
     b6e:	fe 0a       	sbc	r15, r30
     b70:	f8 01       	movw	r30, r16
     b72:	80 81       	ld	r24, Z
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 dd       	rcall	.-1216   	; 0x6b8 <spi_send_recv>
     b78:	cd 2f       	mov	r28, r29
     b7a:	87 01       	movw	r16, r14
     b7c:	df ef       	ldi	r29, 0xFF	; 255
     b7e:	dc 0f       	add	r29, r28
     b80:	c1 11       	cpse	r28, r1
     b82:	f2 cf       	rjmp	.-28     	; 0xb68 <NRF24_Transmit+0x2a>
     b84:	88 b3       	in	r24, 0x18	; 24
     b86:	84 60       	ori	r24, 0x04	; 4
     b88:	88 bb       	out	0x18, r24	; 24
     b8a:	88 b3       	in	r24, 0x18	; 24
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	88 bb       	out	0x18, r24	; 24
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <NRF24_FlushRX>:
     b9e:	88 b3       	in	r24, 0x18	; 24
     ba0:	8b 7f       	andi	r24, 0xFB	; 251
     ba2:	88 bb       	out	0x18, r24	; 24
     ba4:	82 ee       	ldi	r24, 0xE2	; 226
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	87 dd       	rcall	.-1266   	; 0x6b8 <spi_send_recv>
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	8a 95       	dec	r24
     bae:	f1 f7       	brne	.-4      	; 0xbac <NRF24_FlushRX+0xe>
     bb0:	00 00       	nop
     bb2:	88 b3       	in	r24, 0x18	; 24
     bb4:	84 60       	ori	r24, 0x04	; 4
     bb6:	88 bb       	out	0x18, r24	; 24
     bb8:	08 95       	ret

00000bba <NRF24_FlushTX>:
     bba:	88 b3       	in	r24, 0x18	; 24
     bbc:	8b 7f       	andi	r24, 0xFB	; 251
     bbe:	88 bb       	out	0x18, r24	; 24
     bc0:	81 ee       	ldi	r24, 0xE1	; 225
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	79 dd       	rcall	.-1294   	; 0x6b8 <spi_send_recv>
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	8a 95       	dec	r24
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <NRF24_FlushTX+0xe>
     bcc:	00 00       	nop
     bce:	88 b3       	in	r24, 0x18	; 24
     bd0:	84 60       	ori	r24, 0x04	; 4
     bd2:	88 bb       	out	0x18, r24	; 24
     bd4:	08 95       	ret

00000bd6 <NRF24_ToggleFeatures>:
     bd6:	88 b3       	in	r24, 0x18	; 24
     bd8:	8b 7f       	andi	r24, 0xFB	; 251
     bda:	88 bb       	out	0x18, r24	; 24
     bdc:	80 e5       	ldi	r24, 0x50	; 80
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	6b dd       	rcall	.-1322   	; 0x6b8 <spi_send_recv>
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	8a 95       	dec	r24
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <NRF24_ToggleFeatures+0xe>
     be8:	00 00       	nop
     bea:	83 e7       	ldi	r24, 0x73	; 115
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	64 dd       	rcall	.-1336   	; 0x6b8 <spi_send_recv>
     bf0:	88 b3       	in	r24, 0x18	; 24
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	88 bb       	out	0x18, r24	; 24
     bf6:	08 95       	ret

00000bf8 <NRF24_Read_Buf>:
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	8b 01       	movw	r16, r22
     c06:	c4 2f       	mov	r28, r20
     c08:	98 b3       	in	r25, 0x18	; 24
     c0a:	9b 7f       	andi	r25, 0xFB	; 251
     c0c:	98 bb       	out	0x18, r25	; 24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	53 dd       	rcall	.-1370   	; 0x6b8 <spi_send_recv>
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <NRF24_Read_Buf+0x32>
     c14:	78 01       	movw	r14, r16
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	e8 1a       	sub	r14, r24
     c1a:	f8 0a       	sbc	r15, r24
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	4b dd       	rcall	.-1386   	; 0x6b8 <spi_send_recv>
     c22:	f8 01       	movw	r30, r16
     c24:	80 83       	st	Z, r24
     c26:	cd 2f       	mov	r28, r29
     c28:	87 01       	movw	r16, r14
     c2a:	df ef       	ldi	r29, 0xFF	; 255
     c2c:	dc 0f       	add	r29, r28
     c2e:	c1 11       	cpse	r28, r1
     c30:	f1 cf       	rjmp	.-30     	; 0xc14 <NRF24_Read_Buf+0x1c>
     c32:	88 b3       	in	r24, 0x18	; 24
     c34:	84 60       	ori	r24, 0x04	; 4
     c36:	88 bb       	out	0x18, r24	; 24
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <NRF24_Write_Buf>:
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8b 01       	movw	r16, r22
     c54:	c4 2f       	mov	r28, r20
     c56:	80 62       	ori	r24, 0x20	; 32
     c58:	98 b3       	in	r25, 0x18	; 24
     c5a:	9b 7f       	andi	r25, 0xFB	; 251
     c5c:	98 bb       	out	0x18, r25	; 24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	2b dd       	rcall	.-1450   	; 0x6b8 <spi_send_recv>
     c62:	85 e0       	ldi	r24, 0x05	; 5
     c64:	8a 95       	dec	r24
     c66:	f1 f7       	brne	.-4      	; 0xc64 <NRF24_Write_Buf+0x1e>
     c68:	00 00       	nop
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <NRF24_Write_Buf+0x3a>
     c6c:	78 01       	movw	r14, r16
     c6e:	ef ef       	ldi	r30, 0xFF	; 255
     c70:	ee 1a       	sub	r14, r30
     c72:	fe 0a       	sbc	r15, r30
     c74:	f8 01       	movw	r30, r16
     c76:	80 81       	ld	r24, Z
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	1e dd       	rcall	.-1476   	; 0x6b8 <spi_send_recv>
     c7c:	cd 2f       	mov	r28, r29
     c7e:	87 01       	movw	r16, r14
     c80:	df ef       	ldi	r29, 0xFF	; 255
     c82:	dc 0f       	add	r29, r28
     c84:	c1 11       	cpse	r28, r1
     c86:	f2 cf       	rjmp	.-28     	; 0xc6c <NRF24_Write_Buf+0x26>
     c88:	88 b3       	in	r24, 0x18	; 24
     c8a:	84 60       	ori	r24, 0x04	; 4
     c8c:	88 bb       	out	0x18, r24	; 24
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	08 95       	ret

00000c9c <NRF24L01_TX_Mode>:
     c9c:	43 e0       	ldi	r20, 0x03	; 3
     c9e:	65 e6       	ldi	r22, 0x65	; 101
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e1       	ldi	r24, 0x10	; 16
     ca4:	d0 df       	rcall	.-96     	; 0xc46 <NRF24_Write_Buf>
     ca6:	43 e0       	ldi	r20, 0x03	; 3
     ca8:	65 e6       	ldi	r22, 0x65	; 101
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	8b e0       	ldi	r24, 0x0B	; 11
     cae:	cb df       	rcall	.-106    	; 0xc46 <NRF24_Write_Buf>
     cb0:	88 b3       	in	r24, 0x18	; 24
     cb2:	8d 7f       	andi	r24, 0xFD	; 253
     cb4:	88 bb       	out	0x18, r24	; 24
     cb6:	73 df       	rcall	.-282    	; 0xb9e <NRF24_FlushRX>
     cb8:	80 df       	rcall	.-256    	; 0xbba <NRF24_FlushTX>
     cba:	08 95       	ret

00000cbc <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
     cbc:	cf 93       	push	r28
     cbe:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
     cc0:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
     cc2:	98 b3       	in	r25, 0x18	; 24
     cc4:	9b 7f       	andi	r25, 0xFB	; 251
     cc6:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	f6 dc       	rcall	.-1556   	; 0x6b8 <spi_send_recv>
	spi_send_recv(data_out);
     ccc:	8c 2f       	mov	r24, r28
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	f3 dc       	rcall	.-1562   	; 0x6b8 <spi_send_recv>
	HIGH_CSN;
     cd2:	88 b3       	in	r24, 0x18	; 24
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	88 bb       	out	0x18, r24	; 24
}
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
     cdc:	cf 93       	push	r28
     cde:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
     ce0:	88 b3       	in	r24, 0x18	; 24
     ce2:	8b 7f       	andi	r24, 0xFB	; 251
     ce4:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
     ce6:	8c 2f       	mov	r24, r28
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	e6 dc       	rcall	.-1588   	; 0x6b8 <spi_send_recv>
	if(reg != STATUS)
     cec:	c7 30       	cpi	r28, 0x07	; 7
     cee:	19 f0       	breq	.+6      	; 0xcf6 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	e1 dc       	rcall	.-1598   	; 0x6b8 <spi_send_recv>
	}
	HIGH_CSN;
     cf6:	98 b3       	in	r25, 0x18	; 24
     cf8:	94 60       	ori	r25, 0x04	; 4
     cfa:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	cf 93       	push	r28
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	da df       	rcall	.-76     	; 0xcdc <nRF_read_register>
     d28:	c8 2f       	mov	r28, r24
	if(status & 0x40)
     d2a:	86 ff       	sbrs	r24, 6
     d2c:	56 c1       	rjmp	.+684    	; 0xfda <__vector_1+0x2da>
	{
		pipe = (status>>1)&0x07;
     d2e:	86 95       	lsr	r24
     d30:	87 70       	andi	r24, 0x07	; 7
     d32:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
     d36:	45 e0       	ldi	r20, 0x05	; 5
     d38:	6c ef       	ldi	r22, 0xFC	; 252
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	81 e6       	ldi	r24, 0x61	; 97
     d3e:	5c df       	rcall	.-328    	; 0xbf8 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
     d40:	60 e4       	ldi	r22, 0x40	; 64
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	bb df       	rcall	.-138    	; 0xcbc <nRF_write_register>
		rx_flag = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <rx_flag>
		PORTD |= (1<<LED_RX);
     d4c:	82 b3       	in	r24, 0x12	; 18
     d4e:	80 62       	ori	r24, 0x20	; 32
     d50:	82 bb       	out	0x12, r24	; 18
     d52:	2f ef       	ldi	r18, 0xFF	; 255
     d54:	81 ee       	ldi	r24, 0xE1	; 225
     d56:	94 e0       	ldi	r25, 0x04	; 4
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	80 40       	sbci	r24, 0x00	; 0
     d5c:	90 40       	sbci	r25, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <__vector_1+0x58>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <__vector_1+0x62>
     d62:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
     d64:	82 b3       	in	r24, 0x12	; 18
     d66:	8f 7d       	andi	r24, 0xDF	; 223
     d68:	82 bb       	out	0x12, r24	; 18
		millis_hometemp_update = millis;
     d6a:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis>
     d6e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x1>
     d72:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis+0x2>
     d76:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis+0x3>
     d7a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <millis_hometemp_update>
     d7e:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <millis_hometemp_update+0x1>
     d82:	a0 93 e5 00 	sts	0x00E5, r26	; 0x8000e5 <millis_hometemp_update+0x2>
     d86:	b0 93 e6 00 	sts	0x00E6, r27	; 0x8000e6 <millis_hometemp_update+0x3>
		
		gas_boiler_enable_flag = RX_BUF[0];
     d8a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <RX_BUF>
     d8e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <gas_boiler_enable_flag>
		switch (gas_boiler_enable_flag)
     d92:	8b 30       	cpi	r24, 0x0B	; 11
     d94:	09 f4       	brne	.+2      	; 0xd98 <__vector_1+0x98>
     d96:	71 c0       	rjmp	.+226    	; 0xe7a <__vector_1+0x17a>
     d98:	38 f4       	brcc	.+14     	; 0xda8 <__vector_1+0xa8>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	79 f1       	breq	.+94     	; 0xdfc <__vector_1+0xfc>
     d9e:	98 f0       	brcs	.+38     	; 0xdc6 <__vector_1+0xc6>
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	09 f4       	brne	.+2      	; 0xda6 <__vector_1+0xa6>
     da4:	46 c0       	rjmp	.+140    	; 0xe32 <__vector_1+0x132>
     da6:	19 c1       	rjmp	.+562    	; 0xfda <__vector_1+0x2da>
     da8:	85 36       	cpi	r24, 0x65	; 101
     daa:	09 f4       	brne	.+2      	; 0xdae <__vector_1+0xae>
     dac:	ab c0       	rjmp	.+342    	; 0xf04 <__vector_1+0x204>
     dae:	20 f4       	brcc	.+8      	; 0xdb8 <__vector_1+0xb8>
     db0:	84 36       	cpi	r24, 0x64	; 100
     db2:	09 f4       	brne	.+2      	; 0xdb6 <__vector_1+0xb6>
     db4:	86 c0       	rjmp	.+268    	; 0xec2 <__vector_1+0x1c2>
     db6:	11 c1       	rjmp	.+546    	; 0xfda <__vector_1+0x2da>
     db8:	8e 36       	cpi	r24, 0x6E	; 110
     dba:	09 f4       	brne	.+2      	; 0xdbe <__vector_1+0xbe>
     dbc:	c5 c0       	rjmp	.+394    	; 0xf48 <__vector_1+0x248>
     dbe:	8f 36       	cpi	r24, 0x6F	; 111
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <__vector_1+0xc4>
     dc2:	e8 c0       	rjmp	.+464    	; 0xf94 <__vector_1+0x294>
     dc4:	0a c1       	rjmp	.+532    	; 0xfda <__vector_1+0x2da>
		{
			case 0:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     dc6:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     dca:	83 33       	cpi	r24, 0x33	; 51
     dcc:	08 f0       	brcs	.+2      	; 0xdd0 <__vector_1+0xd0>
     dce:	05 c1       	rjmp	.+522    	; 0xfda <__vector_1+0x2da>
     dd0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     dd4:	9a 30       	cpi	r25, 0x0A	; 10
     dd6:	08 f0       	brcs	.+2      	; 0xdda <__vector_1+0xda>
     dd8:	00 c1       	rjmp	.+512    	; 0xfda <__vector_1+0x2da>
     dda:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     dde:	23 33       	cpi	r18, 0x33	; 51
     de0:	08 f0       	brcs	.+2      	; 0xde4 <__vector_1+0xe4>
     de2:	fb c0       	rjmp	.+502    	; 0xfda <__vector_1+0x2da>
     de4:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     de8:	2a 30       	cpi	r18, 0x0A	; 10
     dea:	08 f0       	brcs	.+2      	; 0xdee <__vector_1+0xee>
     dec:	f6 c0       	rjmp	.+492    	; 0xfda <__vector_1+0x2da>
					{
						work_mode = 0;
     dee:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     df2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     df6:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
     dfa:	ef c0       	rjmp	.+478    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 1:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     dfc:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     e00:	83 33       	cpi	r24, 0x33	; 51
     e02:	08 f0       	brcs	.+2      	; 0xe06 <__vector_1+0x106>
     e04:	ea c0       	rjmp	.+468    	; 0xfda <__vector_1+0x2da>
     e06:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     e0a:	9a 30       	cpi	r25, 0x0A	; 10
     e0c:	08 f0       	brcs	.+2      	; 0xe10 <__vector_1+0x110>
     e0e:	e5 c0       	rjmp	.+458    	; 0xfda <__vector_1+0x2da>
     e10:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     e14:	23 33       	cpi	r18, 0x33	; 51
     e16:	08 f0       	brcs	.+2      	; 0xe1a <__vector_1+0x11a>
     e18:	e0 c0       	rjmp	.+448    	; 0xfda <__vector_1+0x2da>
     e1a:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     e1e:	2a 30       	cpi	r18, 0x0A	; 10
     e20:	08 f0       	brcs	.+2      	; 0xe24 <__vector_1+0x124>
     e22:	db c0       	rjmp	.+438    	; 0xfda <__vector_1+0x2da>
					{
						work_mode = 0;
     e24:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     e28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     e2c:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
     e30:	d4 c0       	rjmp	.+424    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 10:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     e32:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     e36:	83 33       	cpi	r24, 0x33	; 51
     e38:	08 f0       	brcs	.+2      	; 0xe3c <__vector_1+0x13c>
     e3a:	cf c0       	rjmp	.+414    	; 0xfda <__vector_1+0x2da>
     e3c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     e40:	9a 30       	cpi	r25, 0x0A	; 10
     e42:	08 f0       	brcs	.+2      	; 0xe46 <__vector_1+0x146>
     e44:	ca c0       	rjmp	.+404    	; 0xfda <__vector_1+0x2da>
     e46:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     e4a:	23 33       	cpi	r18, 0x33	; 51
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <__vector_1+0x150>
     e4e:	c5 c0       	rjmp	.+394    	; 0xfda <__vector_1+0x2da>
     e50:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     e54:	2a 30       	cpi	r18, 0x0A	; 10
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__vector_1+0x15a>
     e58:	c0 c0       	rjmp	.+384    	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 0;
     e5a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     e64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     e68:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						PORTB |= (1<<MOSFET);
     e6c:	88 b3       	in	r24, 0x18	; 24
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
     e72:	82 b3       	in	r24, 0x12	; 18
     e74:	8f 7e       	andi	r24, 0xEF	; 239
     e76:	82 bb       	out	0x12, r24	; 18
     e78:	b0 c0       	rjmp	.+352    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 11:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     e7a:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     e7e:	83 33       	cpi	r24, 0x33	; 51
     e80:	08 f0       	brcs	.+2      	; 0xe84 <__vector_1+0x184>
     e82:	ab c0       	rjmp	.+342    	; 0xfda <__vector_1+0x2da>
     e84:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     e88:	9a 30       	cpi	r25, 0x0A	; 10
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <__vector_1+0x18e>
     e8c:	a6 c0       	rjmp	.+332    	; 0xfda <__vector_1+0x2da>
     e8e:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     e92:	23 33       	cpi	r18, 0x33	; 51
     e94:	08 f0       	brcs	.+2      	; 0xe98 <__vector_1+0x198>
     e96:	a1 c0       	rjmp	.+322    	; 0xfda <__vector_1+0x2da>
     e98:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     e9c:	2a 30       	cpi	r18, 0x0A	; 10
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <__vector_1+0x1a2>
     ea0:	9c c0       	rjmp	.+312    	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 1;
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	20 93 ee 00 	sts	0x00EE, r18	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     ea8:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     eac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     eb0:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						PORTB &= ~(1<<MOSFET);
     eb4:	88 b3       	in	r24, 0x18	; 24
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
     eba:	82 b3       	in	r24, 0x12	; 18
     ebc:	80 61       	ori	r24, 0x10	; 16
     ebe:	82 bb       	out	0x12, r24	; 18
     ec0:	8c c0       	rjmp	.+280    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 100:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     ec2:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     ec6:	83 33       	cpi	r24, 0x33	; 51
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__vector_1+0x1cc>
     eca:	87 c0       	rjmp	.+270    	; 0xfda <__vector_1+0x2da>
     ecc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     ed0:	9a 30       	cpi	r25, 0x0A	; 10
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <__vector_1+0x1d6>
     ed4:	82 c0       	rjmp	.+260    	; 0xfda <__vector_1+0x2da>
     ed6:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     eda:	23 33       	cpi	r18, 0x33	; 51
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__vector_1+0x1e0>
     ede:	7d c0       	rjmp	.+250    	; 0xfda <__vector_1+0x2da>
     ee0:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     ee4:	3a 30       	cpi	r19, 0x0A	; 10
     ee6:	08 f0       	brcs	.+2      	; 0xeea <__vector_1+0x1ea>
     ee8:	78 c0       	rjmp	.+240    	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 0;
     eea:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 0;
     eee:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     ef2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     ef6:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     efa:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     efe:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
     f02:	6b c0       	rjmp	.+214    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 101:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f04:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     f08:	83 33       	cpi	r24, 0x33	; 51
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <__vector_1+0x20e>
     f0c:	66 c0       	rjmp	.+204    	; 0xfda <__vector_1+0x2da>
     f0e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     f12:	9a 30       	cpi	r25, 0x0A	; 10
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__vector_1+0x218>
     f16:	61 c0       	rjmp	.+194    	; 0xfda <__vector_1+0x2da>
     f18:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     f1c:	23 33       	cpi	r18, 0x33	; 51
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <__vector_1+0x222>
     f20:	5c c0       	rjmp	.+184    	; 0xfda <__vector_1+0x2da>
     f22:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     f26:	3a 30       	cpi	r19, 0x0A	; 10
     f28:	08 f0       	brcs	.+2      	; 0xf2c <__vector_1+0x22c>
     f2a:	57 c0       	rjmp	.+174    	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 1;
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	40 93 ee 00 	sts	0x00EE, r20	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 0;
     f32:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     f3a:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     f3e:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     f42:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
     f46:	49 c0       	rjmp	.+146    	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 110:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f48:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     f4c:	83 33       	cpi	r24, 0x33	; 51
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__vector_1+0x252>
     f50:	44 c0       	rjmp	.+136    	; 0xfda <__vector_1+0x2da>
     f52:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     f56:	9a 30       	cpi	r25, 0x0A	; 10
     f58:	08 f0       	brcs	.+2      	; 0xf5c <__vector_1+0x25c>
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <__vector_1+0x2da>
     f5c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     f60:	23 33       	cpi	r18, 0x33	; 51
     f62:	d8 f5       	brcc	.+118    	; 0xfda <__vector_1+0x2da>
     f64:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     f68:	3a 30       	cpi	r19, 0x0A	; 10
     f6a:	b8 f5       	brcc	.+110    	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 0;
     f6c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	40 93 eb 00 	sts	0x00EB, r20	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     f7a:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     f7e:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     f82:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
						PORTB |= (1<<MOSFET);
     f86:	88 b3       	in	r24, 0x18	; 24
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
     f8c:	82 b3       	in	r24, 0x12	; 18
     f8e:	8f 7e       	andi	r24, 0xEF	; 239
     f90:	82 bb       	out	0x12, r24	; 18
     f92:	23 c0       	rjmp	.+70     	; 0xfda <__vector_1+0x2da>
					}
					break;
			case 111:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f94:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     f98:	83 33       	cpi	r24, 0x33	; 51
     f9a:	f8 f4       	brcc	.+62     	; 0xfda <__vector_1+0x2da>
     f9c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     fa0:	9a 30       	cpi	r25, 0x0A	; 10
     fa2:	d8 f4       	brcc	.+54     	; 0xfda <__vector_1+0x2da>
     fa4:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     fa8:	23 33       	cpi	r18, 0x33	; 51
     faa:	b8 f4       	brcc	.+46     	; 0xfda <__vector_1+0x2da>
     fac:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     fb0:	3a 30       	cpi	r19, 0x0A	; 10
     fb2:	98 f4       	brcc	.+38     	; 0xfda <__vector_1+0x2da>
					{
						gas_boiler_enable_flag = 1;
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	40 93 ee 00 	sts	0x00EE, r20	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     fba:	40 93 eb 00 	sts	0x00EB, r20	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     fbe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     fc2:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     fc6:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     fca:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
						PORTB &= ~(1<<MOSFET);
     fce:	88 b3       	in	r24, 0x18	; 24
     fd0:	8e 7f       	andi	r24, 0xFE	; 254
     fd2:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
     fd4:	82 b3       	in	r24, 0x12	; 18
     fd6:	80 61       	ori	r24, 0x10	; 16
     fd8:	82 bb       	out	0x12, r24	; 18
		}
		home_temp_rx_integer = RX_BUF[3];
		home_temp_rx_fraction = RX_BUF[4];
		*/
	}
	if(status&TX_DS) //tx_ds == 0x20
     fda:	c5 70       	andi	r28, 0x05	; 5
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <__vector_1+0x2e4>
	{
		nRF_write_register(STATUS, 0x20);
     fde:	60 e2       	ldi	r22, 0x20	; 32
     fe0:	87 e0       	ldi	r24, 0x07	; 7
     fe2:	6c de       	rcall	.-808    	; 0xcbc <nRF_write_register>
	}
}
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	cf 91       	pop	r28
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	68 de       	rcall	.-816    	; 0xcdc <nRF_read_register>
	//разбудим модуль и переведЄм его в режим приЄмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
    100c:	68 2f       	mov	r22, r24
    100e:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	54 de       	rcall	.-856    	; 0xcbc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    1014:	43 e0       	ldi	r20, 0x03	; 3
    1016:	62 e6       	ldi	r22, 0x62	; 98
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e1       	ldi	r24, 0x10	; 16
    101c:	14 de       	rcall	.-984    	; 0xc46 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    101e:	43 e0       	ldi	r20, 0x03	; 3
    1020:	62 e6       	ldi	r22, 0x62	; 98
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	8b e0       	ldi	r24, 0x0B	; 11
    1026:	0f de       	rcall	.-994    	; 0xc46 <NRF24_Write_Buf>
	HIGH_CE;
    1028:	88 b3       	in	r24, 0x18	; 24
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102e:	87 e5       	ldi	r24, 0x57	; 87
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <NRF24L01_RX_Mode+0x2a>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <NRF24L01_RX_Mode+0x30>
    1038:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    103a:	b1 dd       	rcall	.-1182   	; 0xb9e <NRF24_FlushRX>
	NRF24_FlushTX();
    103c:	be dd       	rcall	.-1156   	; 0xbba <NRF24_FlushTX>
    103e:	08 95       	ret

00001040 <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    1040:	88 b3       	in	r24, 0x18	; 24
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1046:	8f e1       	ldi	r24, 0x1F	; 31
    1048:	9e e4       	ldi	r25, 0x4E	; 78
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <NRF24_ini+0xa>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <NRF24_ini+0x10>
    1050:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    1052:	6a e0       	ldi	r22, 0x0A	; 10
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	32 de       	rcall	.-924    	; 0xcbc <nRF_write_register>
    1058:	8f e1       	ldi	r24, 0x1F	; 31
    105a:	9e e4       	ldi	r25, 0x4E	; 78
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <NRF24_ini+0x1c>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <NRF24_ini+0x22>
    1062:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    1064:	63 e0       	ldi	r22, 0x03	; 3
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	29 de       	rcall	.-942    	; 0xcbc <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    106a:	63 e0       	ldi	r22, 0x03	; 3
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	26 de       	rcall	.-948    	; 0xcbc <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	23 de       	rcall	.-954    	; 0xcbc <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    1076:	6f e6       	ldi	r22, 0x6F	; 111
    1078:	84 e0       	ldi	r24, 0x04	; 4
    107a:	20 de       	rcall	.-960    	; 0xcbc <nRF_write_register>
	NRF24_ToggleFeatures();
    107c:	ac dd       	rcall	.-1192   	; 0xbd6 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	8d e1       	ldi	r24, 0x1D	; 29
    1082:	1c de       	rcall	.-968    	; 0xcbc <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	8c e1       	ldi	r24, 0x1C	; 28
    1088:	19 de       	rcall	.-974    	; 0xcbc <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    108a:	60 e7       	ldi	r22, 0x70	; 112
    108c:	87 e0       	ldi	r24, 0x07	; 7
    108e:	16 de       	rcall	.-980    	; 0xcbc <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    1090:	6c e4       	ldi	r22, 0x4C	; 76
    1092:	85 e0       	ldi	r24, 0x05	; 5
    1094:	13 de       	rcall	.-986    	; 0xcbc <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    1096:	66 e0       	ldi	r22, 0x06	; 6
    1098:	86 e0       	ldi	r24, 0x06	; 6
    109a:	10 de       	rcall	.-992    	; 0xcbc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    109c:	43 e0       	ldi	r20, 0x03	; 3
    109e:	62 e6       	ldi	r22, 0x62	; 98
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e1       	ldi	r24, 0x10	; 16
    10a4:	d0 dd       	rcall	.-1120   	; 0xc46 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    10a6:	43 e0       	ldi	r20, 0x03	; 3
    10a8:	62 e6       	ldi	r22, 0x62	; 98
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	8b e0       	ldi	r24, 0x0B	; 11
    10ae:	cb dd       	rcall	.-1130   	; 0xc46 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    10b0:	65 e0       	ldi	r22, 0x05	; 5
    10b2:	82 e1       	ldi	r24, 0x12	; 18
    10b4:	03 de       	rcall	.-1018   	; 0xcbc <nRF_write_register>
	//пока уходим в режим приЄмника
	NRF24L01_RX_Mode();
    10b6:	a8 df       	rcall	.-176    	; 0x1008 <NRF24L01_RX_Mode>
    10b8:	08 95       	ret

000010ba <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потер€нных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    10c0:	ed dd       	rcall	.-1062   	; 0xc9c <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0b de       	rcall	.-1002   	; 0xcdc <nRF_read_register>
    10c6:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в сп€щий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
    10c8:	68 2f       	mov	r22, r24
    10ca:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	f6 dd       	rcall	.-1044   	; 0xcbc <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	87 e5       	ldi	r24, 0x57	; 87
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <NRF24L01_Send+0x1a>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <NRF24L01_Send+0x20>
    10da:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	//ќтправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    10dc:	45 e0       	ldi	r20, 0x05	; 5
    10de:	be 01       	movw	r22, r28
    10e0:	80 ea       	ldi	r24, 0xA0	; 160
    10e2:	2d dd       	rcall	.-1446   	; 0xb3e <NRF24_Transmit>
	HIGH_CE;
    10e4:	88 b3       	in	r24, 0x18	; 24
    10e6:	82 60       	ori	r24, 0x02	; 2
    10e8:	88 bb       	out	0x18, r24	; 24
    10ea:	90 e5       	ldi	r25, 0x50	; 80
    10ec:	9a 95       	dec	r25
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    10f0:	88 b3       	in	r24, 0x18	; 24
    10f2:	8d 7f       	andi	r24, 0xFD	; 253
    10f4:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
    10f6:	82 99       	sbic	0x10, 2	; 16
    10f8:	fe cf       	rjmp	.-4      	; 0x10f6 <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	ef dd       	rcall	.-1058   	; 0xcdc <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    10fe:	98 2f       	mov	r25, r24
    1100:	95 70       	andi	r25, 0x05	; 5
    1102:	99 f0       	breq	.+38     	; 0x112a <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED_TX);
    1104:	82 b3       	in	r24, 0x12	; 18
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110a:	2f ef       	ldi	r18, 0xFF	; 255
    110c:	81 ee       	ldi	r24, 0xE1	; 225
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	80 40       	sbci	r24, 0x00	; 0
    1114:	90 40       	sbci	r25, 0x00	; 0
    1116:	e1 f7       	brne	.-8      	; 0x1110 <NRF24L01_Send+0x56>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <NRF24L01_Send+0x60>
    111a:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    111c:	82 b3       	in	r24, 0x12	; 18
    111e:	8f 7b       	andi	r24, 0xBF	; 191
    1120:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
    1122:	60 e2       	ldi	r22, 0x20	; 32
    1124:	87 e0       	ldi	r24, 0x07	; 7
    1126:	ca dd       	rcall	.-1132   	; 0xcbc <nRF_write_register>
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
    112a:	82 ff       	sbrs	r24, 2
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
    112e:	60 e1       	ldi	r22, 0x10	; 16
    1130:	87 e0       	ldi	r24, 0x07	; 7
    1132:	c4 dd       	rcall	.-1144   	; 0xcbc <nRF_write_register>
		NRF24_FlushTX();
    1134:	42 dd       	rcall	.-1404   	; 0xbba <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    1136:	88 e0       	ldi	r24, 0x08	; 8
    1138:	d1 dd       	rcall	.-1118   	; 0xcdc <nRF_read_register>
    113a:	c8 2f       	mov	r28, r24
	//”ходим в режим приЄмника
	NRF24L01_RX_Mode();
    113c:	65 df       	rcall	.-310    	; 0x1008 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    113e:	60 e7       	ldi	r22, 0x70	; 112
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	bc dd       	rcall	.-1160   	; 0xcbc <nRF_write_register>
	return regval;
}
    1144:	8c 2f       	mov	r24, r28
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <USART_Init>:

extern uint8_t rx_flag;

void USART_Init( unsigned int speed)//»нициализаци€ модул€ USART
{	
  UBRRH = (unsigned char)(speed>>8);
    114c:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    114e:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //¬ключаем прием и передачу по USART
    1150:	8a b1       	in	r24, 0x0a	; 10
    1152:	88 61       	ori	r24, 0x18	; 24
    1154:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //–азрешаем прерывание при приеме
    1156:	8a b1       	in	r24, 0x0a	; 10
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	8a b9       	out	0x0a, r24	; 10
  UCSRA |= (1<<U2X); // ƒл€ 8 мгц, удвоение скорости
    115c:	8b b1       	in	r24, 0x0b	; 11
    115e:	82 60       	ori	r24, 0x02	; 2
    1160:	8b b9       	out	0x0b, r24	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// ќбращаемс€ именно к регистру UCSRC (URSEL=1),
    1162:	80 b5       	in	r24, 0x20	; 32
    1164:	8e 68       	ori	r24, 0x8E	; 142
    1166:	80 bd       	out	0x20, r24	; 32
    1168:	08 95       	ret

0000116a <USART_Transmit>:
  //ассинхронный режим (UMSEL=0), без контрол€ четности (UPM1=0 и UPM0=0),
  //2 стоп-бит (USBS=1), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
  //UCSRC |= (1<<UPM1);//четность
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
    116a:	dc 01       	movw	r26, r24
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <USART_Transmit+0x16>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
    1170:	5d 9b       	sbis	0x0b, 5	; 11
    1172:	fe cf       	rjmp	.-4      	; 0x1170 <USART_Transmit+0x6>
	  UDR = data[i]; //Ќачало передачи данных
    1174:	fd 01       	movw	r30, r26
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	90 81       	ld	r25, Z
    117c:	9c b9       	out	0x0c, r25	; 12
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	fd 01       	movw	r30, r26
    1186:	01 90       	ld	r0, Z+
    1188:	00 20       	and	r0, r0
    118a:	e9 f7       	brne	.-6      	; 0x1186 <USART_Transmit+0x1c>
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	ea 1b       	sub	r30, r26
    1190:	fb 0b       	sbc	r31, r27
    1192:	2e 17       	cp	r18, r30
    1194:	3f 07       	cpc	r19, r31
    1196:	60 f3       	brcs	.-40     	; 0x1170 <USART_Transmit+0x6>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
	  UDR = data[i]; //Ќачало передачи данных
  }
}
    1198:	08 95       	ret

0000119a <__divmodhi4>:
    119a:	97 fb       	bst	r25, 7
    119c:	07 2e       	mov	r0, r23
    119e:	16 f4       	brtc	.+4      	; 0x11a4 <__divmodhi4+0xa>
    11a0:	00 94       	com	r0
    11a2:	06 d0       	rcall	.+12     	; 0x11b0 <__divmodhi4_neg1>
    11a4:	77 fd       	sbrc	r23, 7
    11a6:	08 d0       	rcall	.+16     	; 0x11b8 <__divmodhi4_neg2>
    11a8:	33 d0       	rcall	.+102    	; 0x1210 <__udivmodhi4>
    11aa:	07 fc       	sbrc	r0, 7
    11ac:	05 d0       	rcall	.+10     	; 0x11b8 <__divmodhi4_neg2>
    11ae:	3e f4       	brtc	.+14     	; 0x11be <__divmodhi4_exit>

000011b0 <__divmodhi4_neg1>:
    11b0:	90 95       	com	r25
    11b2:	81 95       	neg	r24
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	08 95       	ret

000011b8 <__divmodhi4_neg2>:
    11b8:	70 95       	com	r23
    11ba:	61 95       	neg	r22
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255

000011be <__divmodhi4_exit>:
    11be:	08 95       	ret

000011c0 <__divmodsi4>:
    11c0:	05 2e       	mov	r0, r21
    11c2:	97 fb       	bst	r25, 7
    11c4:	16 f4       	brtc	.+4      	; 0x11ca <__divmodsi4+0xa>
    11c6:	00 94       	com	r0
    11c8:	0f d0       	rcall	.+30     	; 0x11e8 <__negsi2>
    11ca:	57 fd       	sbrc	r21, 7
    11cc:	05 d0       	rcall	.+10     	; 0x11d8 <__divmodsi4_neg2>
    11ce:	34 d0       	rcall	.+104    	; 0x1238 <__udivmodsi4>
    11d0:	07 fc       	sbrc	r0, 7
    11d2:	02 d0       	rcall	.+4      	; 0x11d8 <__divmodsi4_neg2>
    11d4:	46 f4       	brtc	.+16     	; 0x11e6 <__divmodsi4_exit>
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <__negsi2>

000011d8 <__divmodsi4_neg2>:
    11d8:	50 95       	com	r21
    11da:	40 95       	com	r20
    11dc:	30 95       	com	r19
    11de:	21 95       	neg	r18
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	4f 4f       	sbci	r20, 0xFF	; 255
    11e4:	5f 4f       	sbci	r21, 0xFF	; 255

000011e6 <__divmodsi4_exit>:
    11e6:	08 95       	ret

000011e8 <__negsi2>:
    11e8:	90 95       	com	r25
    11ea:	80 95       	com	r24
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__umulhisi3>:
    11f8:	a2 9f       	mul	r26, r18
    11fa:	b0 01       	movw	r22, r0
    11fc:	b3 9f       	mul	r27, r19
    11fe:	c0 01       	movw	r24, r0
    1200:	a3 9f       	mul	r26, r19
    1202:	01 d0       	rcall	.+2      	; 0x1206 <__umulhisi3+0xe>
    1204:	b2 9f       	mul	r27, r18
    1206:	70 0d       	add	r23, r0
    1208:	81 1d       	adc	r24, r1
    120a:	11 24       	eor	r1, r1
    120c:	91 1d       	adc	r25, r1
    120e:	08 95       	ret

00001210 <__udivmodhi4>:
    1210:	aa 1b       	sub	r26, r26
    1212:	bb 1b       	sub	r27, r27
    1214:	51 e1       	ldi	r21, 0x11	; 17
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <__udivmodhi4_ep>

00001218 <__udivmodhi4_loop>:
    1218:	aa 1f       	adc	r26, r26
    121a:	bb 1f       	adc	r27, r27
    121c:	a6 17       	cp	r26, r22
    121e:	b7 07       	cpc	r27, r23
    1220:	10 f0       	brcs	.+4      	; 0x1226 <__udivmodhi4_ep>
    1222:	a6 1b       	sub	r26, r22
    1224:	b7 0b       	sbc	r27, r23

00001226 <__udivmodhi4_ep>:
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	5a 95       	dec	r21
    122c:	a9 f7       	brne	.-22     	; 0x1218 <__udivmodhi4_loop>
    122e:	80 95       	com	r24
    1230:	90 95       	com	r25
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	08 95       	ret

00001238 <__udivmodsi4>:
    1238:	a1 e2       	ldi	r26, 0x21	; 33
    123a:	1a 2e       	mov	r1, r26
    123c:	aa 1b       	sub	r26, r26
    123e:	bb 1b       	sub	r27, r27
    1240:	fd 01       	movw	r30, r26
    1242:	0d c0       	rjmp	.+26     	; 0x125e <__udivmodsi4_ep>

00001244 <__udivmodsi4_loop>:
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	ee 1f       	adc	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	a2 17       	cp	r26, r18
    124e:	b3 07       	cpc	r27, r19
    1250:	e4 07       	cpc	r30, r20
    1252:	f5 07       	cpc	r31, r21
    1254:	20 f0       	brcs	.+8      	; 0x125e <__udivmodsi4_ep>
    1256:	a2 1b       	sub	r26, r18
    1258:	b3 0b       	sbc	r27, r19
    125a:	e4 0b       	sbc	r30, r20
    125c:	f5 0b       	sbc	r31, r21

0000125e <__udivmodsi4_ep>:
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	1a 94       	dec	r1
    1268:	69 f7       	brne	.-38     	; 0x1244 <__udivmodsi4_loop>
    126a:	60 95       	com	r22
    126c:	70 95       	com	r23
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	bd 01       	movw	r22, r26
    1278:	cf 01       	movw	r24, r30
    127a:	08 95       	ret

0000127c <memcpy>:
    127c:	fb 01       	movw	r30, r22
    127e:	dc 01       	movw	r26, r24
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <memcpy+0xa>
    1282:	01 90       	ld	r0, Z+
    1284:	0d 92       	st	X+, r0
    1286:	41 50       	subi	r20, 0x01	; 1
    1288:	50 40       	sbci	r21, 0x00	; 0
    128a:	d8 f7       	brcc	.-10     	; 0x1282 <memcpy+0x6>
    128c:	08 95       	ret

0000128e <memset>:
    128e:	dc 01       	movw	r26, r24
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <memset+0x6>
    1292:	6d 93       	st	X+, r22
    1294:	41 50       	subi	r20, 0x01	; 1
    1296:	50 40       	sbci	r21, 0x00	; 0
    1298:	e0 f7       	brcc	.-8      	; 0x1292 <memset+0x4>
    129a:	08 95       	ret

0000129c <strstr>:
    129c:	fb 01       	movw	r30, r22
    129e:	51 91       	ld	r21, Z+
    12a0:	55 23       	and	r21, r21
    12a2:	a9 f0       	breq	.+42     	; 0x12ce <strstr+0x32>
    12a4:	bf 01       	movw	r22, r30
    12a6:	dc 01       	movw	r26, r24
    12a8:	4d 91       	ld	r20, X+
    12aa:	45 17       	cp	r20, r21
    12ac:	41 11       	cpse	r20, r1
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <strstr+0xc>
    12b0:	59 f4       	brne	.+22     	; 0x12c8 <strstr+0x2c>
    12b2:	cd 01       	movw	r24, r26
    12b4:	01 90       	ld	r0, Z+
    12b6:	00 20       	and	r0, r0
    12b8:	49 f0       	breq	.+18     	; 0x12cc <strstr+0x30>
    12ba:	4d 91       	ld	r20, X+
    12bc:	40 15       	cp	r20, r0
    12be:	41 11       	cpse	r20, r1
    12c0:	c9 f3       	breq	.-14     	; 0x12b4 <strstr+0x18>
    12c2:	fb 01       	movw	r30, r22
    12c4:	41 11       	cpse	r20, r1
    12c6:	ef cf       	rjmp	.-34     	; 0x12a6 <strstr+0xa>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	08 95       	ret

000012d0 <sprintf>:
    12d0:	ae e0       	ldi	r26, 0x0E	; 14
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ed e6       	ldi	r30, 0x6D	; 109
    12d6:	f9 e0       	ldi	r31, 0x09	; 9
    12d8:	aa c2       	rjmp	.+1364   	; 0x182e <__prologue_saves__+0x1c>
    12da:	0d 89       	ldd	r16, Y+21	; 0x15
    12dc:	1e 89       	ldd	r17, Y+22	; 0x16
    12de:	86 e0       	ldi	r24, 0x06	; 6
    12e0:	8c 83       	std	Y+4, r24	; 0x04
    12e2:	1a 83       	std	Y+2, r17	; 0x02
    12e4:	09 83       	std	Y+1, r16	; 0x01
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	9f e7       	ldi	r25, 0x7F	; 127
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	ae 01       	movw	r20, r28
    12f0:	47 5e       	subi	r20, 0xE7	; 231
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	6f 89       	ldd	r22, Y+23	; 0x17
    12f6:	78 8d       	ldd	r23, Y+24	; 0x18
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	08 d0       	rcall	.+16     	; 0x130e <vfprintf>
    12fe:	ef 81       	ldd	r30, Y+7	; 0x07
    1300:	f8 85       	ldd	r31, Y+8	; 0x08
    1302:	e0 0f       	add	r30, r16
    1304:	f1 1f       	adc	r31, r17
    1306:	10 82       	st	Z, r1
    1308:	2e 96       	adiw	r28, 0x0e	; 14
    130a:	e4 e0       	ldi	r30, 0x04	; 4
    130c:	ac c2       	rjmp	.+1368   	; 0x1866 <__epilogue_restores__+0x1c>

0000130e <vfprintf>:
    130e:	ab e0       	ldi	r26, 0x0B	; 11
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ec e8       	ldi	r30, 0x8C	; 140
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	7d c2       	rjmp	.+1274   	; 0x1812 <__prologue_saves__>
    1318:	6c 01       	movw	r12, r24
    131a:	7b 01       	movw	r14, r22
    131c:	8a 01       	movw	r16, r20
    131e:	fc 01       	movw	r30, r24
    1320:	17 82       	std	Z+7, r1	; 0x07
    1322:	16 82       	std	Z+6, r1	; 0x06
    1324:	83 81       	ldd	r24, Z+3	; 0x03
    1326:	81 ff       	sbrs	r24, 1
    1328:	bf c1       	rjmp	.+894    	; 0x16a8 <vfprintf+0x39a>
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	3c 01       	movw	r6, r24
    1330:	f6 01       	movw	r30, r12
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	f7 01       	movw	r30, r14
    1336:	93 fd       	sbrc	r25, 3
    1338:	85 91       	lpm	r24, Z+
    133a:	93 ff       	sbrs	r25, 3
    133c:	81 91       	ld	r24, Z+
    133e:	7f 01       	movw	r14, r30
    1340:	88 23       	and	r24, r24
    1342:	09 f4       	brne	.+2      	; 0x1346 <vfprintf+0x38>
    1344:	ad c1       	rjmp	.+858    	; 0x16a0 <vfprintf+0x392>
    1346:	85 32       	cpi	r24, 0x25	; 37
    1348:	39 f4       	brne	.+14     	; 0x1358 <vfprintf+0x4a>
    134a:	93 fd       	sbrc	r25, 3
    134c:	85 91       	lpm	r24, Z+
    134e:	93 ff       	sbrs	r25, 3
    1350:	81 91       	ld	r24, Z+
    1352:	7f 01       	movw	r14, r30
    1354:	85 32       	cpi	r24, 0x25	; 37
    1356:	21 f4       	brne	.+8      	; 0x1360 <vfprintf+0x52>
    1358:	b6 01       	movw	r22, r12
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	c0 d1       	rcall	.+896    	; 0x16de <fputc>
    135e:	e8 cf       	rjmp	.-48     	; 0x1330 <vfprintf+0x22>
    1360:	91 2c       	mov	r9, r1
    1362:	21 2c       	mov	r2, r1
    1364:	31 2c       	mov	r3, r1
    1366:	ff e1       	ldi	r31, 0x1F	; 31
    1368:	f3 15       	cp	r31, r3
    136a:	d8 f0       	brcs	.+54     	; 0x13a2 <vfprintf+0x94>
    136c:	8b 32       	cpi	r24, 0x2B	; 43
    136e:	79 f0       	breq	.+30     	; 0x138e <vfprintf+0x80>
    1370:	38 f4       	brcc	.+14     	; 0x1380 <vfprintf+0x72>
    1372:	80 32       	cpi	r24, 0x20	; 32
    1374:	79 f0       	breq	.+30     	; 0x1394 <vfprintf+0x86>
    1376:	83 32       	cpi	r24, 0x23	; 35
    1378:	a1 f4       	brne	.+40     	; 0x13a2 <vfprintf+0x94>
    137a:	23 2d       	mov	r18, r3
    137c:	20 61       	ori	r18, 0x10	; 16
    137e:	1d c0       	rjmp	.+58     	; 0x13ba <vfprintf+0xac>
    1380:	8d 32       	cpi	r24, 0x2D	; 45
    1382:	61 f0       	breq	.+24     	; 0x139c <vfprintf+0x8e>
    1384:	80 33       	cpi	r24, 0x30	; 48
    1386:	69 f4       	brne	.+26     	; 0x13a2 <vfprintf+0x94>
    1388:	23 2d       	mov	r18, r3
    138a:	21 60       	ori	r18, 0x01	; 1
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <vfprintf+0xac>
    138e:	83 2d       	mov	r24, r3
    1390:	82 60       	ori	r24, 0x02	; 2
    1392:	38 2e       	mov	r3, r24
    1394:	e3 2d       	mov	r30, r3
    1396:	e4 60       	ori	r30, 0x04	; 4
    1398:	3e 2e       	mov	r3, r30
    139a:	2a c0       	rjmp	.+84     	; 0x13f0 <vfprintf+0xe2>
    139c:	f3 2d       	mov	r31, r3
    139e:	f8 60       	ori	r31, 0x08	; 8
    13a0:	1d c0       	rjmp	.+58     	; 0x13dc <vfprintf+0xce>
    13a2:	37 fc       	sbrc	r3, 7
    13a4:	2d c0       	rjmp	.+90     	; 0x1400 <vfprintf+0xf2>
    13a6:	20 ed       	ldi	r18, 0xD0	; 208
    13a8:	28 0f       	add	r18, r24
    13aa:	2a 30       	cpi	r18, 0x0A	; 10
    13ac:	40 f0       	brcs	.+16     	; 0x13be <vfprintf+0xb0>
    13ae:	8e 32       	cpi	r24, 0x2E	; 46
    13b0:	b9 f4       	brne	.+46     	; 0x13e0 <vfprintf+0xd2>
    13b2:	36 fc       	sbrc	r3, 6
    13b4:	75 c1       	rjmp	.+746    	; 0x16a0 <vfprintf+0x392>
    13b6:	23 2d       	mov	r18, r3
    13b8:	20 64       	ori	r18, 0x40	; 64
    13ba:	32 2e       	mov	r3, r18
    13bc:	19 c0       	rjmp	.+50     	; 0x13f0 <vfprintf+0xe2>
    13be:	36 fe       	sbrs	r3, 6
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <vfprintf+0xc0>
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	98 9e       	mul	r9, r24
    13c6:	20 0d       	add	r18, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	92 2e       	mov	r9, r18
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <vfprintf+0xe2>
    13ce:	ea e0       	ldi	r30, 0x0A	; 10
    13d0:	2e 9e       	mul	r2, r30
    13d2:	20 0d       	add	r18, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	22 2e       	mov	r2, r18
    13d8:	f3 2d       	mov	r31, r3
    13da:	f0 62       	ori	r31, 0x20	; 32
    13dc:	3f 2e       	mov	r3, r31
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <vfprintf+0xe2>
    13e0:	8c 36       	cpi	r24, 0x6C	; 108
    13e2:	21 f4       	brne	.+8      	; 0x13ec <vfprintf+0xde>
    13e4:	83 2d       	mov	r24, r3
    13e6:	80 68       	ori	r24, 0x80	; 128
    13e8:	38 2e       	mov	r3, r24
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <vfprintf+0xe2>
    13ec:	88 36       	cpi	r24, 0x68	; 104
    13ee:	41 f4       	brne	.+16     	; 0x1400 <vfprintf+0xf2>
    13f0:	f7 01       	movw	r30, r14
    13f2:	93 fd       	sbrc	r25, 3
    13f4:	85 91       	lpm	r24, Z+
    13f6:	93 ff       	sbrs	r25, 3
    13f8:	81 91       	ld	r24, Z+
    13fa:	7f 01       	movw	r14, r30
    13fc:	81 11       	cpse	r24, r1
    13fe:	b3 cf       	rjmp	.-154    	; 0x1366 <vfprintf+0x58>
    1400:	98 2f       	mov	r25, r24
    1402:	9f 7d       	andi	r25, 0xDF	; 223
    1404:	95 54       	subi	r25, 0x45	; 69
    1406:	93 30       	cpi	r25, 0x03	; 3
    1408:	28 f4       	brcc	.+10     	; 0x1414 <vfprintf+0x106>
    140a:	0c 5f       	subi	r16, 0xFC	; 252
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	9f e3       	ldi	r25, 0x3F	; 63
    1410:	99 83       	std	Y+1, r25	; 0x01
    1412:	0d c0       	rjmp	.+26     	; 0x142e <vfprintf+0x120>
    1414:	83 36       	cpi	r24, 0x63	; 99
    1416:	31 f0       	breq	.+12     	; 0x1424 <vfprintf+0x116>
    1418:	83 37       	cpi	r24, 0x73	; 115
    141a:	71 f0       	breq	.+28     	; 0x1438 <vfprintf+0x12a>
    141c:	83 35       	cpi	r24, 0x53	; 83
    141e:	09 f0       	breq	.+2      	; 0x1422 <vfprintf+0x114>
    1420:	55 c0       	rjmp	.+170    	; 0x14cc <vfprintf+0x1be>
    1422:	20 c0       	rjmp	.+64     	; 0x1464 <vfprintf+0x156>
    1424:	f8 01       	movw	r30, r16
    1426:	80 81       	ld	r24, Z
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	0e 5f       	subi	r16, 0xFE	; 254
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	88 24       	eor	r8, r8
    1430:	83 94       	inc	r8
    1432:	91 2c       	mov	r9, r1
    1434:	53 01       	movw	r10, r6
    1436:	12 c0       	rjmp	.+36     	; 0x145c <vfprintf+0x14e>
    1438:	28 01       	movw	r4, r16
    143a:	f2 e0       	ldi	r31, 0x02	; 2
    143c:	4f 0e       	add	r4, r31
    143e:	51 1c       	adc	r5, r1
    1440:	f8 01       	movw	r30, r16
    1442:	a0 80       	ld	r10, Z
    1444:	b1 80       	ldd	r11, Z+1	; 0x01
    1446:	36 fe       	sbrs	r3, 6
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <vfprintf+0x142>
    144a:	69 2d       	mov	r22, r9
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x146>
    1450:	6f ef       	ldi	r22, 0xFF	; 255
    1452:	7f ef       	ldi	r23, 0xFF	; 255
    1454:	c5 01       	movw	r24, r10
    1456:	38 d1       	rcall	.+624    	; 0x16c8 <strnlen>
    1458:	4c 01       	movw	r8, r24
    145a:	82 01       	movw	r16, r4
    145c:	f3 2d       	mov	r31, r3
    145e:	ff 77       	andi	r31, 0x7F	; 127
    1460:	3f 2e       	mov	r3, r31
    1462:	15 c0       	rjmp	.+42     	; 0x148e <vfprintf+0x180>
    1464:	28 01       	movw	r4, r16
    1466:	22 e0       	ldi	r18, 0x02	; 2
    1468:	42 0e       	add	r4, r18
    146a:	51 1c       	adc	r5, r1
    146c:	f8 01       	movw	r30, r16
    146e:	a0 80       	ld	r10, Z
    1470:	b1 80       	ldd	r11, Z+1	; 0x01
    1472:	36 fe       	sbrs	r3, 6
    1474:	03 c0       	rjmp	.+6      	; 0x147c <vfprintf+0x16e>
    1476:	69 2d       	mov	r22, r9
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0x172>
    147c:	6f ef       	ldi	r22, 0xFF	; 255
    147e:	7f ef       	ldi	r23, 0xFF	; 255
    1480:	c5 01       	movw	r24, r10
    1482:	17 d1       	rcall	.+558    	; 0x16b2 <strnlen_P>
    1484:	4c 01       	movw	r8, r24
    1486:	f3 2d       	mov	r31, r3
    1488:	f0 68       	ori	r31, 0x80	; 128
    148a:	3f 2e       	mov	r3, r31
    148c:	82 01       	movw	r16, r4
    148e:	33 fc       	sbrc	r3, 3
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <vfprintf+0x1b6>
    1492:	82 2d       	mov	r24, r2
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	88 16       	cp	r8, r24
    1498:	99 06       	cpc	r9, r25
    149a:	a0 f4       	brcc	.+40     	; 0x14c4 <vfprintf+0x1b6>
    149c:	b6 01       	movw	r22, r12
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	1d d1       	rcall	.+570    	; 0x16de <fputc>
    14a4:	2a 94       	dec	r2
    14a6:	f5 cf       	rjmp	.-22     	; 0x1492 <vfprintf+0x184>
    14a8:	f5 01       	movw	r30, r10
    14aa:	37 fc       	sbrc	r3, 7
    14ac:	85 91       	lpm	r24, Z+
    14ae:	37 fe       	sbrs	r3, 7
    14b0:	81 91       	ld	r24, Z+
    14b2:	5f 01       	movw	r10, r30
    14b4:	b6 01       	movw	r22, r12
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	12 d1       	rcall	.+548    	; 0x16de <fputc>
    14ba:	21 10       	cpse	r2, r1
    14bc:	2a 94       	dec	r2
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	82 1a       	sub	r8, r18
    14c2:	91 08       	sbc	r9, r1
    14c4:	81 14       	cp	r8, r1
    14c6:	91 04       	cpc	r9, r1
    14c8:	79 f7       	brne	.-34     	; 0x14a8 <vfprintf+0x19a>
    14ca:	e1 c0       	rjmp	.+450    	; 0x168e <vfprintf+0x380>
    14cc:	84 36       	cpi	r24, 0x64	; 100
    14ce:	11 f0       	breq	.+4      	; 0x14d4 <vfprintf+0x1c6>
    14d0:	89 36       	cpi	r24, 0x69	; 105
    14d2:	39 f5       	brne	.+78     	; 0x1522 <vfprintf+0x214>
    14d4:	f8 01       	movw	r30, r16
    14d6:	37 fe       	sbrs	r3, 7
    14d8:	07 c0       	rjmp	.+14     	; 0x14e8 <vfprintf+0x1da>
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	0c 5f       	subi	r16, 0xFC	; 252
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <vfprintf+0x1ea>
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	07 2e       	mov	r0, r23
    14ee:	00 0c       	add	r0, r0
    14f0:	88 0b       	sbc	r24, r24
    14f2:	99 0b       	sbc	r25, r25
    14f4:	0e 5f       	subi	r16, 0xFE	; 254
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	f3 2d       	mov	r31, r3
    14fa:	ff 76       	andi	r31, 0x6F	; 111
    14fc:	3f 2e       	mov	r3, r31
    14fe:	97 ff       	sbrs	r25, 7
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <vfprintf+0x206>
    1502:	90 95       	com	r25
    1504:	80 95       	com	r24
    1506:	70 95       	com	r23
    1508:	61 95       	neg	r22
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	f0 68       	ori	r31, 0x80	; 128
    1512:	3f 2e       	mov	r3, r31
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	a3 01       	movw	r20, r6
    151a:	1d d1       	rcall	.+570    	; 0x1756 <__ultoa_invert>
    151c:	88 2e       	mov	r8, r24
    151e:	86 18       	sub	r8, r6
    1520:	44 c0       	rjmp	.+136    	; 0x15aa <vfprintf+0x29c>
    1522:	85 37       	cpi	r24, 0x75	; 117
    1524:	31 f4       	brne	.+12     	; 0x1532 <vfprintf+0x224>
    1526:	23 2d       	mov	r18, r3
    1528:	2f 7e       	andi	r18, 0xEF	; 239
    152a:	b2 2e       	mov	r11, r18
    152c:	2a e0       	ldi	r18, 0x0A	; 10
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	25 c0       	rjmp	.+74     	; 0x157c <vfprintf+0x26e>
    1532:	93 2d       	mov	r25, r3
    1534:	99 7f       	andi	r25, 0xF9	; 249
    1536:	b9 2e       	mov	r11, r25
    1538:	8f 36       	cpi	r24, 0x6F	; 111
    153a:	c1 f0       	breq	.+48     	; 0x156c <vfprintf+0x25e>
    153c:	18 f4       	brcc	.+6      	; 0x1544 <vfprintf+0x236>
    153e:	88 35       	cpi	r24, 0x58	; 88
    1540:	79 f0       	breq	.+30     	; 0x1560 <vfprintf+0x252>
    1542:	ae c0       	rjmp	.+348    	; 0x16a0 <vfprintf+0x392>
    1544:	80 37       	cpi	r24, 0x70	; 112
    1546:	19 f0       	breq	.+6      	; 0x154e <vfprintf+0x240>
    1548:	88 37       	cpi	r24, 0x78	; 120
    154a:	21 f0       	breq	.+8      	; 0x1554 <vfprintf+0x246>
    154c:	a9 c0       	rjmp	.+338    	; 0x16a0 <vfprintf+0x392>
    154e:	e9 2f       	mov	r30, r25
    1550:	e0 61       	ori	r30, 0x10	; 16
    1552:	be 2e       	mov	r11, r30
    1554:	b4 fe       	sbrs	r11, 4
    1556:	0d c0       	rjmp	.+26     	; 0x1572 <vfprintf+0x264>
    1558:	fb 2d       	mov	r31, r11
    155a:	f4 60       	ori	r31, 0x04	; 4
    155c:	bf 2e       	mov	r11, r31
    155e:	09 c0       	rjmp	.+18     	; 0x1572 <vfprintf+0x264>
    1560:	34 fe       	sbrs	r3, 4
    1562:	0a c0       	rjmp	.+20     	; 0x1578 <vfprintf+0x26a>
    1564:	29 2f       	mov	r18, r25
    1566:	26 60       	ori	r18, 0x06	; 6
    1568:	b2 2e       	mov	r11, r18
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <vfprintf+0x26a>
    156c:	28 e0       	ldi	r18, 0x08	; 8
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	05 c0       	rjmp	.+10     	; 0x157c <vfprintf+0x26e>
    1572:	20 e1       	ldi	r18, 0x10	; 16
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x26e>
    1578:	20 e1       	ldi	r18, 0x10	; 16
    157a:	32 e0       	ldi	r19, 0x02	; 2
    157c:	f8 01       	movw	r30, r16
    157e:	b7 fe       	sbrs	r11, 7
    1580:	07 c0       	rjmp	.+14     	; 0x1590 <vfprintf+0x282>
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	0c 5f       	subi	r16, 0xFC	; 252
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	06 c0       	rjmp	.+12     	; 0x159c <vfprintf+0x28e>
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 5f       	subi	r16, 0xFE	; 254
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	a3 01       	movw	r20, r6
    159e:	db d0       	rcall	.+438    	; 0x1756 <__ultoa_invert>
    15a0:	88 2e       	mov	r8, r24
    15a2:	86 18       	sub	r8, r6
    15a4:	fb 2d       	mov	r31, r11
    15a6:	ff 77       	andi	r31, 0x7F	; 127
    15a8:	3f 2e       	mov	r3, r31
    15aa:	36 fe       	sbrs	r3, 6
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <vfprintf+0x2ba>
    15ae:	23 2d       	mov	r18, r3
    15b0:	2e 7f       	andi	r18, 0xFE	; 254
    15b2:	a2 2e       	mov	r10, r18
    15b4:	89 14       	cp	r8, r9
    15b6:	58 f4       	brcc	.+22     	; 0x15ce <vfprintf+0x2c0>
    15b8:	34 fe       	sbrs	r3, 4
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <vfprintf+0x2c4>
    15bc:	32 fc       	sbrc	r3, 2
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <vfprintf+0x2c4>
    15c0:	83 2d       	mov	r24, r3
    15c2:	8e 7e       	andi	r24, 0xEE	; 238
    15c4:	a8 2e       	mov	r10, r24
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <vfprintf+0x2c4>
    15c8:	b8 2c       	mov	r11, r8
    15ca:	a3 2c       	mov	r10, r3
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x2c6>
    15ce:	b8 2c       	mov	r11, r8
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <vfprintf+0x2c6>
    15d2:	b9 2c       	mov	r11, r9
    15d4:	a4 fe       	sbrs	r10, 4
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <vfprintf+0x2e8>
    15d8:	fe 01       	movw	r30, r28
    15da:	e8 0d       	add	r30, r8
    15dc:	f1 1d       	adc	r31, r1
    15de:	80 81       	ld	r24, Z
    15e0:	80 33       	cpi	r24, 0x30	; 48
    15e2:	21 f4       	brne	.+8      	; 0x15ec <vfprintf+0x2de>
    15e4:	9a 2d       	mov	r25, r10
    15e6:	99 7e       	andi	r25, 0xE9	; 233
    15e8:	a9 2e       	mov	r10, r25
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x2f0>
    15ec:	a2 fe       	sbrs	r10, 2
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <vfprintf+0x2ee>
    15f0:	b3 94       	inc	r11
    15f2:	b3 94       	inc	r11
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <vfprintf+0x2f0>
    15f6:	8a 2d       	mov	r24, r10
    15f8:	86 78       	andi	r24, 0x86	; 134
    15fa:	09 f0       	breq	.+2      	; 0x15fe <vfprintf+0x2f0>
    15fc:	b3 94       	inc	r11
    15fe:	a3 fc       	sbrc	r10, 3
    1600:	10 c0       	rjmp	.+32     	; 0x1622 <vfprintf+0x314>
    1602:	a0 fe       	sbrs	r10, 0
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <vfprintf+0x304>
    1606:	b2 14       	cp	r11, r2
    1608:	80 f4       	brcc	.+32     	; 0x162a <vfprintf+0x31c>
    160a:	28 0c       	add	r2, r8
    160c:	92 2c       	mov	r9, r2
    160e:	9b 18       	sub	r9, r11
    1610:	0d c0       	rjmp	.+26     	; 0x162c <vfprintf+0x31e>
    1612:	b2 14       	cp	r11, r2
    1614:	58 f4       	brcc	.+22     	; 0x162c <vfprintf+0x31e>
    1616:	b6 01       	movw	r22, r12
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	60 d0       	rcall	.+192    	; 0x16de <fputc>
    161e:	b3 94       	inc	r11
    1620:	f8 cf       	rjmp	.-16     	; 0x1612 <vfprintf+0x304>
    1622:	b2 14       	cp	r11, r2
    1624:	18 f4       	brcc	.+6      	; 0x162c <vfprintf+0x31e>
    1626:	2b 18       	sub	r2, r11
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0x320>
    162a:	98 2c       	mov	r9, r8
    162c:	21 2c       	mov	r2, r1
    162e:	a4 fe       	sbrs	r10, 4
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <vfprintf+0x342>
    1632:	b6 01       	movw	r22, r12
    1634:	80 e3       	ldi	r24, 0x30	; 48
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	52 d0       	rcall	.+164    	; 0x16de <fputc>
    163a:	a2 fe       	sbrs	r10, 2
    163c:	16 c0       	rjmp	.+44     	; 0x166a <vfprintf+0x35c>
    163e:	a1 fc       	sbrc	r10, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <vfprintf+0x33a>
    1642:	88 e7       	ldi	r24, 0x78	; 120
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x33e>
    1648:	88 e5       	ldi	r24, 0x58	; 88
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	b6 01       	movw	r22, r12
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <vfprintf+0x35a>
    1650:	8a 2d       	mov	r24, r10
    1652:	86 78       	andi	r24, 0x86	; 134
    1654:	51 f0       	breq	.+20     	; 0x166a <vfprintf+0x35c>
    1656:	a1 fe       	sbrs	r10, 1
    1658:	02 c0       	rjmp	.+4      	; 0x165e <vfprintf+0x350>
    165a:	8b e2       	ldi	r24, 0x2B	; 43
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <vfprintf+0x352>
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	a7 fc       	sbrc	r10, 7
    1662:	8d e2       	ldi	r24, 0x2D	; 45
    1664:	b6 01       	movw	r22, r12
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	3a d0       	rcall	.+116    	; 0x16de <fputc>
    166a:	89 14       	cp	r8, r9
    166c:	30 f4       	brcc	.+12     	; 0x167a <vfprintf+0x36c>
    166e:	b6 01       	movw	r22, r12
    1670:	80 e3       	ldi	r24, 0x30	; 48
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	34 d0       	rcall	.+104    	; 0x16de <fputc>
    1676:	9a 94       	dec	r9
    1678:	f8 cf       	rjmp	.-16     	; 0x166a <vfprintf+0x35c>
    167a:	8a 94       	dec	r8
    167c:	f3 01       	movw	r30, r6
    167e:	e8 0d       	add	r30, r8
    1680:	f1 1d       	adc	r31, r1
    1682:	80 81       	ld	r24, Z
    1684:	b6 01       	movw	r22, r12
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	2a d0       	rcall	.+84     	; 0x16de <fputc>
    168a:	81 10       	cpse	r8, r1
    168c:	f6 cf       	rjmp	.-20     	; 0x167a <vfprintf+0x36c>
    168e:	22 20       	and	r2, r2
    1690:	09 f4       	brne	.+2      	; 0x1694 <vfprintf+0x386>
    1692:	4e ce       	rjmp	.-868    	; 0x1330 <vfprintf+0x22>
    1694:	b6 01       	movw	r22, r12
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	21 d0       	rcall	.+66     	; 0x16de <fputc>
    169c:	2a 94       	dec	r2
    169e:	f7 cf       	rjmp	.-18     	; 0x168e <vfprintf+0x380>
    16a0:	f6 01       	movw	r30, r12
    16a2:	86 81       	ldd	r24, Z+6	; 0x06
    16a4:	97 81       	ldd	r25, Z+7	; 0x07
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x39e>
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	2b 96       	adiw	r28, 0x0b	; 11
    16ae:	e2 e1       	ldi	r30, 0x12	; 18
    16b0:	cc c0       	rjmp	.+408    	; 0x184a <__epilogue_restores__>

000016b2 <strnlen_P>:
    16b2:	fc 01       	movw	r30, r24
    16b4:	05 90       	lpm	r0, Z+
    16b6:	61 50       	subi	r22, 0x01	; 1
    16b8:	70 40       	sbci	r23, 0x00	; 0
    16ba:	01 10       	cpse	r0, r1
    16bc:	d8 f7       	brcc	.-10     	; 0x16b4 <strnlen_P+0x2>
    16be:	80 95       	com	r24
    16c0:	90 95       	com	r25
    16c2:	8e 0f       	add	r24, r30
    16c4:	9f 1f       	adc	r25, r31
    16c6:	08 95       	ret

000016c8 <strnlen>:
    16c8:	fc 01       	movw	r30, r24
    16ca:	61 50       	subi	r22, 0x01	; 1
    16cc:	70 40       	sbci	r23, 0x00	; 0
    16ce:	01 90       	ld	r0, Z+
    16d0:	01 10       	cpse	r0, r1
    16d2:	d8 f7       	brcc	.-10     	; 0x16ca <strnlen+0x2>
    16d4:	80 95       	com	r24
    16d6:	90 95       	com	r25
    16d8:	8e 0f       	add	r24, r30
    16da:	9f 1f       	adc	r25, r31
    16dc:	08 95       	ret

000016de <fputc>:
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	fb 01       	movw	r30, r22
    16e8:	23 81       	ldd	r18, Z+3	; 0x03
    16ea:	21 fd       	sbrc	r18, 1
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <fputc+0x16>
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	2c c0       	rjmp	.+88     	; 0x174c <fputc+0x6e>
    16f4:	22 ff       	sbrs	r18, 2
    16f6:	16 c0       	rjmp	.+44     	; 0x1724 <fputc+0x46>
    16f8:	46 81       	ldd	r20, Z+6	; 0x06
    16fa:	57 81       	ldd	r21, Z+7	; 0x07
    16fc:	24 81       	ldd	r18, Z+4	; 0x04
    16fe:	35 81       	ldd	r19, Z+5	; 0x05
    1700:	42 17       	cp	r20, r18
    1702:	53 07       	cpc	r21, r19
    1704:	44 f4       	brge	.+16     	; 0x1716 <fputc+0x38>
    1706:	a0 81       	ld	r26, Z
    1708:	b1 81       	ldd	r27, Z+1	; 0x01
    170a:	9d 01       	movw	r18, r26
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	31 83       	std	Z+1, r19	; 0x01
    1712:	20 83       	st	Z, r18
    1714:	8c 93       	st	X, r24
    1716:	26 81       	ldd	r18, Z+6	; 0x06
    1718:	37 81       	ldd	r19, Z+7	; 0x07
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	37 83       	std	Z+7, r19	; 0x07
    1720:	26 83       	std	Z+6, r18	; 0x06
    1722:	14 c0       	rjmp	.+40     	; 0x174c <fputc+0x6e>
    1724:	8b 01       	movw	r16, r22
    1726:	ec 01       	movw	r28, r24
    1728:	fb 01       	movw	r30, r22
    172a:	00 84       	ldd	r0, Z+8	; 0x08
    172c:	f1 85       	ldd	r31, Z+9	; 0x09
    172e:	e0 2d       	mov	r30, r0
    1730:	09 95       	icall
    1732:	89 2b       	or	r24, r25
    1734:	e1 f6       	brne	.-72     	; 0x16ee <fputc+0x10>
    1736:	d8 01       	movw	r26, r16
    1738:	16 96       	adiw	r26, 0x06	; 6
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	17 97       	sbiw	r26, 0x07	; 7
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	17 96       	adiw	r26, 0x07	; 7
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
    1748:	16 97       	sbiw	r26, 0x06	; 6
    174a:	ce 01       	movw	r24, r28
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <__ultoa_invert>:
    1756:	fa 01       	movw	r30, r20
    1758:	aa 27       	eor	r26, r26
    175a:	28 30       	cpi	r18, 0x08	; 8
    175c:	51 f1       	breq	.+84     	; 0x17b2 <__ultoa_invert+0x5c>
    175e:	20 31       	cpi	r18, 0x10	; 16
    1760:	81 f1       	breq	.+96     	; 0x17c2 <__ultoa_invert+0x6c>
    1762:	e8 94       	clt
    1764:	6f 93       	push	r22
    1766:	6e 7f       	andi	r22, 0xFE	; 254
    1768:	6e 5f       	subi	r22, 0xFE	; 254
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	af 4f       	sbci	r26, 0xFF	; 255
    1772:	b1 e0       	ldi	r27, 0x01	; 1
    1774:	3e d0       	rcall	.+124    	; 0x17f2 <__ultoa_invert+0x9c>
    1776:	b4 e0       	ldi	r27, 0x04	; 4
    1778:	3c d0       	rcall	.+120    	; 0x17f2 <__ultoa_invert+0x9c>
    177a:	67 0f       	add	r22, r23
    177c:	78 1f       	adc	r23, r24
    177e:	89 1f       	adc	r24, r25
    1780:	9a 1f       	adc	r25, r26
    1782:	a1 1d       	adc	r26, r1
    1784:	68 0f       	add	r22, r24
    1786:	79 1f       	adc	r23, r25
    1788:	8a 1f       	adc	r24, r26
    178a:	91 1d       	adc	r25, r1
    178c:	a1 1d       	adc	r26, r1
    178e:	6a 0f       	add	r22, r26
    1790:	71 1d       	adc	r23, r1
    1792:	81 1d       	adc	r24, r1
    1794:	91 1d       	adc	r25, r1
    1796:	a1 1d       	adc	r26, r1
    1798:	20 d0       	rcall	.+64     	; 0x17da <__ultoa_invert+0x84>
    179a:	09 f4       	brne	.+2      	; 0x179e <__ultoa_invert+0x48>
    179c:	68 94       	set
    179e:	3f 91       	pop	r19
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	26 9f       	mul	r18, r22
    17a4:	11 24       	eor	r1, r1
    17a6:	30 19       	sub	r19, r0
    17a8:	30 5d       	subi	r19, 0xD0	; 208
    17aa:	31 93       	st	Z+, r19
    17ac:	de f6       	brtc	.-74     	; 0x1764 <__ultoa_invert+0xe>
    17ae:	cf 01       	movw	r24, r30
    17b0:	08 95       	ret
    17b2:	46 2f       	mov	r20, r22
    17b4:	47 70       	andi	r20, 0x07	; 7
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	41 93       	st	Z+, r20
    17ba:	b3 e0       	ldi	r27, 0x03	; 3
    17bc:	0f d0       	rcall	.+30     	; 0x17dc <__ultoa_invert+0x86>
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__ultoa_invert+0x5c>
    17c0:	f6 cf       	rjmp	.-20     	; 0x17ae <__ultoa_invert+0x58>
    17c2:	46 2f       	mov	r20, r22
    17c4:	4f 70       	andi	r20, 0x0F	; 15
    17c6:	40 5d       	subi	r20, 0xD0	; 208
    17c8:	4a 33       	cpi	r20, 0x3A	; 58
    17ca:	18 f0       	brcs	.+6      	; 0x17d2 <__ultoa_invert+0x7c>
    17cc:	49 5d       	subi	r20, 0xD9	; 217
    17ce:	31 fd       	sbrc	r19, 1
    17d0:	40 52       	subi	r20, 0x20	; 32
    17d2:	41 93       	st	Z+, r20
    17d4:	02 d0       	rcall	.+4      	; 0x17da <__ultoa_invert+0x84>
    17d6:	a9 f7       	brne	.-22     	; 0x17c2 <__ultoa_invert+0x6c>
    17d8:	ea cf       	rjmp	.-44     	; 0x17ae <__ultoa_invert+0x58>
    17da:	b4 e0       	ldi	r27, 0x04	; 4
    17dc:	a6 95       	lsr	r26
    17de:	97 95       	ror	r25
    17e0:	87 95       	ror	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	ba 95       	dec	r27
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <__ultoa_invert+0x86>
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 05       	cpc	r22, r1
    17ee:	71 05       	cpc	r23, r1
    17f0:	08 95       	ret
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	0a 2e       	mov	r0, r26
    17f8:	06 94       	lsr	r0
    17fa:	57 95       	ror	r21
    17fc:	47 95       	ror	r20
    17fe:	37 95       	ror	r19
    1800:	27 95       	ror	r18
    1802:	ba 95       	dec	r27
    1804:	c9 f7       	brne	.-14     	; 0x17f8 <__ultoa_invert+0xa2>
    1806:	62 0f       	add	r22, r18
    1808:	73 1f       	adc	r23, r19
    180a:	84 1f       	adc	r24, r20
    180c:	95 1f       	adc	r25, r21
    180e:	a0 1d       	adc	r26, r0
    1810:	08 95       	ret

00001812 <__prologue_saves__>:
    1812:	2f 92       	push	r2
    1814:	3f 92       	push	r3
    1816:	4f 92       	push	r4
    1818:	5f 92       	push	r5
    181a:	6f 92       	push	r6
    181c:	7f 92       	push	r7
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	ca 1b       	sub	r28, r26
    183c:	db 0b       	sbc	r29, r27
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	09 94       	ijmp

0000184a <__epilogue_restores__>:
    184a:	2a 88       	ldd	r2, Y+18	; 0x12
    184c:	39 88       	ldd	r3, Y+17	; 0x11
    184e:	48 88       	ldd	r4, Y+16	; 0x10
    1850:	5f 84       	ldd	r5, Y+15	; 0x0f
    1852:	6e 84       	ldd	r6, Y+14	; 0x0e
    1854:	7d 84       	ldd	r7, Y+13	; 0x0d
    1856:	8c 84       	ldd	r8, Y+12	; 0x0c
    1858:	9b 84       	ldd	r9, Y+11	; 0x0b
    185a:	aa 84       	ldd	r10, Y+10	; 0x0a
    185c:	b9 84       	ldd	r11, Y+9	; 0x09
    185e:	c8 84       	ldd	r12, Y+8	; 0x08
    1860:	df 80       	ldd	r13, Y+7	; 0x07
    1862:	ee 80       	ldd	r14, Y+6	; 0x06
    1864:	fd 80       	ldd	r15, Y+5	; 0x05
    1866:	0c 81       	ldd	r16, Y+4	; 0x04
    1868:	1b 81       	ldd	r17, Y+3	; 0x03
    186a:	aa 81       	ldd	r26, Y+2	; 0x02
    186c:	b9 81       	ldd	r27, Y+1	; 0x01
    186e:	ce 0f       	add	r28, r30
    1870:	d1 1d       	adc	r29, r1
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	ed 01       	movw	r28, r26
    187e:	08 95       	ret

00001880 <_exit>:
    1880:	f8 94       	cli

00001882 <__stop_program>:
    1882:	ff cf       	rjmp	.-2      	; 0x1882 <__stop_program>
