
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001c16  00001caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000092  008000a0  008000a0  00001cea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030bb  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e75  00000000  00000000  0000506f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a17  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  000078fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000994  00000000  00000000  00007f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e5d  00000000  00000000  000088dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	7d c8       	rjmp	.-3846   	; 0xfffff0fe <__eeprom_end+0xff7ef0fe>
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__vector_2>
       6:	41 c1       	rjmp	.+642    	; 0x28a <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	cf c1       	rjmp	.+926    	; 0x3ac <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	20 c2       	rjmp	.+1088   	; 0x458 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e6 e1       	ldi	r30, 0x16	; 22
      3a:	fc e1       	ldi	r31, 0x1C	; 28
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 3a       	cpi	r26, 0xA0	; 160
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a0 ea       	ldi	r26, 0xA0	; 160
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a2 33       	cpi	r26, 0x32	; 50
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	2c d2       	rcall	.+1112   	; 0x4b2 <main>
      5a:	db cd       	rjmp	.-1098   	; 0xfffffc12 <__eeprom_end+0xff7efc12>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t work_mode;

void gas_boiler_controller(void)
{
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	26 c0       	rjmp	.+76     	; 0xb2 <gas_boiler_controller+0x54>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
      66:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <home_temp_rx_integer>
      6a:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <temp_setpoint_integer>
      6e:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <home_temp_rx_fraction>
      72:	30 e0       	ldi	r19, 0x00	; 0
      74:	5a e0       	ldi	r21, 0x0A	; 10
      76:	85 9f       	mul	r24, r21
      78:	20 0d       	add	r18, r0
      7a:	31 1d       	adc	r19, r1
      7c:	11 24       	eor	r1, r1
      7e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
      82:	90 e0       	ldi	r25, 0x00	; 0
      84:	5a e0       	ldi	r21, 0x0A	; 10
      86:	45 9f       	mul	r20, r21
      88:	80 0d       	add	r24, r0
      8a:	91 1d       	adc	r25, r1
      8c:	11 24       	eor	r1, r1
      8e:	28 17       	cp	r18, r24
      90:	39 07       	cpc	r19, r25
      92:	34 f4       	brge	.+12     	; 0xa0 <gas_boiler_controller+0x42>
		{
			gas_boiler_enable_flag = 1;
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      9a:	c0 98       	cbi	0x18, 0	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      9c:	94 9a       	sbi	0x12, 4	; 18
      9e:	04 c0       	rjmp	.+8      	; 0xa8 <gas_boiler_controller+0x4a>
			EEPROM_write(5, gas_boiler_enable_flag);
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
		{
			gas_boiler_enable_flag = 0;
      a0:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      a4:	c0 9a       	sbi	0x18, 0	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      a6:	94 98       	cbi	0x12, 4	; 18
			EEPROM_write(5, gas_boiler_enable_flag);
      a8:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
      ac:	85 e0       	ldi	r24, 0x05	; 5
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <EEPROM_write>
      b2:	08 95       	ret

000000b4 <dt_testdevice>:
  return tt;
}
//функци€ определени€ датчика на шине
char dt_testdevice(void) //dt Ч digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      b4:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывани€
      b6:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      b8:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ba:	e3 e9       	ldi	r30, 0x93	; 147
      bc:	f7 e0       	ldi	r31, 0x07	; 7
      be:	31 97       	sbiw	r30, 0x01	; 1
      c0:	f1 f7       	brne	.-4      	; 0xbe <dt_testdevice+0xa>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <dt_testdevice+0x10>
      c4:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      c6:	8f 98       	cbi	0x11, 7	; 17
      c8:	e3 e0       	ldi	r30, 0x03	; 3
      ca:	f1 e0       	ldi	r31, 0x01	; 1
      cc:	31 97       	sbiw	r30, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <dt_testdevice+0x18>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <dt_testdevice+0x1e>
      d2:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//провер€ем, ответит ли устройство
      d4:	80 b3       	in	r24, 0x10	; 16
  {
	  dt=1;//устройство есть
  }
  else dt=0;//устройства нет
  SREG = stektemp;// вернем значение стека
      d6:	9f bf       	out	0x3f, r25	; 63
      d8:	ef e8       	ldi	r30, 0x8F	; 143
      da:	f6 e0       	ldi	r31, 0x06	; 6
      dc:	31 97       	sbiw	r30, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <dt_testdevice+0x28>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <dt_testdevice+0x2e>
      e2:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
      e4:	80 95       	com	r24
}
      e6:	88 1f       	adc	r24, r24
      e8:	88 27       	eor	r24, r24
      ea:	88 1f       	adc	r24, r24
      ec:	08 95       	ret

000000ee <dt_readbit>:
	return c;
}
//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
      ee:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
      f0:	f8 94       	cli
  char bt; //переменна€ хранени€ бита
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      f2:	8f 9a       	sbi	0x11, 7	; 17
      f4:	2a e0       	ldi	r18, 0x0A	; 10
      f6:	2a 95       	dec	r18
      f8:	f1 f7       	brne	.-4      	; 0xf6 <dt_readbit+0x8>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <dt_readbit+0xe>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      fc:	8f 98       	cbi	0x11, 7	; 17
      fe:	85 e4       	ldi	r24, 0x45	; 69
     100:	8a 95       	dec	r24
     102:	f1 f7       	brne	.-4      	; 0x100 <dt_readbit+0x12>
     104:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     106:	80 b3       	in	r24, 0x10	; 16
     108:	20 ef       	ldi	r18, 0xF0	; 240
     10a:	2a 95       	dec	r18
     10c:	f1 f7       	brne	.-4      	; 0x10a <dt_readbit+0x1c>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     10e:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     110:	88 1f       	adc	r24, r24
     112:	88 27       	eor	r24, r24
     114:	88 1f       	adc	r24, r24
     116:	08 95       	ret

00000118 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
	char c=0;
     122:	10 e0       	ldi	r17, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
	{
	  c|=dt_readbit()<<i; //читаем бит
     124:	e4 df       	rcall	.-56     	; 0xee <dt_readbit>
     126:	0c 2e       	mov	r0, r28
     128:	01 c0       	rjmp	.+2      	; 0x12c <dt_readbyte+0x14>
     12a:	88 0f       	add	r24, r24
     12c:	0a 94       	dec	r0
     12e:	ea f7       	brpl	.-6      	; 0x12a <dt_readbyte+0x12>
     130:	18 2b       	or	r17, r24
     132:	21 96       	adiw	r28, 0x01	; 1
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     134:	c8 30       	cpi	r28, 0x08	; 8
     136:	d1 05       	cpc	r29, r1
     138:	a9 f7       	brne	.-22     	; 0x124 <dt_readbyte+0xc>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     13a:	81 2f       	mov	r24, r17
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	08 95       	ret

00000144 <dt_sendbit>:
	}
}
//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     144:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
     146:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     148:	8f 9a       	sbi	0x11, 7	; 17
     14a:	2a e0       	ldi	r18, 0x0A	; 10
     14c:	2a 95       	dec	r18
     14e:	f1 f7       	brne	.-4      	; 0x14c <dt_sendbit+0x8>
     150:	00 c0       	rjmp	.+0      	; 0x152 <dt_sendbit+0xe>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     152:	81 11       	cpse	r24, r1
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     154:	8f 98       	cbi	0x11, 7	; 17
     156:	e3 e0       	ldi	r30, 0x03	; 3
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <dt_sendbit+0x16>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <dt_sendbit+0x1c>
     160:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     162:	8f 98       	cbi	0x11, 7	; 17
	SREG = stektemp;// вернем значение стека
     164:	9f bf       	out	0x3f, r25	; 63
     166:	08 95       	ret

00000168 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     178:	ee 24       	eor	r14, r14
     17a:	e3 94       	inc	r14
     17c:	f1 2c       	mov	r15, r1
     17e:	08 2f       	mov	r16, r24
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	c7 01       	movw	r24, r14
     184:	0c 2e       	mov	r0, r28
     186:	02 c0       	rjmp	.+4      	; 0x18c <dt_sendbyte+0x24>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <dt_sendbyte+0x20>
     190:	98 01       	movw	r18, r16
     192:	28 23       	and	r18, r24
     194:	39 23       	and	r19, r25
     196:	82 17       	cp	r24, r18
     198:	93 07       	cpc	r25, r19
     19a:	11 f4       	brne	.+4      	; 0x1a0 <dt_sendbyte+0x38>
		dt_sendbit(1);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <dt_sendbyte+0x3a>
		else //посылаем 0
		dt_sendbit(0);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	d0 df       	rcall	.-96     	; 0x144 <dt_sendbit>
     1a4:	21 96       	adiw	r28, 0x01	; 1
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1a6:	c8 30       	cpi	r28, 0x08	; 8
     1a8:	d1 05       	cpc	r29, r1
     1aa:	59 f7       	brne	.-42     	; 0x182 <dt_sendbyte+0x1a>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	ff 90       	pop	r15
     1b6:	ef 90       	pop	r14
     1b8:	08 95       	ret

000001ba <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
     1ba:	cf 93       	push	r28
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     1bc:	7b df       	rcall	.-266    	; 0xb4 <dt_testdevice>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	d9 f4       	brne	.+54     	; 0x1f8 <dt_check+0x3e>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1c2:	8c ec       	ldi	r24, 0xCC	; 204
     1c4:	d1 df       	rcall	.-94     	; 0x168 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измер€ем температуру
     1c6:	84 e4       	ldi	r24, 0x44	; 68
     1c8:	cf df       	rcall	.-98     	; 0x168 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	2f ef       	ldi	r18, 0xFF	; 255
     1cc:	4d e2       	ldi	r20, 0x2D	; 45
     1ce:	59 e0       	ldi	r21, 0x09	; 9
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	50 40       	sbci	r21, 0x00	; 0
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <dt_check+0x16>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <dt_check+0x20>
     1da:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразовани€ Ч 188 милисекунд
   dt_testdevice(); //снова используем те же манипул€ции с шиной что и при проверке ее присутстви€
     1dc:	6b df       	rcall	.-298    	; 0xb4 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1de:	8c ec       	ldi	r24, 0xCC	; 204
     1e0:	c3 df       	rcall	.-122    	; 0x168 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     1e2:	8e eb       	ldi	r24, 0xBE	; 190
     1e4:	c1 df       	rcall	.-126    	; 0x168 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     1e6:	98 df       	rcall	.-208    	; 0x118 <dt_readbyte>
     1e8:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     1ea:	96 df       	rcall	.-212    	; 0x118 <dt_readbyte>
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     1ec:	2c 2f       	mov	r18, r28
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	a9 01       	movw	r20, r18
     1f2:	58 2b       	or	r21, r24
     1f4:	ca 01       	movw	r24, r20
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dt_check+0x42>
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     200:	dc df       	rcall	.-72     	; 0x1ba <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     202:	29 2f       	mov	r18, r25
     204:	25 95       	asr	r18
     206:	25 95       	asr	r18
     208:	25 95       	asr	r18
	{
		home_temp_own_fraction = tt & 0xF;
     20a:	38 2f       	mov	r19, r24
	int tt = 0;
	tt = dt_check();
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     20c:	61 f4       	brne	.+24     	; 0x226 <DS18b0_find_temp+0x26>
	{
		home_temp_own_fraction = tt & 0xF;
     20e:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     210:	23 2f       	mov	r18, r19
     212:	22 0f       	add	r18, r18
     214:	48 e0       	ldi	r20, 0x08	; 8
     216:	34 9f       	mul	r19, r20
     218:	20 0d       	add	r18, r0
     21a:	11 24       	eor	r1, r1
     21c:	22 95       	swap	r18
     21e:	2f 70       	andi	r18, 0x0F	; 15
     220:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <home_temp_own_fraction>
     224:	0e c0       	rjmp	.+28     	; 0x242 <DS18b0_find_temp+0x42>
		home_temp_own_integer = (tt&0x07FF)>>4;
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     226:	30 95       	com	r19
     228:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// Фмножаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     22a:	23 2f       	mov	r18, r19
     22c:	22 0f       	add	r18, r18
     22e:	48 e0       	ldi	r20, 0x08	; 8
     230:	34 9f       	mul	r19, r20
     232:	20 0d       	add	r18, r0
     234:	11 24       	eor	r1, r1
     236:	22 95       	swap	r18
     238:	2f 70       	andi	r18, 0x0F	; 15
     23a:	20 93 dc 00 	sts	0x00DC, r18	; 0x8000dc <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     23e:	80 95       	com	r24
     240:	90 95       	com	r25
     242:	97 70       	andi	r25, 0x07	; 7
     244:	24 e0       	ldi	r18, 0x04	; 4
     246:	95 95       	asr	r25
     248:	87 95       	ror	r24
     24a:	2a 95       	dec	r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <DS18b0_find_temp+0x46>
     24e:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <home_temp_own_integer>
     252:	08 95       	ret

00000254 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождени€ флага окончани€ последней операцией с пам€тью
     254:	e1 99       	sbic	0x1c, 1	; 28
     256:	fe cf       	rjmp	.-4      	; 0x254 <EEPROM_write>
	{}
	EEAR = uiAddress; //”станавливаем адрес
     258:	9f bb       	out	0x1f, r25	; 31
     25a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //ѕищем данные в регистр
     25c:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //–азрешаем запись
     25e:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //ѕишем байт в пам€ть
     260:	e1 9a       	sbi	0x1c, 1	; 28
     262:	08 95       	ret

00000264 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     264:	e1 99       	sbic	0x1c, 1	; 28
     266:	fe cf       	rjmp	.-4      	; 0x264 <EEPROM_read>
	{} //ждем освобождени€ флага окончани€ последней операцией с пам€тью
	EEAR = uiAddress; //”станавливаем адрес
     268:	9f bb       	out	0x1f, r25	; 31
     26a:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //«апускаем операцию считывани€ из пам€ти в регистр данных
     26c:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //¬озвращаем результат
     26e:	8d b3       	in	r24, 0x1d	; 29
}
     270:	08 95       	ret

00000272 <timer2_ini>:
char DATA_TO_UART[30] = {0};

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим —“— (сброс по совпадению)
     272:	85 b5       	in	r24, 0x25	; 37
     274:	88 60       	ori	r24, 0x08	; 8
     276:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     278:	89 b7       	in	r24, 0x39	; 57
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число дл€ сравнени€ 200
     27e:	88 ec       	ldi	r24, 0xC8	; 200
     280:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     282:	85 b5       	in	r24, 0x25	; 37
     284:	82 60       	ori	r24, 0x02	; 2
     286:	85 bd       	out	0x25, r24	; 37
     288:	08 95       	ret

0000028a <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	cf 93       	push	r28
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	if(OK_BUTTON_FLAG == 1)
     2ae:	c0 91 c2 00 	lds	r28, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     2b2:	c1 30       	cpi	r28, 0x01	; 1
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <__vector_3+0x2e>
     2b6:	5a c0       	rjmp	.+180    	; 0x36c <__vector_3+0xe2>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	28 c0       	rjmp	.+80     	; 0x30c <__vector_3+0x82>
     2bc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <UP_BUTTON_FLAG>
     2c0:	81 11       	cpse	r24, r1
     2c2:	24 c0       	rjmp	.+72     	; 0x30c <__vector_3+0x82>
		{
			temp_setpoint += 5;
     2c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <temp_setpoint>
     2c8:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <temp_setpoint+0x1>
     2cc:	05 96       	adiw	r24, 0x05	; 5
     2ce:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <temp_setpoint+0x1>
     2d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     2d6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <home_temp_rx_integer>
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	02 d8       	rcall	.-4092   	; 0xfffff2e4 <__eeprom_end+0xff7ef2e4>
     2e0:	3a e0       	ldi	r19, 0x0A	; 10
     2e2:	36 9f       	mul	r19, r22
     2e4:	a0 01       	movw	r20, r0
     2e6:	37 9f       	mul	r19, r23
     2e8:	50 0d       	add	r21, r0
     2ea:	11 24       	eor	r1, r1
     2ec:	ba 01       	movw	r22, r20
     2ee:	68 0f       	add	r22, r24
     2f0:	79 1f       	adc	r23, r25
     2f2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <home_temp_rx_fraction>
     2f6:	89 2f       	mov	r24, r25
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	3a e0       	ldi	r19, 0x0A	; 10
     2fc:	23 9f       	mul	r18, r19
     2fe:	80 0d       	add	r24, r0
     300:	91 1d       	adc	r25, r1
     302:	11 24       	eor	r1, r1
     304:	dd d5       	rcall	.+3002   	; 0xec0 <PrintTemp_MAX7219>
			UP_BUTTON_FLAG = 1;
     306:	c0 93 c1 00 	sts	0x00C1, r28	; 0x8000c1 <UP_BUTTON_FLAG>
     30a:	2a c0       	rjmp	.+84     	; 0x360 <__vector_3+0xd6>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     30c:	9b 99       	sbic	0x13, 3	; 19
     30e:	28 c0       	rjmp	.+80     	; 0x360 <__vector_3+0xd6>
     310:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <DOWN_BUTTON_FLAG>
     314:	81 11       	cpse	r24, r1
     316:	24 c0       	rjmp	.+72     	; 0x360 <__vector_3+0xd6>
		{
			temp_setpoint -= 5;
     318:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <temp_setpoint>
     31c:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <temp_setpoint+0x1>
     320:	05 97       	sbiw	r24, 0x05	; 5
     322:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <temp_setpoint+0x1>
     326:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     32a:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <home_temp_rx_integer>
     32e:	6a e0       	ldi	r22, 0x0A	; 10
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	d8 d7       	rcall	.+4016   	; 0x12e4 <__udivmodhi4>
     334:	3a e0       	ldi	r19, 0x0A	; 10
     336:	36 9f       	mul	r19, r22
     338:	a0 01       	movw	r20, r0
     33a:	37 9f       	mul	r19, r23
     33c:	50 0d       	add	r21, r0
     33e:	11 24       	eor	r1, r1
     340:	ba 01       	movw	r22, r20
     342:	68 0f       	add	r22, r24
     344:	79 1f       	adc	r23, r25
     346:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <home_temp_rx_fraction>
     34a:	89 2f       	mov	r24, r25
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	3a e0       	ldi	r19, 0x0A	; 10
     350:	23 9f       	mul	r18, r19
     352:	80 0d       	add	r24, r0
     354:	91 1d       	adc	r25, r1
     356:	11 24       	eor	r1, r1
     358:	b3 d5       	rcall	.+2918   	; 0xec0 <PrintTemp_MAX7219>
			DOWN_BUTTON_FLAG = 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <DOWN_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     360:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     362:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     366:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     368:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <DOWN_BUTTON_FLAG>
		}
	}
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	cf 91       	pop	r28
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
     390:	8e b5       	in	r24, 0x2e	; 46
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     396:	89 b7       	in	r24, 0x39	; 57
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число дл€ сравнени€ 2000
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     3a0:	80 ed       	ldi	r24, 0xD0	; 208
     3a2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     3a4:	8e b5       	in	r24, 0x2e	; 46
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8e bd       	out	0x2e, r24	; 46
     3aa:	08 95       	ret

000003ac <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
     3ba:	af 93       	push	r26
     3bc:	bf 93       	push	r27
	millis++;
     3be:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     3c2:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     3c6:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis+0x2>
     3ca:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis+0x3>
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	a1 1d       	adc	r26, r1
     3d2:	b1 1d       	adc	r27, r1
     3d4:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <millis>
     3d8:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <millis+0x1>
     3dc:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <millis+0x2>
     3e0:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <millis+0x3>
		//отправл€ем в Ѕƒ данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
		USART_Transmit(DATA_TO_UART);
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
	}*/
}
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	8f 93       	push	r24
	interrupt_1_flag = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <interrupt_1_flag>
	else 
	{
		temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
		OK_BUTTON_FLAG = 1;
	}*/
}
     408:	8f 91       	pop	r24
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <SPI_init>:
SPI_init(void) //инициализаци€ SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     414:	87 b3       	in	r24, 0x17	; 23
     416:	8e 62       	ori	r24, 0x2E	; 46
     418:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     41a:	88 b3       	in	r24, 0x18	; 24
     41c:	83 7d       	andi	r24, 0xD3	; 211
     41e:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     420:	c2 9a       	sbi	0x18, 2	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ§вим ведущим
     422:	8d b1       	in	r24, 0x0d	; 13
     424:	80 65       	ori	r24, 0x50	; 80
     426:	8d b9       	out	0x0d, r24	; 13
}
     428:	08 95       	ret

0000042a <port_init>:
port_init(void)
{
	//инициализаци€ ножки IRQ дл€ внеш прерывани€
	DDRD &= ~(1<<IRQ);
     42a:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<IRQ);
     42c:	92 9a       	sbi	0x12, 2	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     42e:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<LED_TX);
     430:	96 98       	cbi	0x12, 6	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     432:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1<<LED_RX);
     434:	95 98       	cbi	0x12, 5	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     436:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     438:	94 98       	cbi	0x12, 4	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     43a:	a1 9a       	sbi	0x14, 1	; 20
	PORTC &= ~(1<<LED_WIFI);
     43c:	a9 98       	cbi	0x15, 1	; 21
	//инициализаци€ мосфета
	DDRB |= (1<<MOSFET);
     43e:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<MOSFET);
     440:	c0 98       	cbi	0x18, 0	; 24
	//инициализаци€ индикатора
	DDRC |= (1<<MAX7219_SS);
     442:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<MAX7219_SS);
     444:	a8 9a       	sbi	0x15, 0	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     446:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<BUTTON_OK);
     448:	93 9a       	sbi	0x12, 3	; 18
	DDRC &= ~(1<<BUTTON_UP);
     44a:	a2 98       	cbi	0x14, 2	; 20
	PORTC |= (1<<BUTTON_UP);
     44c:	aa 9a       	sbi	0x15, 2	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     44e:	a3 98       	cbi	0x14, 3	; 20
	PORTC |= (1<<BUTTON_DOWN);
     450:	ab 9a       	sbi	0x15, 3	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     452:	8f 98       	cbi	0x11, 7	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     454:	97 98       	cbi	0x12, 7	; 18
}
     456:	08 95       	ret

00000458 <__vector_11>:
//обработчик прерывани€ по UART
uint16_t uart_rx_count = 0;
char uart_rx_buffer[50];
ISR(USART_RXC_vect)
{
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	2f 93       	push	r18
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
	uart_rx_buffer[uart_rx_count] = UDR;
     46c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     470:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
     474:	2c b1       	in	r18, 0x0c	; 12
     476:	fc 01       	movw	r30, r24
     478:	e9 50       	subi	r30, 0x09	; 9
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     47e:	2f 32       	cpi	r18, 0x2F	; 47
     480:	21 f4       	brne	.+8      	; 0x48a <__stack+0x2b>
	{
		uart_ready_flag = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <uart_ready_flag>
     488:	05 c0       	rjmp	.+10     	; 0x494 <__stack+0x35>
	}
	else
	{
		uart_rx_count++;
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
     490:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
	}
}
     494:	ff 91       	pop	r31
     496:	ef 91       	pop	r30
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	2f 91       	pop	r18
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // ѕередаЄт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     4a8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     4aa:	77 9b       	sbis	0x0e, 7	; 14
     4ac:	fe cf       	rjmp	.-4      	; 0x4aa <spi_send_recv+0x2>
	return SPDR;
     4ae:	8f b1       	in	r24, 0x0f	; 15
}
     4b0:	08 95       	ret

000004b2 <main>:
void main(void)
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	c6 54       	subi	r28, 0x46	; 70
     4bc:	d1 09       	sbc	r29, r1
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	33 ed       	ldi	r19, 0xD3	; 211
     4cc:	40 e3       	ldi	r20, 0x30	; 48
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	30 40       	sbci	r19, 0x00	; 0
     4d2:	40 40       	sbci	r20, 0x00	; 0
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <main+0x1c>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0x26>
     4d8:	00 00       	nop
	_delay_ms(1000);
	port_init();
     4da:	a7 df       	rcall	.-178    	; 0x42a <port_init>
	PORTD |= (1<<LED_TX);
     4dc:	96 9a       	sbi	0x12, 6	; 18
	PORTD |= (1<<LED_RX);
     4de:	95 9a       	sbi	0x12, 5	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     4e0:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<LED_WIFI);
     4e2:	a9 9a       	sbi	0x15, 1	; 21
	SPI_init();
     4e4:	97 df       	rcall	.-210    	; 0x414 <SPI_init>
	USART_Init(16);    //»нициализаци€ модул€ USART скорость 115200	
     4e6:	80 e1       	ldi	r24, 0x10	; 16
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	da d6       	rcall	.+3508   	; 0x12a0 <USART_Init>
    NRF24_ini();
     4ec:	5e d6       	rcall	.+3260   	; 0x11aa <NRF24_ini>
     4ee:	6f ef       	ldi	r22, 0xFF	; 255
     4f0:	71 ee       	ldi	r23, 0xE1	; 225
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	61 50       	subi	r22, 0x01	; 1
     4f6:	70 40       	sbci	r23, 0x00	; 0
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x42>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x4c>
     4fe:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     500:	86 d4       	rcall	.+2316   	; 0xe0e <MAX7219_init>
     502:	9f ef       	ldi	r25, 0xFF	; 255
     504:	e3 ed       	ldi	r30, 0xD3	; 211
     506:	f0 e3       	ldi	r31, 0x30	; 48
     508:	91 50       	subi	r25, 0x01	; 1
     50a:	e0 40       	sbci	r30, 0x00	; 0
     50c:	f0 40       	sbci	r31, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x56>
     510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x60>
     512:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывани€
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     514:	85 b7       	in	r24, 0x35	; 53
     516:	8a 60       	ori	r24, 0x0A	; 10
     518:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     51a:	8b b7       	in	r24, 0x3b	; 59
     51c:	80 6c       	ori	r24, 0xC0	; 192
     51e:	8b bf       	out	0x3b, r24	; 59
     520:	2f ef       	ldi	r18, 0xFF	; 255
     522:	37 ea       	ldi	r19, 0xA7	; 167
     524:	41 e6       	ldi	r20, 0x61	; 97
     526:	21 50       	subi	r18, 0x01	; 1
     528:	30 40       	sbci	r19, 0x00	; 0
     52a:	40 40       	sbci	r20, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <main+0x74>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x7e>
     530:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     532:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~(1<<LED_RX);
     534:	95 98       	cbi	0x12, 5	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     536:	94 98       	cbi	0x12, 4	; 18
	PORTC &= ~(1<<LED_WIFI);
     538:	a9 98       	cbi	0x15, 1	; 21
	timer1_ini();
     53a:	2a df       	rcall	.-428    	; 0x390 <timer1_ini>
	timer2_ini();
     53c:	9a de       	rcall	.-716    	; 0x272 <timer2_ini>
	gas_boiler_controller();
     53e:	8f dd       	rcall	.-1250   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     540:	81 b5       	in	r24, 0x21	; 33
     542:	87 7f       	andi	r24, 0xF7	; 247
     544:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     546:	9f e0       	ldi	r25, 0x0F	; 15
     548:	88 e1       	ldi	r24, 0x18	; 24
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	a8 95       	wdr
     550:	81 bd       	out	0x21, r24	; 33
     552:	0f be       	out	0x3f, r0	; 63
     554:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     556:	47 9a       	sbi	0x08, 7	; 8
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	7d e3       	ldi	r23, 0x3D	; 61
     55c:	89 e4       	ldi	r24, 0x49	; 73
     55e:	61 50       	subi	r22, 0x01	; 1
     560:	70 40       	sbci	r23, 0x00	; 0
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <main+0xac>
     566:	00 c0       	rjmp	.+0      	; 0x568 <main+0xb6>
     568:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     56a:	a8 95       	wdr
     56c:	9f ef       	ldi	r25, 0xFF	; 255
     56e:	ed e3       	ldi	r30, 0x3D	; 61
     570:	f9 e4       	ldi	r31, 0x49	; 73
     572:	91 50       	subi	r25, 0x01	; 1
     574:	e0 40       	sbci	r30, 0x00	; 0
     576:	f0 40       	sbci	r31, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <main+0xc0>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0xca>
     57c:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     57e:	a8 95       	wdr
	3-температура цела€
	4-температура дробь
	5-статус котла
	6-режим работы
	*/
	if(EEPROM_read(1) > 100) EEPROM_write(1,20);
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	6f de       	rcall	.-802    	; 0x264 <EEPROM_read>
     586:	85 36       	cpi	r24, 0x65	; 101
     588:	20 f0       	brcs	.+8      	; 0x592 <main+0xe0>
     58a:	64 e1       	ldi	r22, 0x14	; 20
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	61 de       	rcall	.-830    	; 0x254 <EEPROM_write>
	if(EEPROM_read(2) > 100) EEPROM_write(2,0);
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	66 de       	rcall	.-820    	; 0x264 <EEPROM_read>
     598:	85 36       	cpi	r24, 0x65	; 101
     59a:	20 f0       	brcs	.+8      	; 0x5a4 <main+0xf2>
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	58 de       	rcall	.-848    	; 0x254 <EEPROM_write>
	if(EEPROM_read(3) > 100) EEPROM_write(3,20);
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	5d de       	rcall	.-838    	; 0x264 <EEPROM_read>
     5aa:	85 36       	cpi	r24, 0x65	; 101
     5ac:	20 f0       	brcs	.+8      	; 0x5b6 <main+0x104>
     5ae:	64 e1       	ldi	r22, 0x14	; 20
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	4f de       	rcall	.-866    	; 0x254 <EEPROM_write>
	if(EEPROM_read(4) > 100) EEPROM_write(4,0);
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	54 de       	rcall	.-856    	; 0x264 <EEPROM_read>
     5bc:	85 36       	cpi	r24, 0x65	; 101
     5be:	20 f0       	brcs	.+8      	; 0x5c8 <main+0x116>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	46 de       	rcall	.-884    	; 0x254 <EEPROM_write>
	if(EEPROM_read(5) > 100) EEPROM_write(5,0);
     5c8:	85 e0       	ldi	r24, 0x05	; 5
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	4b de       	rcall	.-874    	; 0x264 <EEPROM_read>
     5ce:	85 36       	cpi	r24, 0x65	; 101
     5d0:	20 f0       	brcs	.+8      	; 0x5da <main+0x128>
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	3d de       	rcall	.-902    	; 0x254 <EEPROM_write>
	if(EEPROM_read(6) > 100) EEPROM_write(6,0);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	42 de       	rcall	.-892    	; 0x264 <EEPROM_read>
     5e0:	85 36       	cpi	r24, 0x65	; 101
     5e2:	20 f0       	brcs	.+8      	; 0x5ec <main+0x13a>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	34 de       	rcall	.-920    	; 0x254 <EEPROM_write>
	temp_setpoint_integer = EEPROM_read(1);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	39 de       	rcall	.-910    	; 0x264 <EEPROM_read>
     5f2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <temp_setpoint_integer>
	temp_setpoint_fraction = EEPROM_read(2);
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	34 de       	rcall	.-920    	; 0x264 <EEPROM_read>
     5fc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <temp_setpoint_fraction>
	home_temp_rx_integer = EEPROM_read(3);
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	2f de       	rcall	.-930    	; 0x264 <EEPROM_read>
     606:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <home_temp_rx_integer>
	home_temp_rx_fraction = EEPROM_read(4);
     60a:	84 e0       	ldi	r24, 0x04	; 4
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	2a de       	rcall	.-940    	; 0x264 <EEPROM_read>
     610:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <home_temp_rx_fraction>
	gas_boiler_enable_flag = EEPROM_read(5);
     614:	85 e0       	ldi	r24, 0x05	; 5
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	25 de       	rcall	.-950    	; 0x264 <EEPROM_read>
     61a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <gas_boiler_enable_flag>
	work_mode = EEPROM_read(6);
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	20 de       	rcall	.-960    	; 0x264 <EEPROM_read>
     624:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <work_mode>

	gas_boiler_controller();
     628:	1a dd       	rcall	.-1484   	; 0x5e <gas_boiler_controller>
	//отправл€ем в Ѕƒ первичные данные после включени€
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     62a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <work_mode>
     62e:	1f 92       	push	r1
     630:	8f 93       	push	r24
     632:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <temp_setpoint_integer>
     63e:	1f 92       	push	r1
     640:	8f 93       	push	r24
     642:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <home_temp_rx_fraction>
     646:	1f 92       	push	r1
     648:	8f 93       	push	r24
     64a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <home_temp_rx_integer>
     64e:	1f 92       	push	r1
     650:	8f 93       	push	r24
     652:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     656:	1f 92       	push	r1
     658:	8f 93       	push	r24
     65a:	86 e6       	ldi	r24, 0x66	; 102
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	02 ea       	ldi	r16, 0xA2	; 162
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	1f 93       	push	r17
     668:	0f 93       	push	r16
     66a:	d3 d7       	rcall	.+4006   	; 0x1612 <sprintf>
	USART_Transmit(DATA_TO_UART);
     66c:	c8 01       	movw	r24, r16
     66e:	23 d6       	rcall	.+3142   	; 0x12b6 <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     670:	f8 01       	movw	r30, r16
     672:	01 90       	ld	r0, Z+
     674:	00 20       	and	r0, r0
     676:	e9 f7       	brne	.-6      	; 0x672 <main+0x1c0>
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	af 01       	movw	r20, r30
     67c:	42 5a       	subi	r20, 0xA2	; 162
     67e:	50 40       	sbci	r21, 0x00	; 0
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	c8 01       	movw	r24, r16
     686:	99 d7       	rcall	.+3890   	; 0x15ba <memset>
	sei();
     688:	78 94       	sei
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
				break;
				case 110:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
				{
					gas_boiler_enable_flag = 0;
					work_mode = 1;
     694:	55 24       	eor	r5, r5
     696:	53 94       	inc	r5
		if (interrupt_1_flag == 1)
		{
			if (OK_BUTTON_FLAG == 1) 
			{
				OK_BUTTON_FLAG = 0;
				temp_setpoint_integer = temp_setpoint/10;
     698:	9a e0       	ldi	r25, 0x0A	; 10
     69a:	89 2e       	mov	r8, r25
     69c:	91 2c       	mov	r9, r1
				temp_setpoint_fraction = temp_setpoint%10;
				EEPROM_write(1, temp_setpoint_integer);
				EEPROM_write(2, temp_setpoint_fraction);
				gas_boiler_controller();
				//отправл€ем в Ѕƒ данные с новой инфо
				sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     69e:	26 e6       	ldi	r18, 0x66	; 102
     6a0:	c2 2e       	mov	r12, r18
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	d2 2e       	mov	r13, r18
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
			{
				buf1[0] += 100;
			}
			buf1[1] = temp_setpoint_integer;
     6a6:	31 ee       	ldi	r19, 0xE1	; 225
     6a8:	63 2e       	mov	r6, r19
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	73 2e       	mov	r7, r19
		}
		//если пришли данные по uart
		if (uart_ready_flag == 1)
		{
			char uart_message[50];
			memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     6ae:	47 ef       	ldi	r20, 0xF7	; 247
     6b0:	a4 2e       	mov	r10, r20
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	b4 2e       	mov	r11, r20
				else if (strstr(uart_message,"MANU")!=0)
				{
					work_mode_from_BD = 1;
				}
				//считывание уставки
				char data[20] = {};
     6b6:	54 e1       	ldi	r21, 0x14	; 20
     6b8:	45 2e       	mov	r4, r21
     6ba:	7e 01       	movw	r14, r28
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	e3 0e       	add	r14, r19
     6c0:	f1 1c       	adc	r15, r1
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
	sei();
	while (1) 
    {
		//если пришли данные от управл€ющего устройства
		if (rx_flag == 1)
     6c2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <rx_flag>
     6c6:	91 30       	cpi	r25, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0x21a>
     6ca:	37 c1       	rjmp	.+622    	; 0x93a <main+0x488>
		{
			PORTD |= (1<<LED_RX);
     6cc:	95 9a       	sbi	0x12, 5	; 18
     6ce:	4f ef       	ldi	r20, 0xFF	; 255
     6d0:	61 ee       	ldi	r22, 0xE1	; 225
     6d2:	74 e0       	ldi	r23, 0x04	; 4
     6d4:	41 50       	subi	r20, 0x01	; 1
     6d6:	60 40       	sbci	r22, 0x00	; 0
     6d8:	70 40       	sbci	r23, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0x222>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x22c>
     6de:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~(1<<LED_RX);
     6e0:	95 98       	cbi	0x12, 5	; 18
			millis_hometemp_update = millis;
     6e2:	40 91 d3 00 	lds	r20, 0x00D3	; 0x8000d3 <millis>
     6e6:	50 91 d4 00 	lds	r21, 0x00D4	; 0x8000d4 <millis+0x1>
     6ea:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <millis+0x2>
     6ee:	70 91 d6 00 	lds	r23, 0x00D6	; 0x8000d6 <millis+0x3>
     6f2:	40 93 cf 00 	sts	0x00CF, r20	; 0x8000cf <millis_hometemp_update>
     6f6:	50 93 d0 00 	sts	0x00D0, r21	; 0x8000d0 <millis_hometemp_update+0x1>
     6fa:	60 93 d1 00 	sts	0x00D1, r22	; 0x8000d1 <millis_hometemp_update+0x2>
     6fe:	70 93 d2 00 	sts	0x00D2, r23	; 0x8000d2 <millis_hometemp_update+0x3>
			
			gas_boiler_enable_flag = RX_BUF[0];
     702:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <RX_BUF>
     706:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <gas_boiler_enable_flag>
			switch (gas_boiler_enable_flag)
     70a:	8b 30       	cpi	r24, 0x0B	; 11
     70c:	09 f4       	brne	.+2      	; 0x710 <main+0x25e>
     70e:	57 c0       	rjmp	.+174    	; 0x7be <main+0x30c>
     710:	30 f4       	brcc	.+12     	; 0x71e <main+0x26c>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	99 f0       	breq	.+38     	; 0x73c <main+0x28a>
     716:	90 f0       	brcs	.+36     	; 0x73c <main+0x28a>
     718:	8a 30       	cpi	r24, 0x0A	; 10
     71a:	91 f1       	breq	.+100    	; 0x780 <main+0x2ce>
     71c:	0c c1       	rjmp	.+536    	; 0x936 <main+0x484>
     71e:	85 36       	cpi	r24, 0x65	; 101
     720:	09 f4       	brne	.+2      	; 0x724 <main+0x272>
     722:	89 c0       	rjmp	.+274    	; 0x836 <main+0x384>
     724:	20 f4       	brcc	.+8      	; 0x72e <main+0x27c>
     726:	84 36       	cpi	r24, 0x64	; 100
     728:	09 f4       	brne	.+2      	; 0x72c <main+0x27a>
     72a:	68 c0       	rjmp	.+208    	; 0x7fc <main+0x34a>
     72c:	04 c1       	rjmp	.+520    	; 0x936 <main+0x484>
     72e:	8e 36       	cpi	r24, 0x6E	; 110
     730:	09 f4       	brne	.+2      	; 0x734 <main+0x282>
     732:	a2 c0       	rjmp	.+324    	; 0x878 <main+0x3c6>
     734:	8f 36       	cpi	r24, 0x6F	; 111
     736:	09 f4       	brne	.+2      	; 0x73a <main+0x288>
     738:	c2 c0       	rjmp	.+388    	; 0x8be <main+0x40c>
     73a:	fd c0       	rjmp	.+506    	; 0x936 <main+0x484>
					EEPROM_write(4, home_temp_rx_fraction);
					EEPROM_write(6, work_mode);
				}
				break;
				case 1:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     73c:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     740:	63 33       	cpi	r22, 0x33	; 51
     742:	08 f0       	brcs	.+2      	; 0x746 <main+0x294>
     744:	f8 c0       	rjmp	.+496    	; 0x936 <main+0x484>
     746:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     74a:	8a 30       	cpi	r24, 0x0A	; 10
     74c:	08 f0       	brcs	.+2      	; 0x750 <main+0x29e>
     74e:	f3 c0       	rjmp	.+486    	; 0x936 <main+0x484>
     750:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     754:	93 33       	cpi	r25, 0x33	; 51
     756:	08 f0       	brcs	.+2      	; 0x75a <main+0x2a8>
     758:	ee c0       	rjmp	.+476    	; 0x936 <main+0x484>
     75a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     75e:	9a 30       	cpi	r25, 0x0A	; 10
     760:	08 f0       	brcs	.+2      	; 0x764 <main+0x2b2>
     762:	e9 c0       	rjmp	.+466    	; 0x936 <main+0x484>
				{
					work_mode = 0;
     764:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     768:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     76c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <home_temp_rx_fraction>
					EEPROM_write(3, home_temp_rx_integer);
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	6f dd       	rcall	.-1314   	; 0x254 <EEPROM_write>
					EEPROM_write(4, home_temp_rx_fraction);
     776:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <home_temp_rx_fraction>
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	d5 c0       	rjmp	.+426    	; 0x92a <main+0x478>
					EEPROM_write(6, work_mode);
				}
				break;
				case 10:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     780:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     784:	93 33       	cpi	r25, 0x33	; 51
     786:	08 f0       	brcs	.+2      	; 0x78a <main+0x2d8>
     788:	d6 c0       	rjmp	.+428    	; 0x936 <main+0x484>
     78a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     78e:	8a 30       	cpi	r24, 0x0A	; 10
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x2e2>
     792:	d1 c0       	rjmp	.+418    	; 0x936 <main+0x484>
     794:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     798:	23 33       	cpi	r18, 0x33	; 51
     79a:	08 f0       	brcs	.+2      	; 0x79e <main+0x2ec>
     79c:	cc c0       	rjmp	.+408    	; 0x936 <main+0x484>
     79e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     7a2:	2a 30       	cpi	r18, 0x0A	; 10
     7a4:	08 f0       	brcs	.+2      	; 0x7a8 <main+0x2f6>
     7a6:	c7 c0       	rjmp	.+398    	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 0;
     7a8:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 1;
     7ac:	50 92 d7 00 	sts	0x00D7, r5	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     7b0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     7b4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <home_temp_rx_fraction>
					PORTB |= (1<<MOSFET);
     7b8:	c0 9a       	sbi	0x18, 0	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
     7ba:	94 98       	cbi	0x12, 4	; 18
     7bc:	a8 c0       	rjmp	.+336    	; 0x90e <main+0x45c>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 11:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     7be:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     7c2:	23 33       	cpi	r18, 0x33	; 51
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <main+0x316>
     7c6:	b7 c0       	rjmp	.+366    	; 0x936 <main+0x484>
     7c8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     7cc:	8a 30       	cpi	r24, 0x0A	; 10
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <main+0x320>
     7d0:	b2 c0       	rjmp	.+356    	; 0x936 <main+0x484>
     7d2:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     7d6:	33 33       	cpi	r19, 0x33	; 51
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <main+0x32a>
     7da:	ad c0       	rjmp	.+346    	; 0x936 <main+0x484>
     7dc:	30 91 ee 00 	lds	r19, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     7e0:	3a 30       	cpi	r19, 0x0A	; 10
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <main+0x334>
     7e4:	a8 c0       	rjmp	.+336    	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 1;
     7e6:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 1;
     7ea:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     7ee:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     7f2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <home_temp_rx_fraction>
					PORTB &= ~(1<<MOSFET);
     7f6:	c0 98       	cbi	0x18, 0	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
     7f8:	94 9a       	sbi	0x12, 4	; 18
     7fa:	89 c0       	rjmp	.+274    	; 0x90e <main+0x45c>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 100:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     7fc:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     800:	23 33       	cpi	r18, 0x33	; 51
     802:	08 f0       	brcs	.+2      	; 0x806 <main+0x354>
     804:	98 c0       	rjmp	.+304    	; 0x936 <main+0x484>
     806:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     80a:	9a 30       	cpi	r25, 0x0A	; 10
     80c:	08 f0       	brcs	.+2      	; 0x810 <main+0x35e>
     80e:	93 c0       	rjmp	.+294    	; 0x936 <main+0x484>
     810:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     814:	63 33       	cpi	r22, 0x33	; 51
     816:	08 f0       	brcs	.+2      	; 0x81a <main+0x368>
     818:	8e c0       	rjmp	.+284    	; 0x936 <main+0x484>
     81a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     81e:	8a 30       	cpi	r24, 0x0A	; 10
     820:	08 f0       	brcs	.+2      	; 0x824 <main+0x372>
     822:	89 c0       	rjmp	.+274    	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 0;
     824:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 0;
     828:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     82c:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     830:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <home_temp_rx_fraction>
     834:	1c c0       	rjmp	.+56     	; 0x86e <main+0x3bc>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 101:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     836:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     83a:	33 33       	cpi	r19, 0x33	; 51
     83c:	08 f0       	brcs	.+2      	; 0x840 <main+0x38e>
     83e:	7b c0       	rjmp	.+246    	; 0x936 <main+0x484>
     840:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     844:	2a 30       	cpi	r18, 0x0A	; 10
     846:	08 f0       	brcs	.+2      	; 0x84a <main+0x398>
     848:	76 c0       	rjmp	.+236    	; 0x936 <main+0x484>
     84a:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     84e:	63 33       	cpi	r22, 0x33	; 51
     850:	08 f0       	brcs	.+2      	; 0x854 <main+0x3a2>
     852:	71 c0       	rjmp	.+226    	; 0x936 <main+0x484>
     854:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     858:	8a 30       	cpi	r24, 0x0A	; 10
     85a:	08 f0       	brcs	.+2      	; 0x85e <main+0x3ac>
     85c:	6c c0       	rjmp	.+216    	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 1;
     85e:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 0;
     862:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     866:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     86a:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     86e:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     872:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <temp_setpoint_fraction>
     876:	43 c0       	rjmp	.+134    	; 0x8fe <main+0x44c>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 110:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     878:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     87c:	33 33       	cpi	r19, 0x33	; 51
     87e:	08 f0       	brcs	.+2      	; 0x882 <main+0x3d0>
     880:	5a c0       	rjmp	.+180    	; 0x936 <main+0x484>
     882:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     886:	2a 30       	cpi	r18, 0x0A	; 10
     888:	08 f0       	brcs	.+2      	; 0x88c <main+0x3da>
     88a:	55 c0       	rjmp	.+170    	; 0x936 <main+0x484>
     88c:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     890:	93 33       	cpi	r25, 0x33	; 51
     892:	08 f0       	brcs	.+2      	; 0x896 <main+0x3e4>
     894:	50 c0       	rjmp	.+160    	; 0x936 <main+0x484>
     896:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     89a:	8a 30       	cpi	r24, 0x0A	; 10
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <main+0x3ee>
     89e:	4b c0       	rjmp	.+150    	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 0;
     8a0:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 1;
     8a4:	50 92 d7 00 	sts	0x00D7, r5	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     8a8:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     8ac:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     8b0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     8b4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <temp_setpoint_fraction>
					PORTB |= (1<<MOSFET);
     8b8:	c0 9a       	sbi	0x18, 0	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
     8ba:	94 98       	cbi	0x12, 4	; 18
     8bc:	1e c0       	rjmp	.+60     	; 0x8fa <main+0x448>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 111:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     8be:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <RX_BUF+0x3>
     8c2:	33 33       	cpi	r19, 0x33	; 51
     8c4:	c0 f5       	brcc	.+112    	; 0x936 <main+0x484>
     8c6:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <RX_BUF+0x4>
     8ca:	2a 30       	cpi	r18, 0x0A	; 10
     8cc:	a0 f5       	brcc	.+104    	; 0x936 <main+0x484>
     8ce:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     8d2:	93 33       	cpi	r25, 0x33	; 51
     8d4:	80 f5       	brcc	.+96     	; 0x936 <main+0x484>
     8d6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     8da:	8a 30       	cpi	r24, 0x0A	; 10
     8dc:	60 f5       	brcc	.+88     	; 0x936 <main+0x484>
				{
					gas_boiler_enable_flag = 1;
     8de:	50 92 de 00 	sts	0x00DE, r5	; 0x8000de <gas_boiler_enable_flag>
					work_mode = 1;
     8e2:	50 92 d7 00 	sts	0x00D7, r5	; 0x8000d7 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     8e6:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     8ea:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     8ee:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     8f2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <temp_setpoint_fraction>
					PORTB &= ~(1<<MOSFET);
     8f6:	c0 98       	cbi	0x18, 0	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
     8f8:	94 9a       	sbi	0x12, 4	; 18
					EEPROM_write(1, temp_setpoint_integer);
     8fa:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <temp_setpoint_integer>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	a8 dc       	rcall	.-1712   	; 0x254 <EEPROM_write>
					EEPROM_write(2, temp_setpoint_fraction);
     904:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <temp_setpoint_fraction>
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a3 dc       	rcall	.-1722   	; 0x254 <EEPROM_write>
					EEPROM_write(3, home_temp_rx_integer);
     90e:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <home_temp_rx_integer>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9e dc       	rcall	.-1732   	; 0x254 <EEPROM_write>
					EEPROM_write(4, home_temp_rx_fraction);
     918:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <home_temp_rx_fraction>
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	99 dc       	rcall	.-1742   	; 0x254 <EEPROM_write>
					EEPROM_write(5, gas_boiler_enable_flag);
     922:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     926:	85 e0       	ldi	r24, 0x05	; 5
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	94 dc       	rcall	.-1752   	; 0x254 <EEPROM_write>
					EEPROM_write(6, work_mode);
     92c:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <work_mode>
     930:	86 e0       	ldi	r24, 0x06	; 6
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	8f dc       	rcall	.-1762   	; 0x254 <EEPROM_write>
				}
				break;
			}
			rx_flag = 0;
     936:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <rx_flag>
		}
		if (interrupt_1_flag == 1)
     93a:	20 91 df 00 	lds	r18, 0x00DF	; 0x8000df <interrupt_1_flag>
     93e:	21 30       	cpi	r18, 0x01	; 1
     940:	09 f0       	breq	.+2      	; 0x944 <main+0x492>
     942:	5f c0       	rjmp	.+190    	; 0xa02 <main+0x550>
		{
			if (OK_BUTTON_FLAG == 1) 
     944:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	09 f0       	breq	.+2      	; 0x94e <main+0x49c>
     94c:	48 c0       	rjmp	.+144    	; 0x9de <main+0x52c>
			{
				OK_BUTTON_FLAG = 0;
     94e:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <OK_BUTTON_FLAG>
				temp_setpoint_integer = temp_setpoint/10;
     952:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <temp_setpoint>
     956:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <temp_setpoint+0x1>
     95a:	b4 01       	movw	r22, r8
     95c:	c3 d4       	rcall	.+2438   	; 0x12e4 <__udivmodhi4>
     95e:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <temp_setpoint_integer>
				temp_setpoint_fraction = temp_setpoint%10;
     962:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <temp_setpoint_fraction>
				EEPROM_write(1, temp_setpoint_integer);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	74 dc       	rcall	.-1816   	; 0x254 <EEPROM_write>
				EEPROM_write(2, temp_setpoint_fraction);
     96c:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <temp_setpoint_fraction>
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	6f dc       	rcall	.-1826   	; 0x254 <EEPROM_write>
				gas_boiler_controller();
     976:	73 db       	rcall	.-2330   	; 0x5e <gas_boiler_controller>
				//отправл€ем в Ѕƒ данные с новой инфо
				sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     978:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <work_mode>
     97c:	1f 92       	push	r1
     97e:	8f 93       	push	r24
     980:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
     984:	1f 92       	push	r1
     986:	8f 93       	push	r24
     988:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <temp_setpoint_integer>
     98c:	1f 92       	push	r1
     98e:	8f 93       	push	r24
     990:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <home_temp_rx_fraction>
     994:	1f 92       	push	r1
     996:	8f 93       	push	r24
     998:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <home_temp_rx_integer>
     99c:	1f 92       	push	r1
     99e:	8f 93       	push	r24
     9a0:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     9a4:	1f 92       	push	r1
     9a6:	8f 93       	push	r24
     9a8:	df 92       	push	r13
     9aa:	cf 92       	push	r12
     9ac:	1f 93       	push	r17
     9ae:	0f 93       	push	r16
     9b0:	30 d6       	rcall	.+3168   	; 0x1612 <sprintf>
				USART_Transmit(DATA_TO_UART);
     9b2:	82 ea       	ldi	r24, 0xA2	; 162
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	7f d4       	rcall	.+2302   	; 0x12b6 <USART_Transmit>
				memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     9b8:	f8 01       	movw	r30, r16
     9ba:	01 90       	ld	r0, Z+
     9bc:	00 20       	and	r0, r0
     9be:	e9 f7       	brne	.-6      	; 0x9ba <main+0x508>
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	af 01       	movw	r20, r30
     9c4:	42 5a       	subi	r20, 0xA2	; 162
     9c6:	50 40       	sbci	r21, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	82 ea       	ldi	r24, 0xA2	; 162
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	f4 d5       	rcall	.+3048   	; 0x15ba <memset>
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	10 c0       	rjmp	.+32     	; 0x9fe <main+0x54c>
			}
			else 
			{
				temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     9de:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <temp_setpoint_integer>
     9e2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	ea e0       	ldi	r30, 0x0A	; 10
     9ea:	3e 9f       	mul	r19, r30
     9ec:	80 0d       	add	r24, r0
     9ee:	91 1d       	adc	r25, r1
     9f0:	11 24       	eor	r1, r1
     9f2:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <temp_setpoint+0x1>
     9f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <temp_setpoint>
				OK_BUTTON_FLAG = 1;
     9fa:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <OK_BUTTON_FLAG>
			}
			interrupt_1_flag = 0;
     9fe:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <interrupt_1_flag>
		}
		//если нет св€зи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     a02:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <millis>
     a06:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <millis+0x1>
     a0a:	40 91 d5 00 	lds	r20, 0x00D5	; 0x8000d5 <millis+0x2>
     a0e:	50 91 d6 00 	lds	r21, 0x00D6	; 0x8000d6 <millis+0x3>
     a12:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <millis_hometemp_update>
     a16:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <millis_hometemp_update+0x1>
     a1a:	b9 01       	movw	r22, r18
     a1c:	68 1b       	sub	r22, r24
     a1e:	79 0b       	sbc	r23, r25
     a20:	cb 01       	movw	r24, r22
     a22:	77 ff       	sbrs	r23, 7
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <main+0x57a>
     a26:	91 95       	neg	r25
     a28:	81 95       	neg	r24
     a2a:	91 09       	sbc	r25, r1
     a2c:	89 39       	cpi	r24, 0x99	; 153
     a2e:	9a 43       	sbci	r25, 0x3A	; 58
     a30:	fc f0       	brlt	.+62     	; 0xa70 <main+0x5be>
		{
			work_mode = 0;
     a32:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     a36:	60 91 dd 00 	lds	r22, 0x00DD	; 0x8000dd <home_temp_own_integer>
     a3a:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <home_temp_rx_integer>
			home_temp_rx_fraction = home_temp_own_fraction;
     a3e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <home_temp_own_fraction>
     a42:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     a46:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <millis_hometemp_update>
     a4a:	30 93 d0 00 	sts	0x00D0, r19	; 0x8000d0 <millis_hometemp_update+0x1>
     a4e:	40 93 d1 00 	sts	0x00D1, r20	; 0x8000d1 <millis_hometemp_update+0x2>
     a52:	50 93 d2 00 	sts	0x00D2, r21	; 0x8000d2 <millis_hometemp_update+0x3>
			EEPROM_write(3, home_temp_rx_integer);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc db       	rcall	.-2056   	; 0x254 <EEPROM_write>
			EEPROM_write(4, home_temp_rx_fraction);
     a5c:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <home_temp_rx_fraction>
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	f7 db       	rcall	.-2066   	; 0x254 <EEPROM_write>
			EEPROM_write(6, work_mode);
     a66:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <work_mode>
     a6a:	86 e0       	ldi	r24, 0x06	; 6
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	f2 db       	rcall	.-2076   	; 0x254 <EEPROM_write>
		}
		wdt_reset();
     a70:	a8 95       	wdr
		//каждые 3сек отправл€ем данные и измер€ем температуру
		if (abs(millis - millis_send_nrf) > 3000)
     a72:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     a76:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     a7a:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <millis_send_nrf>
     a7e:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <millis_send_nrf+0x1>
     a82:	82 1b       	sub	r24, r18
     a84:	93 0b       	sbc	r25, r19
     a86:	97 ff       	sbrs	r25, 7
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <main+0x5de>
     a8a:	91 95       	neg	r25
     a8c:	81 95       	neg	r24
     a8e:	91 09       	sbc	r25, r1
     a90:	89 3b       	cpi	r24, 0xB9	; 185
     a92:	9b 40       	sbci	r25, 0x0B	; 11
     a94:	0c f4       	brge	.+2      	; 0xa98 <main+0x5e6>
     a96:	44 c0       	rjmp	.+136    	; 0xb20 <main+0x66e>
		{
			buf1[0] = gas_boiler_enable_flag;
     a98:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     a9c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <buf1>
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     aa0:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <temp_setpoint_integer>
     aa4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <RX_BUF+0x1>
     aa8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <temp_setpoint_fraction>
     aac:	32 13       	cpse	r19, r18
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <main+0x606>
     ab0:	30 91 ee 00 	lds	r19, 0x00EE	; 0x8000ee <RX_BUF+0x2>
     ab4:	39 17       	cp	r19, r25
     ab6:	19 f0       	breq	.+6      	; 0xabe <main+0x60c>
			{
				buf1[0] += 100;
     ab8:	8c 59       	subi	r24, 0x9C	; 156
     aba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     abe:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <buf1+0x1>
			buf1[2] = temp_setpoint_fraction;
     ac2:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <buf1+0x2>
			buf1[3] = home_temp_rx_integer;
     ac6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <home_temp_rx_integer>
     aca:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <buf1+0x3>
			buf1[4] = home_temp_rx_fraction;
     ace:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <home_temp_rx_fraction>
     ad2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <buf1+0x4>
			dt = NRF24L01_Send(buf1);
     ad6:	81 ee       	ldi	r24, 0xE1	; 225
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a1 d3       	rcall	.+1858   	; 0x121e <NRF24L01_Send>
     adc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     ae0:	f3 01       	movw	r30, r6
     ae2:	01 90       	ld	r0, Z+
     ae4:	00 20       	and	r0, r0
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <main+0x630>
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	af 01       	movw	r20, r30
     aec:	41 5e       	subi	r20, 0xE1	; 225
     aee:	50 40       	sbci	r21, 0x00	; 0
     af0:	44 0f       	add	r20, r20
     af2:	55 1f       	adc	r21, r21
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	81 ee       	ldi	r24, 0xE1	; 225
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	5e d5       	rcall	.+2748   	; 0x15ba <memset>
			DS18b0_find_temp();
     afe:	80 db       	rcall	.-2304   	; 0x200 <DS18b0_find_temp>
			millis_send_nrf = millis;
     b00:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     b04:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     b08:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis+0x2>
     b0c:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis+0x3>
     b10:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <millis_send_nrf>
     b14:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <millis_send_nrf+0x1>
     b18:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <millis_send_nrf+0x2>
     b1c:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <millis_send_nrf+0x3>
		}
		wdt_reset();
     b20:	a8 95       	wdr
		//вывод инфы на индикатор
		if ((abs(millis - millis_print) > 500) && (OK_BUTTON_FLAG != 1))
     b22:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     b26:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     b2a:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <millis_print>
     b2e:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <millis_print+0x1>
     b32:	82 1b       	sub	r24, r18
     b34:	93 0b       	sbc	r25, r19
     b36:	97 ff       	sbrs	r25, 7
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <main+0x68e>
     b3a:	91 95       	neg	r25
     b3c:	81 95       	neg	r24
     b3e:	91 09       	sbc	r25, r1
     b40:	85 3f       	cpi	r24, 0xF5	; 245
     b42:	91 40       	sbci	r25, 0x01	; 1
     b44:	4c f1       	brlt	.+82     	; 0xb98 <main+0x6e6>
     b46:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	29 f1       	breq	.+74     	; 0xb98 <main+0x6e6>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     b4e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <temp_setpoint_integer>
     b52:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <home_temp_rx_integer>
     b56:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <temp_setpoint_fraction>
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	3a e0       	ldi	r19, 0x0A	; 10
     b5e:	83 9f       	mul	r24, r19
     b60:	60 0d       	add	r22, r0
     b62:	71 1d       	adc	r23, r1
     b64:	11 24       	eor	r1, r1
     b66:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <home_temp_rx_fraction>
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	4a e0       	ldi	r20, 0x0A	; 10
     b6e:	24 9f       	mul	r18, r20
     b70:	80 0d       	add	r24, r0
     b72:	91 1d       	adc	r25, r1
     b74:	11 24       	eor	r1, r1
     b76:	a4 d1       	rcall	.+840    	; 0xec0 <PrintTemp_MAX7219>
			millis_print = millis;
     b78:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     b7c:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     b80:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis+0x2>
     b84:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis+0x3>
     b88:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <millis_print>
     b8c:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <millis_print+0x1>
     b90:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <millis_print+0x2>
     b94:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <millis_print+0x3>
		}
		wdt_reset();
     b98:	a8 95       	wdr
		//каждые 10 сек работает контроллер и отправка актуальных данных в Ѕƒ
		if (abs(millis - millis_send_db) > 10000)
     b9a:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     b9e:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     ba2:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <millis_send_db>
     ba6:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <millis_send_db+0x1>
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	97 ff       	sbrs	r25, 7
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <main+0x706>
     bb2:	91 95       	neg	r25
     bb4:	81 95       	neg	r24
     bb6:	91 09       	sbc	r25, r1
     bb8:	81 31       	cpi	r24, 0x11	; 17
     bba:	97 42       	sbci	r25, 0x27	; 39
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <main+0x70e>
     bbe:	43 c0       	rjmp	.+134    	; 0xc46 <main+0x794>
		{
			gas_boiler_controller();
     bc0:	4e da       	rcall	.-2916   	; 0x5e <gas_boiler_controller>
			//отправл€ем в Ѕƒ данные с новой инфо
			sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     bc2:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <work_mode>
     bc6:	1f 92       	push	r1
     bc8:	8f 93       	push	r24
     bca:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
     bce:	1f 92       	push	r1
     bd0:	8f 93       	push	r24
     bd2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <temp_setpoint_integer>
     bd6:	1f 92       	push	r1
     bd8:	8f 93       	push	r24
     bda:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <home_temp_rx_fraction>
     bde:	1f 92       	push	r1
     be0:	8f 93       	push	r24
     be2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <home_temp_rx_integer>
     be6:	1f 92       	push	r1
     be8:	8f 93       	push	r24
     bea:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     bee:	1f 92       	push	r1
     bf0:	8f 93       	push	r24
     bf2:	df 92       	push	r13
     bf4:	cf 92       	push	r12
     bf6:	1f 93       	push	r17
     bf8:	0f 93       	push	r16
     bfa:	0b d5       	rcall	.+2582   	; 0x1612 <sprintf>
			USART_Transmit(DATA_TO_UART);
     bfc:	82 ea       	ldi	r24, 0xA2	; 162
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	5a d3       	rcall	.+1716   	; 0x12b6 <USART_Transmit>
			memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     c02:	f8 01       	movw	r30, r16
     c04:	01 90       	ld	r0, Z+
     c06:	00 20       	and	r0, r0
     c08:	e9 f7       	brne	.-6      	; 0xc04 <main+0x752>
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	af 01       	movw	r20, r30
     c0e:	42 5a       	subi	r20, 0xA2	; 162
     c10:	50 40       	sbci	r21, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	82 ea       	ldi	r24, 0xA2	; 162
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	cf d4       	rcall	.+2462   	; 0x15ba <memset>
			millis_send_db = millis;
     c1c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <millis>
     c20:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <millis+0x1>
     c24:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <millis+0x2>
     c28:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <millis+0x3>
     c2c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <millis_send_db>
     c30:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <millis_send_db+0x1>
     c34:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <millis_send_db+0x2>
     c38:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <millis_send_db+0x3>
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
		}
		//если пришли данные по uart
		if (uart_ready_flag == 1)
     c46:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <uart_ready_flag>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <main+0x79e>
     c4e:	bb c0       	rjmp	.+374    	; 0xdc6 <main+0x914>
		{
			char uart_message[50];
			memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     c50:	f5 01       	movw	r30, r10
     c52:	01 90       	ld	r0, Z+
     c54:	00 20       	and	r0, r0
     c56:	e9 f7       	brne	.-6      	; 0xc52 <main+0x7a0>
     c58:	af 01       	movw	r20, r30
     c5a:	49 5f       	subi	r20, 0xF9	; 249
     c5c:	50 40       	sbci	r21, 0x00	; 0
     c5e:	67 ef       	ldi	r22, 0xF7	; 247
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	a0 d4       	rcall	.+2368   	; 0x15a8 <memcpy>
			memset(uart_rx_buffer,0,strlen(uart_rx_buffer));
     c68:	f5 01       	movw	r30, r10
     c6a:	01 90       	ld	r0, Z+
     c6c:	00 20       	and	r0, r0
     c6e:	e9 f7       	brne	.-6      	; 0xc6a <main+0x7b8>
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	af 01       	movw	r20, r30
     c74:	47 5f       	subi	r20, 0xF7	; 247
     c76:	50 40       	sbci	r21, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	87 ef       	ldi	r24, 0xF7	; 247
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9c d4       	rcall	.+2360   	; 0x15ba <memset>
			uart_rx_count = 0;
     c82:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
     c86:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
			//ѕолучение данные о wifi по uart
			if (strstr(uart_message,"WiFi-OK")!=0)
     c8a:	69 e7       	ldi	r22, 0x79	; 121
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	a5 d4       	rcall	.+2378   	; 0x15de <strstr>
     c94:	89 2b       	or	r24, r25
     c96:	09 f0       	breq	.+2      	; 0xc9a <main+0x7e8>
			{
				PORTC |= (1<<LED_WIFI);
     c98:	a9 9a       	sbi	0x15, 1	; 21
			}
			if (strstr(uart_message,"WiFi-ERROR")!=0)
     c9a:	61 e8       	ldi	r22, 0x81	; 129
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	9d d4       	rcall	.+2362   	; 0x15de <strstr>
     ca4:	89 2b       	or	r24, r25
     ca6:	09 f0       	breq	.+2      	; 0xcaa <main+0x7f8>
			{
				PORTC &= ~(1<<LED_WIFI);
     ca8:	a9 98       	cbi	0x15, 1	; 21
			}
			//ѕолучение инфы от Ѕƒ с котлом
			if (strstr(uart_message,"BD")!=0)
     caa:	6c e8       	ldi	r22, 0x8C	; 140
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	95 d4       	rcall	.+2346   	; 0x15de <strstr>
     cb4:	89 2b       	or	r24, r25
     cb6:	09 f4       	brne	.+2      	; 0xcba <main+0x808>
     cb8:	84 c0       	rjmp	.+264    	; 0xdc2 <main+0x910>
			{
				//считывание статуса котла
				if (strstr(uart_message,"OF")!=0)
     cba:	6f e8       	ldi	r22, 0x8F	; 143
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	8d d4       	rcall	.+2330   	; 0x15de <strstr>
     cc4:	89 2b       	or	r24, r25
     cc6:	19 f0       	breq	.+6      	; 0xcce <main+0x81c>
				{
					gas_boiler_enable_flag_from_BD = 0;
     cc8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <gas_boiler_enable_flag_from_BD>
     ccc:	09 c0       	rjmp	.+18     	; 0xce0 <main+0x82e>
				}
				else if (strstr(uart_message,"ON")!=0)
     cce:	62 e9       	ldi	r22, 0x92	; 146
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	83 d4       	rcall	.+2310   	; 0x15de <strstr>
     cd8:	89 2b       	or	r24, r25
     cda:	11 f0       	breq	.+4      	; 0xce0 <main+0x82e>
				{
					gas_boiler_enable_flag_from_BD = 1;
     cdc:	50 92 d9 00 	sts	0x00D9, r5	; 0x8000d9 <gas_boiler_enable_flag_from_BD>
				}
				//считывание режима работы котла
				if (strstr(uart_message,"AUTO")!=0)
     ce0:	65 e9       	ldi	r22, 0x95	; 149
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	7a d4       	rcall	.+2292   	; 0x15de <strstr>
     cea:	89 2b       	or	r24, r25
     cec:	19 f0       	breq	.+6      	; 0xcf4 <main+0x842>
				{
					work_mode_from_BD = 0;
     cee:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <work_mode_from_BD>
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <main+0x854>
				}
				else if (strstr(uart_message,"MANU")!=0)
     cf4:	6a e9       	ldi	r22, 0x9A	; 154
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	70 d4       	rcall	.+2272   	; 0x15de <strstr>
     cfe:	89 2b       	or	r24, r25
     d00:	11 f0       	breq	.+4      	; 0xd06 <main+0x854>
				{
					work_mode_from_BD = 1;
     d02:	50 92 d8 00 	sts	0x00D8, r5	; 0x8000d8 <work_mode_from_BD>
				}
				//считывание уставки
				char data[20] = {};
     d06:	f7 01       	movw	r30, r14
     d08:	24 2d       	mov	r18, r4
     d0a:	11 92       	st	Z+, r1
     d0c:	2a 95       	dec	r18
     d0e:	e9 f7       	brne	.-6      	; 0xd0a <main+0x858>
				memcpy(data,(int)strchr(uart_message, 'B') + 6, 2);
     d10:	62 e4       	ldi	r22, 0x42	; 66
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	57 d4       	rcall	.+2222   	; 0x15c8 <strchr>
     d1a:	fc 01       	movw	r30, r24
     d1c:	86 81       	ldd	r24, Z+6	; 0x06
     d1e:	97 81       	ldd	r25, Z+7	; 0x07
     d20:	f7 01       	movw	r30, r14
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	80 83       	st	Z, r24
				temp_setpoint_integer_from_BD = strtol(data, NULL, 10);
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	c7 01       	movw	r24, r14
     d30:	22 d3       	rcall	.+1604   	; 0x1376 <strtol>
     d32:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <temp_setpoint_integer_from_BD>
				memset(data,0,sizeof(data));
     d36:	f7 01       	movw	r30, r14
     d38:	24 2d       	mov	r18, r4
     d3a:	11 92       	st	Z+, r1
     d3c:	2a 95       	dec	r18
     d3e:	e9 f7       	brne	.-6      	; 0xd3a <main+0x888>
				memcpy(data,(int)strchr(uart_message, 'B') + 9, 1);
     d40:	62 e4       	ldi	r22, 0x42	; 66
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	3f d4       	rcall	.+2174   	; 0x15c8 <strchr>
     d4a:	fc 01       	movw	r30, r24
     d4c:	81 85       	ldd	r24, Z+9	; 0x09
     d4e:	8b ab       	std	Y+51, r24	; 0x33
				temp_setpoint_fraction_from_BD = strtol(data, NULL, 10);
     d50:	4a e0       	ldi	r20, 0x0A	; 10
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	c7 01       	movw	r24, r14
     d5a:	0d d3       	rcall	.+1562   	; 0x1376 <strtol>
     d5c:	60 93 da 00 	sts	0x00DA, r22	; 0x8000da <temp_setpoint_fraction_from_BD>
				memset(data,0,sizeof(data));
     d60:	f7 01       	movw	r30, r14
     d62:	24 2d       	mov	r18, r4
     d64:	11 92       	st	Z+, r1
     d66:	2a 95       	dec	r18
     d68:	e9 f7       	brne	.-6      	; 0xd64 <main+0x8b2>
				//изменение параметров если они отличаютс€
				if (temp_setpoint_integer != temp_setpoint_integer_from_BD)
     d6a:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <temp_setpoint_integer_from_BD>
     d6e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <temp_setpoint_integer>
     d72:	86 17       	cp	r24, r22
     d74:	29 f0       	breq	.+10     	; 0xd80 <main+0x8ce>
				{
					temp_setpoint_integer = temp_setpoint_integer_from_BD;
     d76:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <temp_setpoint_integer>
					EEPROM_write(1, temp_setpoint_integer);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	6a da       	rcall	.-2860   	; 0x254 <EEPROM_write>
				}
				if (temp_setpoint_fraction != temp_setpoint_fraction_from_BD)
     d80:	60 91 da 00 	lds	r22, 0x00DA	; 0x8000da <temp_setpoint_fraction_from_BD>
     d84:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <temp_setpoint_fraction>
     d88:	86 17       	cp	r24, r22
     d8a:	29 f0       	breq	.+10     	; 0xd96 <main+0x8e4>
				{
					temp_setpoint_fraction = temp_setpoint_fraction_from_BD;
     d8c:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <temp_setpoint_fraction>
					EEPROM_write(2, temp_setpoint_fraction);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	5f da       	rcall	.-2882   	; 0x254 <EEPROM_write>
				}
				if (gas_boiler_enable_flag != gas_boiler_enable_flag_from_BD)
     d96:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <gas_boiler_enable_flag_from_BD>
     d9a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <gas_boiler_enable_flag>
     d9e:	86 17       	cp	r24, r22
     da0:	29 f0       	breq	.+10     	; 0xdac <main+0x8fa>
				{
					gas_boiler_enable_flag = gas_boiler_enable_flag_from_BD;
     da2:	60 93 de 00 	sts	0x00DE, r22	; 0x8000de <gas_boiler_enable_flag>
					EEPROM_write(5, gas_boiler_enable_flag);
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	54 da       	rcall	.-2904   	; 0x254 <EEPROM_write>
				}
				if (work_mode != work_mode_from_BD)
     dac:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <work_mode_from_BD>
     db0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <work_mode>
     db4:	86 17       	cp	r24, r22
     db6:	29 f0       	breq	.+10     	; 0xdc2 <main+0x910>
				{
					work_mode = work_mode_from_BD;
     db8:	60 93 d7 00 	sts	0x00D7, r22	; 0x8000d7 <work_mode>
					EEPROM_write(6, work_mode);
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	49 da       	rcall	.-2926   	; 0x254 <EEPROM_write>
				}
			}
			uart_ready_flag = 0;
     dc2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <uart_ready_flag>
		}
		wdt_reset();
     dc6:	a8 95       	wdr
    }
     dc8:	7c cc       	rjmp	.-1800   	; 0x6c2 <main+0x210>

00000dca <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
     dca:	cf 93       	push	r28
     dcc:	c6 2f       	mov	r28, r22
     dce:	a8 98       	cbi	0x15, 0	; 21
     dd0:	00 00       	nop
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	69 db       	rcall	.-2350   	; 0x4a8 <spi_send_recv>
     dd6:	8c 2f       	mov	r24, r28
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	66 db       	rcall	.-2356   	; 0x4a8 <spi_send_recv>
     ddc:	a8 9a       	sbi	0x15, 0	; 21
     dde:	00 00       	nop
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <MAX7219_clear>:
     de4:	cf 93       	push	r28
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	8f e0       	ldi	r24, 0x0F	; 15
     dea:	ef df       	rcall	.-34     	; 0xdca <Send_MAX7219>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	8c e0       	ldi	r24, 0x0C	; 12
     df0:	ec df       	rcall	.-40     	; 0xdca <Send_MAX7219>
     df2:	67 e0       	ldi	r22, 0x07	; 7
     df4:	8b e0       	ldi	r24, 0x0B	; 11
     df6:	e9 df       	rcall	.-46     	; 0xdca <Send_MAX7219>
     df8:	6f ef       	ldi	r22, 0xFF	; 255
     dfa:	89 e0       	ldi	r24, 0x09	; 9
     dfc:	e6 df       	rcall	.-52     	; 0xdca <Send_MAX7219>
     dfe:	c8 e0       	ldi	r28, 0x08	; 8
     e00:	6f e0       	ldi	r22, 0x0F	; 15
     e02:	8c 2f       	mov	r24, r28
     e04:	e2 df       	rcall	.-60     	; 0xdca <Send_MAX7219>
     e06:	c1 50       	subi	r28, 0x01	; 1
     e08:	d9 f7       	brne	.-10     	; 0xe00 <MAX7219_clear+0x1c>
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <MAX7219_init>:
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	8f e0       	ldi	r24, 0x0F	; 15
     e12:	db df       	rcall	.-74     	; 0xdca <Send_MAX7219>
     e14:	8f e3       	ldi	r24, 0x3F	; 63
     e16:	9c e9       	ldi	r25, 0x9C	; 156
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <MAX7219_init+0xa>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <MAX7219_init+0x10>
     e1e:	00 00       	nop
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	8c e0       	ldi	r24, 0x0C	; 12
     e24:	d2 df       	rcall	.-92     	; 0xdca <Send_MAX7219>
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	9c e9       	ldi	r25, 0x9C	; 156
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <MAX7219_init+0x1c>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <MAX7219_init+0x22>
     e30:	00 00       	nop
     e32:	67 e0       	ldi	r22, 0x07	; 7
     e34:	8b e0       	ldi	r24, 0x0B	; 11
     e36:	c9 df       	rcall	.-110    	; 0xdca <Send_MAX7219>
     e38:	8f e3       	ldi	r24, 0x3F	; 63
     e3a:	9c e9       	ldi	r25, 0x9C	; 156
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <MAX7219_init+0x2e>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <MAX7219_init+0x34>
     e42:	00 00       	nop
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	89 e0       	ldi	r24, 0x09	; 9
     e48:	c0 df       	rcall	.-128    	; 0xdca <Send_MAX7219>
     e4a:	8f e3       	ldi	r24, 0x3F	; 63
     e4c:	9c e9       	ldi	r25, 0x9C	; 156
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <MAX7219_init+0x40>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <MAX7219_init+0x46>
     e54:	00 00       	nop
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	8a e0       	ldi	r24, 0x0A	; 10
     e5a:	b7 df       	rcall	.-146    	; 0xdca <Send_MAX7219>
     e5c:	8f e3       	ldi	r24, 0x3F	; 63
     e5e:	9c e9       	ldi	r25, 0x9C	; 156
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <MAX7219_init+0x52>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <MAX7219_init+0x58>
     e66:	00 00       	nop
     e68:	bd df       	rcall	.-134    	; 0xde4 <MAX7219_clear>
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	ad df       	rcall	.-166    	; 0xdca <Send_MAX7219>
     e70:	8f e3       	ldi	r24, 0x3F	; 63
     e72:	9c e9       	ldi	r25, 0x9C	; 156
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <MAX7219_init+0x66>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <MAX7219_init+0x6c>
     e7a:	00 00       	nop
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	a4 df       	rcall	.-184    	; 0xdca <Send_MAX7219>
     e82:	6f ef       	ldi	r22, 0xFF	; 255
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	a1 df       	rcall	.-190    	; 0xdca <Send_MAX7219>
     e88:	6f ef       	ldi	r22, 0xFF	; 255
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	9e df       	rcall	.-196    	; 0xdca <Send_MAX7219>
     e8e:	6f ef       	ldi	r22, 0xFF	; 255
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	9b df       	rcall	.-202    	; 0xdca <Send_MAX7219>
     e94:	6f ef       	ldi	r22, 0xFF	; 255
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	98 df       	rcall	.-208    	; 0xdca <Send_MAX7219>
     e9a:	6f ef       	ldi	r22, 0xFF	; 255
     e9c:	86 e0       	ldi	r24, 0x06	; 6
     e9e:	95 df       	rcall	.-214    	; 0xdca <Send_MAX7219>
     ea0:	6f ef       	ldi	r22, 0xFF	; 255
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	92 df       	rcall	.-220    	; 0xdca <Send_MAX7219>
     ea6:	6f ef       	ldi	r22, 0xFF	; 255
     ea8:	88 e0       	ldi	r24, 0x08	; 8
     eaa:	8f df       	rcall	.-226    	; 0xdca <Send_MAX7219>
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	23 ed       	ldi	r18, 0xD3	; 211
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	91 50       	subi	r25, 0x01	; 1
     eb4:	20 40       	sbci	r18, 0x00	; 0
     eb6:	80 40       	sbci	r24, 0x00	; 0
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <MAX7219_init+0xa4>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <MAX7219_init+0xae>
     ebc:	00 00       	nop
     ebe:	08 95       	ret

00000ec0 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8c 01       	movw	r16, r24
     ed2:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     ed4:	08 3e       	cpi	r16, 0xE8	; 232
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	18 07       	cpc	r17, r24
     eda:	0c f0       	brlt	.+2      	; 0xede <PrintTemp_MAX7219+0x1e>
     edc:	5c c0       	rjmp	.+184    	; 0xf96 <PrintTemp_MAX7219+0xd6>
     ede:	68 3e       	cpi	r22, 0xE8	; 232
     ee0:	73 40       	sbci	r23, 0x03	; 3
     ee2:	0c f0       	brlt	.+2      	; 0xee6 <PrintTemp_MAX7219+0x26>
     ee4:	58 c0       	rjmp	.+176    	; 0xf96 <PrintTemp_MAX7219+0xd6>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     ee6:	7e df       	rcall	.-260    	; 0xde4 <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодировани€ дл€ всех разр€дов кроме позиций 2 и 6
     ee8:	6e ee       	ldi	r22, 0xEE	; 238
     eea:	89 e0       	ldi	r24, 0x09	; 9
     eec:	6e df       	rcall	.-292    	; 0xdca <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв —
     eee:	6e e4       	ldi	r22, 0x4E	; 78
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	6b df       	rcall	.-298    	; 0xdca <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв —
     ef4:	6e e4       	ldi	r22, 0x4E	; 78
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	68 df       	rcall	.-304    	; 0xdca <Send_MAX7219>
	if (current_temp == 0)
     efa:	01 15       	cp	r16, r1
     efc:	11 05       	cpc	r17, r1
     efe:	39 f4       	brne	.+14     	; 0xf0e <PrintTemp_MAX7219+0x4e>
	{
		Send_MAX7219(start_pos, 0);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	62 df       	rcall	.-316    	; 0xdca <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     f06:	60 e8       	ldi	r22, 0x80	; 128
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	5f df       	rcall	.-322    	; 0xdca <Send_MAX7219>
     f0c:	1d c0       	rjmp	.+58     	; 0xf48 <PrintTemp_MAX7219+0x88>
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	f9 2e       	mov	r15, r25
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     f12:	2a e0       	ldi	r18, 0x0A	; 10
     f14:	c2 2e       	mov	r12, r18
     f16:	d1 2c       	mov	r13, r1
     f18:	c8 01       	movw	r24, r16
     f1a:	b6 01       	movw	r22, r12
     f1c:	f7 d1       	rcall	.+1006   	; 0x130c <__divmodhi4>
     f1e:	68 2f       	mov	r22, r24
     f20:	8f 2d       	mov	r24, r15
     f22:	53 df       	rcall	.-346    	; 0xdca <Send_MAX7219>
     f24:	2f 2d       	mov	r18, r15
			}
			start_pos++;
     f26:	f3 94       	inc	r15
			current_temp /= 10;
     f28:	c8 01       	movw	r24, r16
     f2a:	b6 01       	movw	r22, r12
     f2c:	ef d1       	rcall	.+990    	; 0x130c <__divmodhi4>
     f2e:	8b 01       	movw	r16, r22
			asm("nop");
     f30:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     f32:	67 2b       	or	r22, r23
     f34:	49 f0       	breq	.+18     	; 0xf48 <PrintTemp_MAX7219+0x88>
		{
			if((start_pos == 3)||(start_pos == 7))
     f36:	2b 7f       	andi	r18, 0xFB	; 251
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	71 f7       	brne	.-36     	; 0xf18 <PrintTemp_MAX7219+0x58>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     f3c:	c8 01       	movw	r24, r16
     f3e:	b6 01       	movw	r22, r12
     f40:	e5 d1       	rcall	.+970    	; 0x130c <__divmodhi4>
     f42:	68 2f       	mov	r22, r24
     f44:	60 68       	ori	r22, 0x80	; 128
     f46:	ec cf       	rjmp	.-40     	; 0xf20 <PrintTemp_MAX7219+0x60>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     f48:	20 97       	sbiw	r28, 0x00	; 0
     f4a:	39 f4       	brne	.+14     	; 0xf5a <PrintTemp_MAX7219+0x9a>
	{
		Send_MAX7219(start_pos, 0);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	3c df       	rcall	.-392    	; 0xdca <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     f52:	60 e8       	ldi	r22, 0x80	; 128
     f54:	87 e0       	ldi	r24, 0x07	; 7
     f56:	39 df       	rcall	.-398    	; 0xdca <Send_MAX7219>
     f58:	1c c0       	rjmp	.+56     	; 0xf92 <PrintTemp_MAX7219+0xd2>
     f5a:	16 e0       	ldi	r17, 0x06	; 6
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	e8 2e       	mov	r14, r24
     f60:	f1 2c       	mov	r15, r1
     f62:	ce 01       	movw	r24, r28
     f64:	b7 01       	movw	r22, r14
     f66:	d2 d1       	rcall	.+932    	; 0x130c <__divmodhi4>
     f68:	68 2f       	mov	r22, r24
     f6a:	81 2f       	mov	r24, r17
     f6c:	2e df       	rcall	.-420    	; 0xdca <Send_MAX7219>
     f6e:	21 2f       	mov	r18, r17
			}
			start_pos++;
     f70:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     f72:	ce 01       	movw	r24, r28
     f74:	b7 01       	movw	r22, r14
     f76:	ca d1       	rcall	.+916    	; 0x130c <__divmodhi4>
     f78:	eb 01       	movw	r28, r22
			asm("nop");
     f7a:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     f7c:	20 97       	sbiw	r28, 0x00	; 0
     f7e:	49 f0       	breq	.+18     	; 0xf92 <PrintTemp_MAX7219+0xd2>
		{
			if((start_pos == 3)||(start_pos == 7))
     f80:	2b 7f       	andi	r18, 0xFB	; 251
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	71 f7       	brne	.-36     	; 0xf62 <PrintTemp_MAX7219+0xa2>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     f86:	ce 01       	movw	r24, r28
     f88:	b7 01       	movw	r22, r14
     f8a:	c0 d1       	rcall	.+896    	; 0x130c <__divmodhi4>
     f8c:	68 2f       	mov	r22, r24
     f8e:	60 68       	ori	r22, 0x80	; 128
     f90:	ec cf       	rjmp	.-40     	; 0xf6a <PrintTemp_MAX7219+0xaa>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <PrintTemp_MAX7219+0xd8>
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	f6 2e       	mov	r15, r22
     fb6:	d7 2f       	mov	r29, r23
     fb8:	c4 2f       	mov	r28, r20
     fba:	c1 98       	cbi	0x18, 1	; 24
     fbc:	c2 98       	cbi	0x18, 2	; 24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	73 da       	rcall	.-2842   	; 0x4a8 <spi_send_recv>
     fc2:	85 e0       	ldi	r24, 0x05	; 5
     fc4:	8a 95       	dec	r24
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <NRF24_Transmit+0x1a>
     fc8:	00 00       	nop
     fca:	0f 2d       	mov	r16, r15
     fcc:	1d 2f       	mov	r17, r29
     fce:	cc 23       	and	r28, r28
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <NRF24_Transmit+0x36>
     fd2:	f8 01       	movw	r30, r16
     fd4:	81 91       	ld	r24, Z+
     fd6:	8f 01       	movw	r16, r30
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	66 da       	rcall	.-2868   	; 0x4a8 <spi_send_recv>
     fdc:	c1 50       	subi	r28, 0x01	; 1
     fde:	f7 cf       	rjmp	.-18     	; 0xfce <NRF24_Transmit+0x24>
     fe0:	c2 9a       	sbi	0x18, 2	; 24
     fe2:	c1 9a       	sbi	0x18, 1	; 24
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	08 95       	ret

00000ff0 <NRF24_FlushRX>:
     ff0:	c2 98       	cbi	0x18, 2	; 24
     ff2:	82 ee       	ldi	r24, 0xE2	; 226
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	58 da       	rcall	.-2896   	; 0x4a8 <spi_send_recv>
     ff8:	85 e0       	ldi	r24, 0x05	; 5
     ffa:	8a 95       	dec	r24
     ffc:	f1 f7       	brne	.-4      	; 0xffa <NRF24_FlushRX+0xa>
     ffe:	00 00       	nop
    1000:	c2 9a       	sbi	0x18, 2	; 24
    1002:	08 95       	ret

00001004 <NRF24_FlushTX>:
    1004:	c2 98       	cbi	0x18, 2	; 24
    1006:	81 ee       	ldi	r24, 0xE1	; 225
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	4e da       	rcall	.-2916   	; 0x4a8 <spi_send_recv>
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	8a 95       	dec	r24
    1010:	f1 f7       	brne	.-4      	; 0x100e <NRF24_FlushTX+0xa>
    1012:	00 00       	nop
    1014:	c2 9a       	sbi	0x18, 2	; 24
    1016:	08 95       	ret

00001018 <NRF24_ToggleFeatures>:
    1018:	c2 98       	cbi	0x18, 2	; 24
    101a:	80 e5       	ldi	r24, 0x50	; 80
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	44 da       	rcall	.-2936   	; 0x4a8 <spi_send_recv>
    1020:	85 e0       	ldi	r24, 0x05	; 5
    1022:	8a 95       	dec	r24
    1024:	f1 f7       	brne	.-4      	; 0x1022 <NRF24_ToggleFeatures+0xa>
    1026:	00 00       	nop
    1028:	83 e7       	ldi	r24, 0x73	; 115
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	3d da       	rcall	.-2950   	; 0x4a8 <spi_send_recv>
    102e:	c2 9a       	sbi	0x18, 2	; 24
    1030:	08 95       	ret

00001032 <NRF24_Read_Buf>:
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	f6 2e       	mov	r15, r22
    103e:	d7 2f       	mov	r29, r23
    1040:	c4 2f       	mov	r28, r20
    1042:	c2 98       	cbi	0x18, 2	; 24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	30 da       	rcall	.-2976   	; 0x4a8 <spi_send_recv>
    1048:	0f 2d       	mov	r16, r15
    104a:	1d 2f       	mov	r17, r29
    104c:	cc 23       	and	r28, r28
    104e:	41 f0       	breq	.+16     	; 0x1060 <NRF24_Read_Buf+0x2e>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	29 da       	rcall	.-2990   	; 0x4a8 <spi_send_recv>
    1056:	f8 01       	movw	r30, r16
    1058:	81 93       	st	Z+, r24
    105a:	8f 01       	movw	r16, r30
    105c:	c1 50       	subi	r28, 0x01	; 1
    105e:	f6 cf       	rjmp	.-20     	; 0x104c <NRF24_Read_Buf+0x1a>
    1060:	c2 9a       	sbi	0x18, 2	; 24
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	08 95       	ret

0000106e <NRF24_Write_Buf>:
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	f6 2e       	mov	r15, r22
    107a:	d7 2f       	mov	r29, r23
    107c:	c4 2f       	mov	r28, r20
    107e:	c2 98       	cbi	0x18, 2	; 24
    1080:	80 62       	ori	r24, 0x20	; 32
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	11 da       	rcall	.-3038   	; 0x4a8 <spi_send_recv>
    1086:	85 e0       	ldi	r24, 0x05	; 5
    1088:	8a 95       	dec	r24
    108a:	f1 f7       	brne	.-4      	; 0x1088 <NRF24_Write_Buf+0x1a>
    108c:	00 00       	nop
    108e:	0f 2d       	mov	r16, r15
    1090:	1d 2f       	mov	r17, r29
    1092:	cc 23       	and	r28, r28
    1094:	39 f0       	breq	.+14     	; 0x10a4 <NRF24_Write_Buf+0x36>
    1096:	f8 01       	movw	r30, r16
    1098:	81 91       	ld	r24, Z+
    109a:	8f 01       	movw	r16, r30
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	04 da       	rcall	.-3064   	; 0x4a8 <spi_send_recv>
    10a0:	c1 50       	subi	r28, 0x01	; 1
    10a2:	f7 cf       	rjmp	.-18     	; 0x1092 <NRF24_Write_Buf+0x24>
    10a4:	c2 9a       	sbi	0x18, 2	; 24
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	08 95       	ret

000010b2 <NRF24L01_TX_Mode>:
    10b2:	43 e0       	ldi	r20, 0x03	; 3
    10b4:	63 e6       	ldi	r22, 0x63	; 99
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e1       	ldi	r24, 0x10	; 16
    10ba:	d9 df       	rcall	.-78     	; 0x106e <NRF24_Write_Buf>
    10bc:	43 e0       	ldi	r20, 0x03	; 3
    10be:	63 e6       	ldi	r22, 0x63	; 99
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	8b e0       	ldi	r24, 0x0B	; 11
    10c4:	d4 df       	rcall	.-88     	; 0x106e <NRF24_Write_Buf>
    10c6:	c1 98       	cbi	0x18, 1	; 24
    10c8:	93 df       	rcall	.-218    	; 0xff0 <NRF24_FlushRX>
    10ca:	9c cf       	rjmp	.-200    	; 0x1004 <NRF24_FlushTX>

000010cc <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
    10cc:	cf 93       	push	r28
    10ce:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
	LOW_CSN;
    10d0:	c2 98       	cbi	0x18, 2	; 24
	spi_send_recv(reg);
    10d2:	80 62       	ori	r24, 0x20	; 32
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	e8 d9       	rcall	.-3120   	; 0x4a8 <spi_send_recv>
	spi_send_recv(data_out);
    10d8:	8c 2f       	mov	r24, r28
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	e5 d9       	rcall	.-3126   	; 0x4a8 <spi_send_recv>
	HIGH_CSN;
    10de:	c2 9a       	sbi	0x18, 2	; 24
}
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
    10e4:	cf 93       	push	r28
    10e6:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
    10e8:	c2 98       	cbi	0x18, 2	; 24
	data_in = spi_send_recv(reg);
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	dd d9       	rcall	.-3142   	; 0x4a8 <spi_send_recv>
	if(reg != STATUS)
    10ee:	c7 30       	cpi	r28, 0x07	; 7
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <nRF_read_register+0x14>
	{
		data_in = spi_send_recv(NOP);
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	d8 d9       	rcall	.-3152   	; 0x4a8 <spi_send_recv>
	}
	HIGH_CSN;
    10f8:	c2 9a       	sbi	0x18, 2	; 24
	return data_in;
}
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	cf 93       	push	r28
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
    1122:	87 e0       	ldi	r24, 0x07	; 7
    1124:	df df       	rcall	.-66     	; 0x10e4 <nRF_read_register>
    1126:	c8 2f       	mov	r28, r24
	if(status & 0x40)
    1128:	86 ff       	sbrs	r24, 6
    112a:	0f c0       	rjmp	.+30     	; 0x114a <__vector_1+0x4c>
	{
		pipe = (status>>1)&0x07;
    112c:	86 95       	lsr	r24
    112e:	87 70       	andi	r24, 0x07	; 7
    1130:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
    1134:	45 e0       	ldi	r20, 0x05	; 5
    1136:	6c ee       	ldi	r22, 0xEC	; 236
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	81 e6       	ldi	r24, 0x61	; 97
    113c:	7a df       	rcall	.-268    	; 0x1032 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
    113e:	60 e4       	ldi	r22, 0x40	; 64
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	c4 df       	rcall	.-120    	; 0x10cc <nRF_write_register>
		rx_flag = 1;	
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <rx_flag>
	}
	if(status&TX_DS) //tx_ds == 0x20
    114a:	c5 70       	andi	r28, 0x05	; 5
    114c:	19 f0       	breq	.+6      	; 0x1154 <__vector_1+0x56>
	{
		nRF_write_register(STATUS, 0x20);
    114e:	60 e2       	ldi	r22, 0x20	; 32
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	bc df       	rcall	.-136    	; 0x10cc <nRF_write_register>
	}
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	cf 91       	pop	r28
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	b4 df       	rcall	.-152    	; 0x10e4 <nRF_read_register>
	//разбудим модуль и переведЄм его в режим приЄмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    117c:	68 2f       	mov	r22, r24
    117e:	63 60       	ori	r22, 0x03	; 3
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	a4 df       	rcall	.-184    	; 0x10cc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    1184:	43 e0       	ldi	r20, 0x03	; 3
    1186:	60 e6       	ldi	r22, 0x60	; 96
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e1       	ldi	r24, 0x10	; 16
    118c:	70 df       	rcall	.-288    	; 0x106e <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    118e:	43 e0       	ldi	r20, 0x03	; 3
    1190:	60 e6       	ldi	r22, 0x60	; 96
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	8b e0       	ldi	r24, 0x0B	; 11
    1196:	6b df       	rcall	.-298    	; 0x106e <NRF24_Write_Buf>
	HIGH_CE;
    1198:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119a:	87 e5       	ldi	r24, 0x57	; 87
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <NRF24L01_RX_Mode+0x26>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <NRF24L01_RX_Mode+0x2c>
    11a4:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    11a6:	24 df       	rcall	.-440    	; 0xff0 <NRF24_FlushRX>
	NRF24_FlushTX();
    11a8:	2d cf       	rjmp	.-422    	; 0x1004 <NRF24_FlushTX>

000011aa <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    11aa:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ac:	8f e1       	ldi	r24, 0x1F	; 31
    11ae:	9e e4       	ldi	r25, 0x4E	; 78
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <NRF24_ini+0x6>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <NRF24_ini+0xc>
    11b6:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    11b8:	6a e0       	ldi	r22, 0x0A	; 10
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	87 df       	rcall	.-242    	; 0x10cc <nRF_write_register>
    11be:	8f e1       	ldi	r24, 0x1F	; 31
    11c0:	9e e4       	ldi	r25, 0x4E	; 78
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <NRF24_ini+0x18>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <NRF24_ini+0x1e>
    11c8:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    11ca:	63 e0       	ldi	r22, 0x03	; 3
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	7e df       	rcall	.-260    	; 0x10cc <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    11d0:	63 e0       	ldi	r22, 0x03	; 3
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	7b df       	rcall	.-266    	; 0x10cc <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	78 df       	rcall	.-272    	; 0x10cc <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    11dc:	6f e6       	ldi	r22, 0x6F	; 111
    11de:	84 e0       	ldi	r24, 0x04	; 4
    11e0:	75 df       	rcall	.-278    	; 0x10cc <nRF_write_register>
	NRF24_ToggleFeatures();
    11e2:	1a df       	rcall	.-460    	; 0x1018 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	8d e1       	ldi	r24, 0x1D	; 29
    11e8:	71 df       	rcall	.-286    	; 0x10cc <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	8c e1       	ldi	r24, 0x1C	; 28
    11ee:	6e df       	rcall	.-292    	; 0x10cc <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    11f0:	60 e7       	ldi	r22, 0x70	; 112
    11f2:	87 e0       	ldi	r24, 0x07	; 7
    11f4:	6b df       	rcall	.-298    	; 0x10cc <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    11f6:	6c e4       	ldi	r22, 0x4C	; 76
    11f8:	85 e0       	ldi	r24, 0x05	; 5
    11fa:	68 df       	rcall	.-304    	; 0x10cc <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    11fc:	66 e0       	ldi	r22, 0x06	; 6
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	65 df       	rcall	.-310    	; 0x10cc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    1202:	43 e0       	ldi	r20, 0x03	; 3
    1204:	60 e6       	ldi	r22, 0x60	; 96
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	31 df       	rcall	.-414    	; 0x106e <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    120c:	43 e0       	ldi	r20, 0x03	; 3
    120e:	60 e6       	ldi	r22, 0x60	; 96
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	8b e0       	ldi	r24, 0x0B	; 11
    1214:	2c df       	rcall	.-424    	; 0x106e <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    1216:	65 e0       	ldi	r22, 0x05	; 5
    1218:	82 e1       	ldi	r24, 0x12	; 18
    121a:	58 df       	rcall	.-336    	; 0x10cc <nRF_write_register>
	//пока уходим в режим приЄмника
	NRF24L01_RX_Mode();
    121c:	ad cf       	rjmp	.-166    	; 0x1178 <NRF24L01_RX_Mode>

0000121e <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потер€нных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    1224:	46 df       	rcall	.-372    	; 0x10b2 <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	5d df       	rcall	.-326    	; 0x10e4 <nRF_read_register>
    122a:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в сп€щий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    122c:	68 2f       	mov	r22, r24
    122e:	62 60       	ori	r22, 0x02	; 2
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	4c df       	rcall	.-360    	; 0x10cc <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1234:	87 e5       	ldi	r24, 0x57	; 87
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <NRF24L01_Send+0x1a>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <NRF24L01_Send+0x20>
    123e:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	//ќтправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    1240:	45 e0       	ldi	r20, 0x05	; 5
    1242:	be 01       	movw	r22, r28
    1244:	80 ea       	ldi	r24, 0xA0	; 160
    1246:	b1 de       	rcall	.-670    	; 0xfaa <NRF24_Transmit>
	HIGH_CE;
    1248:	c1 9a       	sbi	0x18, 1	; 24
    124a:	90 e5       	ldi	r25, 0x50	; 80
    124c:	9a 95       	dec	r25
    124e:	f1 f7       	brne	.-4      	; 0x124c <NRF24L01_Send+0x2e>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    1250:	c1 98       	cbi	0x18, 1	; 24
	while( (PIND&(1<<IRQ)) != 0);
    1252:	82 99       	sbic	0x10, 2	; 16
    1254:	fe cf       	rjmp	.-4      	; 0x1252 <NRF24L01_Send+0x34>
	status = nRF_read_register(STATUS);
    1256:	87 e0       	ldi	r24, 0x07	; 7
    1258:	45 df       	rcall	.-374    	; 0x10e4 <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    125a:	98 2f       	mov	r25, r24
    125c:	95 70       	andi	r25, 0x05	; 5
    125e:	79 f0       	breq	.+30     	; 0x127e <NRF24L01_Send+0x60>
	{
		PORTD |= (1<<LED_TX);
    1260:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1262:	2f ef       	ldi	r18, 0xFF	; 255
    1264:	81 ee       	ldi	r24, 0xE1	; 225
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	21 50       	subi	r18, 0x01	; 1
    126a:	80 40       	sbci	r24, 0x00	; 0
    126c:	90 40       	sbci	r25, 0x00	; 0
    126e:	e1 f7       	brne	.-8      	; 0x1268 <NRF24L01_Send+0x4a>
    1270:	00 c0       	rjmp	.+0      	; 0x1272 <NRF24L01_Send+0x54>
    1272:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    1274:	96 98       	cbi	0x12, 6	; 18
		nRF_write_register(STATUS, 0x20);
    1276:	60 e2       	ldi	r22, 0x20	; 32
    1278:	87 e0       	ldi	r24, 0x07	; 7
    127a:	28 df       	rcall	.-432    	; 0x10cc <nRF_write_register>
    127c:	06 c0       	rjmp	.+12     	; 0x128a <NRF24L01_Send+0x6c>
	}
	else if(status&MAX_RT)
    127e:	82 ff       	sbrs	r24, 2
    1280:	04 c0       	rjmp	.+8      	; 0x128a <NRF24L01_Send+0x6c>
	{
		nRF_write_register(STATUS, 0x10);
    1282:	60 e1       	ldi	r22, 0x10	; 16
    1284:	87 e0       	ldi	r24, 0x07	; 7
    1286:	22 df       	rcall	.-444    	; 0x10cc <nRF_write_register>
		NRF24_FlushTX();
    1288:	bd de       	rcall	.-646    	; 0x1004 <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    128a:	88 e0       	ldi	r24, 0x08	; 8
    128c:	2b df       	rcall	.-426    	; 0x10e4 <nRF_read_register>
    128e:	c8 2f       	mov	r28, r24
	//”ходим в режим приЄмника
	NRF24L01_RX_Mode();
    1290:	73 df       	rcall	.-282    	; 0x1178 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    1292:	60 e7       	ldi	r22, 0x70	; 112
    1294:	87 e0       	ldi	r24, 0x07	; 7
    1296:	1a df       	rcall	.-460    	; 0x10cc <nRF_write_register>
	return regval;
}
    1298:	8c 2f       	mov	r24, r28
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <USART_Init>:
#include "usart.h"


void USART_Init( unsigned int speed)//»нициализаци€ модул€ USART
{	
  UBRRH = (unsigned char)(speed>>8);
    12a0:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    12a2:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //¬ключаем прием и передачу по USART
    12a4:	8a b1       	in	r24, 0x0a	; 10
    12a6:	88 61       	ori	r24, 0x18	; 24
    12a8:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //–азрешаем прерывание при приеме
    12aa:	57 9a       	sbi	0x0a, 7	; 10
  UCSRA |= (1<<U2X); // ƒл€ 8 мгц, удвоение скорости
    12ac:	59 9a       	sbi	0x0b, 1	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// ќбращаемс€ именно к регистру UCSRC (URSEL=1),
    12ae:	80 b5       	in	r24, 0x20	; 32
    12b0:	8e 68       	ori	r24, 0x8E	; 142
    12b2:	80 bd       	out	0x20, r24	; 32
    12b4:	08 95       	ret

000012b6 <USART_Transmit>:
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	24 2f       	mov	r18, r20
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	fc 01       	movw	r30, r24
    12be:	01 90       	ld	r0, Z+
    12c0:	00 20       	and	r0, r0
    12c2:	e9 f7       	brne	.-6      	; 0x12be <USART_Transmit+0x8>
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	e8 1b       	sub	r30, r24
    12c8:	f9 0b       	sbc	r31, r25
    12ca:	2e 17       	cp	r18, r30
    12cc:	3f 07       	cpc	r19, r31
    12ce:	48 f4       	brcc	.+18     	; 0x12e2 <USART_Transmit+0x2c>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
    12d0:	5d 9b       	sbis	0x0b, 5	; 11
    12d2:	fe cf       	rjmp	.-4      	; 0x12d0 <USART_Transmit+0x1a>
	  UDR = data[i]; //Ќачало передачи данных
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	20 81       	ld	r18, Z
    12dc:	2c b9       	out	0x0c, r18	; 12
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    12de:	4f 5f       	subi	r20, 0xFF	; 255
    12e0:	eb cf       	rjmp	.-42     	; 0x12b8 <USART_Transmit+0x2>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
	  UDR = data[i]; //Ќачало передачи данных
  }
}
    12e2:	08 95       	ret

000012e4 <__udivmodhi4>:
    12e4:	aa 1b       	sub	r26, r26
    12e6:	bb 1b       	sub	r27, r27
    12e8:	51 e1       	ldi	r21, 0x11	; 17
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <__udivmodhi4_ep>

000012ec <__udivmodhi4_loop>:
    12ec:	aa 1f       	adc	r26, r26
    12ee:	bb 1f       	adc	r27, r27
    12f0:	a6 17       	cp	r26, r22
    12f2:	b7 07       	cpc	r27, r23
    12f4:	10 f0       	brcs	.+4      	; 0x12fa <__udivmodhi4_ep>
    12f6:	a6 1b       	sub	r26, r22
    12f8:	b7 0b       	sbc	r27, r23

000012fa <__udivmodhi4_ep>:
    12fa:	88 1f       	adc	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	5a 95       	dec	r21
    1300:	a9 f7       	brne	.-22     	; 0x12ec <__udivmodhi4_loop>
    1302:	80 95       	com	r24
    1304:	90 95       	com	r25
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	08 95       	ret

0000130c <__divmodhi4>:
    130c:	97 fb       	bst	r25, 7
    130e:	07 2e       	mov	r0, r23
    1310:	16 f4       	brtc	.+4      	; 0x1316 <__divmodhi4+0xa>
    1312:	00 94       	com	r0
    1314:	06 d0       	rcall	.+12     	; 0x1322 <__divmodhi4_neg1>
    1316:	77 fd       	sbrc	r23, 7
    1318:	08 d0       	rcall	.+16     	; 0x132a <__divmodhi4_neg2>
    131a:	e4 df       	rcall	.-56     	; 0x12e4 <__udivmodhi4>
    131c:	07 fc       	sbrc	r0, 7
    131e:	05 d0       	rcall	.+10     	; 0x132a <__divmodhi4_neg2>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__divmodhi4_exit>

00001322 <__divmodhi4_neg1>:
    1322:	90 95       	com	r25
    1324:	81 95       	neg	r24
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	08 95       	ret

0000132a <__divmodhi4_neg2>:
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255

00001330 <__divmodhi4_exit>:
    1330:	08 95       	ret

00001332 <__udivmodsi4>:
    1332:	a1 e2       	ldi	r26, 0x21	; 33
    1334:	1a 2e       	mov	r1, r26
    1336:	aa 1b       	sub	r26, r26
    1338:	bb 1b       	sub	r27, r27
    133a:	fd 01       	movw	r30, r26
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <__udivmodsi4_ep>

0000133e <__udivmodsi4_loop>:
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	ee 1f       	adc	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	a2 17       	cp	r26, r18
    1348:	b3 07       	cpc	r27, r19
    134a:	e4 07       	cpc	r30, r20
    134c:	f5 07       	cpc	r31, r21
    134e:	20 f0       	brcs	.+8      	; 0x1358 <__udivmodsi4_ep>
    1350:	a2 1b       	sub	r26, r18
    1352:	b3 0b       	sbc	r27, r19
    1354:	e4 0b       	sbc	r30, r20
    1356:	f5 0b       	sbc	r31, r21

00001358 <__udivmodsi4_ep>:
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	1a 94       	dec	r1
    1362:	69 f7       	brne	.-38     	; 0x133e <__udivmodsi4_loop>
    1364:	60 95       	com	r22
    1366:	70 95       	com	r23
    1368:	80 95       	com	r24
    136a:	90 95       	com	r25
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	bd 01       	movw	r22, r26
    1372:	cf 01       	movw	r24, r30
    1374:	08 95       	ret

00001376 <strtol>:
    1376:	a0 e0       	ldi	r26, 0x00	; 0
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e0 ec       	ldi	r30, 0xC0	; 192
    137c:	f9 e0       	ldi	r31, 0x09	; 9
    137e:	07 c4       	rjmp	.+2062   	; 0x1b8e <__prologue_saves__+0x2>
    1380:	5c 01       	movw	r10, r24
    1382:	6b 01       	movw	r12, r22
    1384:	7a 01       	movw	r14, r20
    1386:	61 15       	cp	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <strtol+0x1c>
    138c:	fb 01       	movw	r30, r22
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	29 f0       	breq	.+10     	; 0x13a2 <strtol+0x2c>
    1398:	c7 01       	movw	r24, r14
    139a:	02 97       	sbiw	r24, 0x02	; 2
    139c:	83 97       	sbiw	r24, 0x23	; 35
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <strtol+0x2c>
    13a0:	e2 c0       	rjmp	.+452    	; 0x1566 <strtol+0x1f0>
    13a2:	e5 01       	movw	r28, r10
    13a4:	21 96       	adiw	r28, 0x01	; 1
    13a6:	f5 01       	movw	r30, r10
    13a8:	10 81       	ld	r17, Z
    13aa:	81 2f       	mov	r24, r17
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	f4 d0       	rcall	.+488    	; 0x1598 <isspace>
    13b0:	89 2b       	or	r24, r25
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <strtol+0x42>
    13b4:	5e 01       	movw	r10, r28
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <strtol+0x2c>
    13b8:	1d 32       	cpi	r17, 0x2D	; 45
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <strtol+0x50>
    13bc:	21 96       	adiw	r28, 0x01	; 1
    13be:	f5 01       	movw	r30, r10
    13c0:	11 81       	ldd	r17, Z+1	; 0x01
    13c2:	01 e0       	ldi	r16, 0x01	; 1
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <strtol+0x5e>
    13c6:	1b 32       	cpi	r17, 0x2B	; 43
    13c8:	21 f4       	brne	.+8      	; 0x13d2 <strtol+0x5c>
    13ca:	e5 01       	movw	r28, r10
    13cc:	22 96       	adiw	r28, 0x02	; 2
    13ce:	f5 01       	movw	r30, r10
    13d0:	11 81       	ldd	r17, Z+1	; 0x01
    13d2:	00 e0       	ldi	r16, 0x00	; 0
    13d4:	e1 14       	cp	r14, r1
    13d6:	f1 04       	cpc	r15, r1
    13d8:	09 f1       	breq	.+66     	; 0x141c <strtol+0xa6>
    13da:	f0 e1       	ldi	r31, 0x10	; 16
    13dc:	ef 16       	cp	r14, r31
    13de:	f1 04       	cpc	r15, r1
    13e0:	29 f4       	brne	.+10     	; 0x13ec <strtol+0x76>
    13e2:	3e c0       	rjmp	.+124    	; 0x1460 <strtol+0xea>
    13e4:	10 e3       	ldi	r17, 0x30	; 48
    13e6:	e1 14       	cp	r14, r1
    13e8:	f1 04       	cpc	r15, r1
    13ea:	21 f1       	breq	.+72     	; 0x1434 <strtol+0xbe>
    13ec:	28 e0       	ldi	r18, 0x08	; 8
    13ee:	e2 16       	cp	r14, r18
    13f0:	f1 04       	cpc	r15, r1
    13f2:	01 f1       	breq	.+64     	; 0x1434 <strtol+0xbe>
    13f4:	54 f4       	brge	.+20     	; 0x140a <strtol+0x94>
    13f6:	e2 e0       	ldi	r30, 0x02	; 2
    13f8:	ee 16       	cp	r14, r30
    13fa:	f1 04       	cpc	r15, r1
    13fc:	21 f5       	brne	.+72     	; 0x1446 <strtol+0xd0>
    13fe:	81 2c       	mov	r8, r1
    1400:	91 2c       	mov	r9, r1
    1402:	a1 2c       	mov	r10, r1
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	bb 2e       	mov	r11, r27
    1408:	3d c0       	rjmp	.+122    	; 0x1484 <strtol+0x10e>
    140a:	fa e0       	ldi	r31, 0x0A	; 10
    140c:	ef 16       	cp	r14, r31
    140e:	f1 04       	cpc	r15, r1
    1410:	39 f0       	breq	.+14     	; 0x1420 <strtol+0xaa>
    1412:	20 e1       	ldi	r18, 0x10	; 16
    1414:	e2 16       	cp	r14, r18
    1416:	f1 04       	cpc	r15, r1
    1418:	b1 f4       	brne	.+44     	; 0x1446 <strtol+0xd0>
    141a:	2f c0       	rjmp	.+94     	; 0x147a <strtol+0x104>
    141c:	10 33       	cpi	r17, 0x30	; 48
    141e:	11 f1       	breq	.+68     	; 0x1464 <strtol+0xee>
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	ef 2e       	mov	r14, r31
    1424:	f1 2c       	mov	r15, r1
    1426:	ac ec       	ldi	r26, 0xCC	; 204
    1428:	8a 2e       	mov	r8, r26
    142a:	98 2c       	mov	r9, r8
    142c:	a8 2c       	mov	r10, r8
    142e:	ac e0       	ldi	r26, 0x0C	; 12
    1430:	ba 2e       	mov	r11, r26
    1432:	28 c0       	rjmp	.+80     	; 0x1484 <strtol+0x10e>
    1434:	78 e0       	ldi	r23, 0x08	; 8
    1436:	e7 2e       	mov	r14, r23
    1438:	f1 2c       	mov	r15, r1
    143a:	81 2c       	mov	r8, r1
    143c:	91 2c       	mov	r9, r1
    143e:	a1 2c       	mov	r10, r1
    1440:	e0 e1       	ldi	r30, 0x10	; 16
    1442:	be 2e       	mov	r11, r30
    1444:	1f c0       	rjmp	.+62     	; 0x1484 <strtol+0x10e>
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e8       	ldi	r25, 0x80	; 128
    144e:	97 01       	movw	r18, r14
    1450:	0f 2c       	mov	r0, r15
    1452:	00 0c       	add	r0, r0
    1454:	44 0b       	sbc	r20, r20
    1456:	55 0b       	sbc	r21, r21
    1458:	6c df       	rcall	.-296    	; 0x1332 <__udivmodsi4>
    145a:	49 01       	movw	r8, r18
    145c:	5a 01       	movw	r10, r20
    145e:	12 c0       	rjmp	.+36     	; 0x1484 <strtol+0x10e>
    1460:	10 33       	cpi	r17, 0x30	; 48
    1462:	59 f4       	brne	.+22     	; 0x147a <strtol+0x104>
    1464:	88 81       	ld	r24, Y
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	88 35       	cpi	r24, 0x58	; 88
    146a:	09 f0       	breq	.+2      	; 0x146e <strtol+0xf8>
    146c:	bb cf       	rjmp	.-138    	; 0x13e4 <strtol+0x6e>
    146e:	19 81       	ldd	r17, Y+1	; 0x01
    1470:	22 96       	adiw	r28, 0x02	; 2
    1472:	02 60       	ori	r16, 0x02	; 2
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	e8 2e       	mov	r14, r24
    1478:	f1 2c       	mov	r15, r1
    147a:	81 2c       	mov	r8, r1
    147c:	91 2c       	mov	r9, r1
    147e:	a1 2c       	mov	r10, r1
    1480:	68 e0       	ldi	r22, 0x08	; 8
    1482:	b6 2e       	mov	r11, r22
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	cb 01       	movw	r24, r22
    148c:	27 01       	movw	r4, r14
    148e:	0f 2c       	mov	r0, r15
    1490:	00 0c       	add	r0, r0
    1492:	66 08       	sbc	r6, r6
    1494:	77 08       	sbc	r7, r7
    1496:	fe 01       	movw	r30, r28
    1498:	50 ed       	ldi	r21, 0xD0	; 208
    149a:	35 2e       	mov	r3, r21
    149c:	31 0e       	add	r3, r17
    149e:	29 e0       	ldi	r18, 0x09	; 9
    14a0:	23 15       	cp	r18, r3
    14a2:	70 f4       	brcc	.+28     	; 0x14c0 <strtol+0x14a>
    14a4:	2f eb       	ldi	r18, 0xBF	; 191
    14a6:	21 0f       	add	r18, r17
    14a8:	2a 31       	cpi	r18, 0x1A	; 26
    14aa:	18 f4       	brcc	.+6      	; 0x14b2 <strtol+0x13c>
    14ac:	39 ec       	ldi	r19, 0xC9	; 201
    14ae:	33 2e       	mov	r3, r19
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <strtol+0x148>
    14b2:	2f e9       	ldi	r18, 0x9F	; 159
    14b4:	21 0f       	add	r18, r17
    14b6:	2a 31       	cpi	r18, 0x1A	; 26
    14b8:	10 f5       	brcc	.+68     	; 0x14fe <strtol+0x188>
    14ba:	29 ea       	ldi	r18, 0xA9	; 169
    14bc:	32 2e       	mov	r3, r18
    14be:	31 0e       	add	r3, r17
    14c0:	23 2d       	mov	r18, r3
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	2e 15       	cp	r18, r14
    14c6:	3f 05       	cpc	r19, r15
    14c8:	d4 f4       	brge	.+52     	; 0x14fe <strtol+0x188>
    14ca:	47 fd       	sbrc	r20, 7
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <strtol+0x182>
    14ce:	86 16       	cp	r8, r22
    14d0:	97 06       	cpc	r9, r23
    14d2:	a8 06       	cpc	r10, r24
    14d4:	b9 06       	cpc	r11, r25
    14d6:	68 f0       	brcs	.+26     	; 0x14f2 <strtol+0x17c>
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	3e d3       	rcall	.+1660   	; 0x1b5a <__mulsi3>
    14de:	63 0d       	add	r22, r3
    14e0:	71 1d       	adc	r23, r1
    14e2:	81 1d       	adc	r24, r1
    14e4:	91 1d       	adc	r25, r1
    14e6:	61 30       	cpi	r22, 0x01	; 1
    14e8:	71 05       	cpc	r23, r1
    14ea:	81 05       	cpc	r24, r1
    14ec:	20 e8       	ldi	r18, 0x80	; 128
    14ee:	92 07       	cpc	r25, r18
    14f0:	10 f0       	brcs	.+4      	; 0x14f6 <strtol+0x180>
    14f2:	4f ef       	ldi	r20, 0xFF	; 255
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <strtol+0x182>
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	21 96       	adiw	r28, 0x01	; 1
    14fa:	10 81       	ld	r17, Z
    14fc:	cc cf       	rjmp	.-104    	; 0x1496 <strtol+0x120>
    14fe:	20 2f       	mov	r18, r16
    1500:	21 70       	andi	r18, 0x01	; 1
    1502:	c1 14       	cp	r12, r1
    1504:	d1 04       	cpc	r13, r1
    1506:	71 f0       	breq	.+28     	; 0x1524 <strtol+0x1ae>
    1508:	44 23       	and	r20, r20
    150a:	29 f0       	breq	.+10     	; 0x1516 <strtol+0x1a0>
    150c:	21 97       	sbiw	r28, 0x01	; 1
    150e:	f6 01       	movw	r30, r12
    1510:	d1 83       	std	Z+1, r29	; 0x01
    1512:	c0 83       	st	Z, r28
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <strtol+0x1ae>
    1516:	01 ff       	sbrs	r16, 1
    1518:	19 c0       	rjmp	.+50     	; 0x154c <strtol+0x1d6>
    151a:	22 97       	sbiw	r28, 0x02	; 2
    151c:	f6 01       	movw	r30, r12
    151e:	d1 83       	std	Z+1, r29	; 0x01
    1520:	c0 83       	st	Z, r28
    1522:	14 c0       	rjmp	.+40     	; 0x154c <strtol+0x1d6>
    1524:	47 ff       	sbrs	r20, 7
    1526:	12 c0       	rjmp	.+36     	; 0x154c <strtol+0x1d6>
    1528:	22 23       	and	r18, r18
    152a:	29 f0       	breq	.+10     	; 0x1536 <strtol+0x1c0>
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e8       	ldi	r25, 0x80	; 128
    1534:	04 c0       	rjmp	.+8      	; 0x153e <strtol+0x1c8>
    1536:	6f ef       	ldi	r22, 0xFF	; 255
    1538:	7f ef       	ldi	r23, 0xFF	; 255
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f e7       	ldi	r25, 0x7F	; 127
    153e:	22 e2       	ldi	r18, 0x22	; 34
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <errno+0x1>
    1546:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <errno>
    154a:	09 c0       	rjmp	.+18     	; 0x155e <strtol+0x1e8>
    154c:	22 23       	and	r18, r18
    154e:	81 f0       	breq	.+32     	; 0x1570 <strtol+0x1fa>
    1550:	90 95       	com	r25
    1552:	80 95       	com	r24
    1554:	70 95       	com	r23
    1556:	61 95       	neg	r22
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	8f 4f       	sbci	r24, 0xFF	; 255
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	46 2f       	mov	r20, r22
    1560:	37 2f       	mov	r19, r23
    1562:	28 2f       	mov	r18, r24
    1564:	12 c0       	rjmp	.+36     	; 0x158a <strtol+0x214>
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0d c0       	rjmp	.+26     	; 0x158a <strtol+0x214>
    1570:	97 ff       	sbrs	r25, 7
    1572:	f5 cf       	rjmp	.-22     	; 0x155e <strtol+0x1e8>
    1574:	82 e2       	ldi	r24, 0x22	; 34
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <errno+0x1>
    157c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <errno>
    1580:	6f ef       	ldi	r22, 0xFF	; 255
    1582:	7f ef       	ldi	r23, 0xFF	; 255
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	9f e7       	ldi	r25, 0x7F	; 127
    1588:	ea cf       	rjmp	.-44     	; 0x155e <strtol+0x1e8>
    158a:	64 2f       	mov	r22, r20
    158c:	73 2f       	mov	r23, r19
    158e:	82 2f       	mov	r24, r18
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	e1 e1       	ldi	r30, 0x11	; 17
    1596:	17 c3       	rjmp	.+1582   	; 0x1bc6 <__epilogue_restores__+0x2>

00001598 <isspace>:
    1598:	91 11       	cpse	r25, r1
    159a:	2c c2       	rjmp	.+1112   	; 0x19f4 <__ctype_isfalse>
    159c:	80 32       	cpi	r24, 0x20	; 32
    159e:	19 f0       	breq	.+6      	; 0x15a6 <isspace+0xe>
    15a0:	89 50       	subi	r24, 0x09	; 9
    15a2:	85 50       	subi	r24, 0x05	; 5
    15a4:	d0 f7       	brcc	.-12     	; 0x159a <isspace+0x2>
    15a6:	08 95       	ret

000015a8 <memcpy>:
    15a8:	fb 01       	movw	r30, r22
    15aa:	dc 01       	movw	r26, r24
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <memcpy+0xa>
    15ae:	01 90       	ld	r0, Z+
    15b0:	0d 92       	st	X+, r0
    15b2:	41 50       	subi	r20, 0x01	; 1
    15b4:	50 40       	sbci	r21, 0x00	; 0
    15b6:	d8 f7       	brcc	.-10     	; 0x15ae <memcpy+0x6>
    15b8:	08 95       	ret

000015ba <memset>:
    15ba:	dc 01       	movw	r26, r24
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <memset+0x6>
    15be:	6d 93       	st	X+, r22
    15c0:	41 50       	subi	r20, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
    15c4:	e0 f7       	brcc	.-8      	; 0x15be <memset+0x4>
    15c6:	08 95       	ret

000015c8 <strchr>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	81 91       	ld	r24, Z+
    15cc:	86 17       	cp	r24, r22
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <strchr+0x10>
    15d0:	88 23       	and	r24, r24
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <strchr+0x2>
    15d4:	99 27       	eor	r25, r25
    15d6:	08 95       	ret
    15d8:	31 97       	sbiw	r30, 0x01	; 1
    15da:	cf 01       	movw	r24, r30
    15dc:	08 95       	ret

000015de <strstr>:
    15de:	fb 01       	movw	r30, r22
    15e0:	51 91       	ld	r21, Z+
    15e2:	55 23       	and	r21, r21
    15e4:	a9 f0       	breq	.+42     	; 0x1610 <strstr+0x32>
    15e6:	bf 01       	movw	r22, r30
    15e8:	dc 01       	movw	r26, r24
    15ea:	4d 91       	ld	r20, X+
    15ec:	45 17       	cp	r20, r21
    15ee:	41 11       	cpse	r20, r1
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <strstr+0xc>
    15f2:	59 f4       	brne	.+22     	; 0x160a <strstr+0x2c>
    15f4:	cd 01       	movw	r24, r26
    15f6:	01 90       	ld	r0, Z+
    15f8:	00 20       	and	r0, r0
    15fa:	49 f0       	breq	.+18     	; 0x160e <strstr+0x30>
    15fc:	4d 91       	ld	r20, X+
    15fe:	40 15       	cp	r20, r0
    1600:	41 11       	cpse	r20, r1
    1602:	c9 f3       	breq	.-14     	; 0x15f6 <strstr+0x18>
    1604:	fb 01       	movw	r30, r22
    1606:	41 11       	cpse	r20, r1
    1608:	ef cf       	rjmp	.-34     	; 0x15e8 <strstr+0xa>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	08 95       	ret

00001612 <sprintf>:
    1612:	ae e0       	ldi	r26, 0x0E	; 14
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ee e0       	ldi	r30, 0x0E	; 14
    1618:	fb e0       	ldi	r31, 0x0B	; 11
    161a:	c6 c2       	rjmp	.+1420   	; 0x1ba8 <__prologue_saves__+0x1c>
    161c:	0d 89       	ldd	r16, Y+21	; 0x15
    161e:	1e 89       	ldd	r17, Y+22	; 0x16
    1620:	86 e0       	ldi	r24, 0x06	; 6
    1622:	8c 83       	std	Y+4, r24	; 0x04
    1624:	1a 83       	std	Y+2, r17	; 0x02
    1626:	09 83       	std	Y+1, r16	; 0x01
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9f e7       	ldi	r25, 0x7F	; 127
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	ae 01       	movw	r20, r28
    1632:	47 5e       	subi	r20, 0xE7	; 231
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	6f 89       	ldd	r22, Y+23	; 0x17
    1638:	78 8d       	ldd	r23, Y+24	; 0x18
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	08 d0       	rcall	.+16     	; 0x1650 <vfprintf>
    1640:	ef 81       	ldd	r30, Y+7	; 0x07
    1642:	f8 85       	ldd	r31, Y+8	; 0x08
    1644:	e0 0f       	add	r30, r16
    1646:	f1 1f       	adc	r31, r17
    1648:	10 82       	st	Z, r1
    164a:	2e 96       	adiw	r28, 0x0e	; 14
    164c:	e4 e0       	ldi	r30, 0x04	; 4
    164e:	c8 c2       	rjmp	.+1424   	; 0x1be0 <__epilogue_restores__+0x1c>

00001650 <vfprintf>:
    1650:	ab e0       	ldi	r26, 0x0B	; 11
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ed e2       	ldi	r30, 0x2D	; 45
    1656:	fb e0       	ldi	r31, 0x0B	; 11
    1658:	99 c2       	rjmp	.+1330   	; 0x1b8c <__prologue_saves__>
    165a:	6c 01       	movw	r12, r24
    165c:	7b 01       	movw	r14, r22
    165e:	8a 01       	movw	r16, r20
    1660:	fc 01       	movw	r30, r24
    1662:	17 82       	std	Z+7, r1	; 0x07
    1664:	16 82       	std	Z+6, r1	; 0x06
    1666:	83 81       	ldd	r24, Z+3	; 0x03
    1668:	81 ff       	sbrs	r24, 1
    166a:	bf c1       	rjmp	.+894    	; 0x19ea <vfprintf+0x39a>
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	3c 01       	movw	r6, r24
    1672:	f6 01       	movw	r30, r12
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	f7 01       	movw	r30, r14
    1678:	93 fd       	sbrc	r25, 3
    167a:	85 91       	lpm	r24, Z+
    167c:	93 ff       	sbrs	r25, 3
    167e:	81 91       	ld	r24, Z+
    1680:	7f 01       	movw	r14, r30
    1682:	88 23       	and	r24, r24
    1684:	09 f4       	brne	.+2      	; 0x1688 <vfprintf+0x38>
    1686:	ad c1       	rjmp	.+858    	; 0x19e2 <vfprintf+0x392>
    1688:	85 32       	cpi	r24, 0x25	; 37
    168a:	39 f4       	brne	.+14     	; 0x169a <vfprintf+0x4a>
    168c:	93 fd       	sbrc	r25, 3
    168e:	85 91       	lpm	r24, Z+
    1690:	93 ff       	sbrs	r25, 3
    1692:	81 91       	ld	r24, Z+
    1694:	7f 01       	movw	r14, r30
    1696:	85 32       	cpi	r24, 0x25	; 37
    1698:	21 f4       	brne	.+8      	; 0x16a2 <vfprintf+0x52>
    169a:	b6 01       	movw	r22, r12
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	c3 d1       	rcall	.+902    	; 0x1a26 <fputc>
    16a0:	e8 cf       	rjmp	.-48     	; 0x1672 <vfprintf+0x22>
    16a2:	91 2c       	mov	r9, r1
    16a4:	21 2c       	mov	r2, r1
    16a6:	31 2c       	mov	r3, r1
    16a8:	ff e1       	ldi	r31, 0x1F	; 31
    16aa:	f3 15       	cp	r31, r3
    16ac:	d8 f0       	brcs	.+54     	; 0x16e4 <vfprintf+0x94>
    16ae:	8b 32       	cpi	r24, 0x2B	; 43
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <vfprintf+0x80>
    16b2:	38 f4       	brcc	.+14     	; 0x16c2 <vfprintf+0x72>
    16b4:	80 32       	cpi	r24, 0x20	; 32
    16b6:	79 f0       	breq	.+30     	; 0x16d6 <vfprintf+0x86>
    16b8:	83 32       	cpi	r24, 0x23	; 35
    16ba:	a1 f4       	brne	.+40     	; 0x16e4 <vfprintf+0x94>
    16bc:	23 2d       	mov	r18, r3
    16be:	20 61       	ori	r18, 0x10	; 16
    16c0:	1d c0       	rjmp	.+58     	; 0x16fc <vfprintf+0xac>
    16c2:	8d 32       	cpi	r24, 0x2D	; 45
    16c4:	61 f0       	breq	.+24     	; 0x16de <vfprintf+0x8e>
    16c6:	80 33       	cpi	r24, 0x30	; 48
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <vfprintf+0x94>
    16ca:	23 2d       	mov	r18, r3
    16cc:	21 60       	ori	r18, 0x01	; 1
    16ce:	16 c0       	rjmp	.+44     	; 0x16fc <vfprintf+0xac>
    16d0:	83 2d       	mov	r24, r3
    16d2:	82 60       	ori	r24, 0x02	; 2
    16d4:	38 2e       	mov	r3, r24
    16d6:	e3 2d       	mov	r30, r3
    16d8:	e4 60       	ori	r30, 0x04	; 4
    16da:	3e 2e       	mov	r3, r30
    16dc:	2a c0       	rjmp	.+84     	; 0x1732 <vfprintf+0xe2>
    16de:	f3 2d       	mov	r31, r3
    16e0:	f8 60       	ori	r31, 0x08	; 8
    16e2:	1d c0       	rjmp	.+58     	; 0x171e <vfprintf+0xce>
    16e4:	37 fc       	sbrc	r3, 7
    16e6:	2d c0       	rjmp	.+90     	; 0x1742 <vfprintf+0xf2>
    16e8:	20 ed       	ldi	r18, 0xD0	; 208
    16ea:	28 0f       	add	r18, r24
    16ec:	2a 30       	cpi	r18, 0x0A	; 10
    16ee:	40 f0       	brcs	.+16     	; 0x1700 <vfprintf+0xb0>
    16f0:	8e 32       	cpi	r24, 0x2E	; 46
    16f2:	b9 f4       	brne	.+46     	; 0x1722 <vfprintf+0xd2>
    16f4:	36 fc       	sbrc	r3, 6
    16f6:	75 c1       	rjmp	.+746    	; 0x19e2 <vfprintf+0x392>
    16f8:	23 2d       	mov	r18, r3
    16fa:	20 64       	ori	r18, 0x40	; 64
    16fc:	32 2e       	mov	r3, r18
    16fe:	19 c0       	rjmp	.+50     	; 0x1732 <vfprintf+0xe2>
    1700:	36 fe       	sbrs	r3, 6
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <vfprintf+0xc0>
    1704:	8a e0       	ldi	r24, 0x0A	; 10
    1706:	98 9e       	mul	r9, r24
    1708:	20 0d       	add	r18, r0
    170a:	11 24       	eor	r1, r1
    170c:	92 2e       	mov	r9, r18
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <vfprintf+0xe2>
    1710:	ea e0       	ldi	r30, 0x0A	; 10
    1712:	2e 9e       	mul	r2, r30
    1714:	20 0d       	add	r18, r0
    1716:	11 24       	eor	r1, r1
    1718:	22 2e       	mov	r2, r18
    171a:	f3 2d       	mov	r31, r3
    171c:	f0 62       	ori	r31, 0x20	; 32
    171e:	3f 2e       	mov	r3, r31
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <vfprintf+0xe2>
    1722:	8c 36       	cpi	r24, 0x6C	; 108
    1724:	21 f4       	brne	.+8      	; 0x172e <vfprintf+0xde>
    1726:	83 2d       	mov	r24, r3
    1728:	80 68       	ori	r24, 0x80	; 128
    172a:	38 2e       	mov	r3, r24
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <vfprintf+0xe2>
    172e:	88 36       	cpi	r24, 0x68	; 104
    1730:	41 f4       	brne	.+16     	; 0x1742 <vfprintf+0xf2>
    1732:	f7 01       	movw	r30, r14
    1734:	93 fd       	sbrc	r25, 3
    1736:	85 91       	lpm	r24, Z+
    1738:	93 ff       	sbrs	r25, 3
    173a:	81 91       	ld	r24, Z+
    173c:	7f 01       	movw	r14, r30
    173e:	81 11       	cpse	r24, r1
    1740:	b3 cf       	rjmp	.-154    	; 0x16a8 <vfprintf+0x58>
    1742:	98 2f       	mov	r25, r24
    1744:	9f 7d       	andi	r25, 0xDF	; 223
    1746:	95 54       	subi	r25, 0x45	; 69
    1748:	93 30       	cpi	r25, 0x03	; 3
    174a:	28 f4       	brcc	.+10     	; 0x1756 <vfprintf+0x106>
    174c:	0c 5f       	subi	r16, 0xFC	; 252
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	9f e3       	ldi	r25, 0x3F	; 63
    1752:	99 83       	std	Y+1, r25	; 0x01
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <vfprintf+0x120>
    1756:	83 36       	cpi	r24, 0x63	; 99
    1758:	31 f0       	breq	.+12     	; 0x1766 <vfprintf+0x116>
    175a:	83 37       	cpi	r24, 0x73	; 115
    175c:	71 f0       	breq	.+28     	; 0x177a <vfprintf+0x12a>
    175e:	83 35       	cpi	r24, 0x53	; 83
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x114>
    1762:	55 c0       	rjmp	.+170    	; 0x180e <vfprintf+0x1be>
    1764:	20 c0       	rjmp	.+64     	; 0x17a6 <vfprintf+0x156>
    1766:	f8 01       	movw	r30, r16
    1768:	80 81       	ld	r24, Z
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	0e 5f       	subi	r16, 0xFE	; 254
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	88 24       	eor	r8, r8
    1772:	83 94       	inc	r8
    1774:	91 2c       	mov	r9, r1
    1776:	53 01       	movw	r10, r6
    1778:	12 c0       	rjmp	.+36     	; 0x179e <vfprintf+0x14e>
    177a:	28 01       	movw	r4, r16
    177c:	f2 e0       	ldi	r31, 0x02	; 2
    177e:	4f 0e       	add	r4, r31
    1780:	51 1c       	adc	r5, r1
    1782:	f8 01       	movw	r30, r16
    1784:	a0 80       	ld	r10, Z
    1786:	b1 80       	ldd	r11, Z+1	; 0x01
    1788:	36 fe       	sbrs	r3, 6
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <vfprintf+0x142>
    178c:	69 2d       	mov	r22, r9
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x146>
    1792:	6f ef       	ldi	r22, 0xFF	; 255
    1794:	7f ef       	ldi	r23, 0xFF	; 255
    1796:	c5 01       	movw	r24, r10
    1798:	3b d1       	rcall	.+630    	; 0x1a10 <strnlen>
    179a:	4c 01       	movw	r8, r24
    179c:	82 01       	movw	r16, r4
    179e:	f3 2d       	mov	r31, r3
    17a0:	ff 77       	andi	r31, 0x7F	; 127
    17a2:	3f 2e       	mov	r3, r31
    17a4:	15 c0       	rjmp	.+42     	; 0x17d0 <vfprintf+0x180>
    17a6:	28 01       	movw	r4, r16
    17a8:	22 e0       	ldi	r18, 0x02	; 2
    17aa:	42 0e       	add	r4, r18
    17ac:	51 1c       	adc	r5, r1
    17ae:	f8 01       	movw	r30, r16
    17b0:	a0 80       	ld	r10, Z
    17b2:	b1 80       	ldd	r11, Z+1	; 0x01
    17b4:	36 fe       	sbrs	r3, 6
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <vfprintf+0x16e>
    17b8:	69 2d       	mov	r22, r9
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <vfprintf+0x172>
    17be:	6f ef       	ldi	r22, 0xFF	; 255
    17c0:	7f ef       	ldi	r23, 0xFF	; 255
    17c2:	c5 01       	movw	r24, r10
    17c4:	1a d1       	rcall	.+564    	; 0x19fa <strnlen_P>
    17c6:	4c 01       	movw	r8, r24
    17c8:	f3 2d       	mov	r31, r3
    17ca:	f0 68       	ori	r31, 0x80	; 128
    17cc:	3f 2e       	mov	r3, r31
    17ce:	82 01       	movw	r16, r4
    17d0:	33 fc       	sbrc	r3, 3
    17d2:	19 c0       	rjmp	.+50     	; 0x1806 <vfprintf+0x1b6>
    17d4:	82 2d       	mov	r24, r2
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	88 16       	cp	r8, r24
    17da:	99 06       	cpc	r9, r25
    17dc:	a0 f4       	brcc	.+40     	; 0x1806 <vfprintf+0x1b6>
    17de:	b6 01       	movw	r22, r12
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	20 d1       	rcall	.+576    	; 0x1a26 <fputc>
    17e6:	2a 94       	dec	r2
    17e8:	f5 cf       	rjmp	.-22     	; 0x17d4 <vfprintf+0x184>
    17ea:	f5 01       	movw	r30, r10
    17ec:	37 fc       	sbrc	r3, 7
    17ee:	85 91       	lpm	r24, Z+
    17f0:	37 fe       	sbrs	r3, 7
    17f2:	81 91       	ld	r24, Z+
    17f4:	5f 01       	movw	r10, r30
    17f6:	b6 01       	movw	r22, r12
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	15 d1       	rcall	.+554    	; 0x1a26 <fputc>
    17fc:	21 10       	cpse	r2, r1
    17fe:	2a 94       	dec	r2
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	82 1a       	sub	r8, r18
    1804:	91 08       	sbc	r9, r1
    1806:	81 14       	cp	r8, r1
    1808:	91 04       	cpc	r9, r1
    180a:	79 f7       	brne	.-34     	; 0x17ea <vfprintf+0x19a>
    180c:	e1 c0       	rjmp	.+450    	; 0x19d0 <vfprintf+0x380>
    180e:	84 36       	cpi	r24, 0x64	; 100
    1810:	11 f0       	breq	.+4      	; 0x1816 <vfprintf+0x1c6>
    1812:	89 36       	cpi	r24, 0x69	; 105
    1814:	39 f5       	brne	.+78     	; 0x1864 <vfprintf+0x214>
    1816:	f8 01       	movw	r30, r16
    1818:	37 fe       	sbrs	r3, 7
    181a:	07 c0       	rjmp	.+14     	; 0x182a <vfprintf+0x1da>
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	0c 5f       	subi	r16, 0xFC	; 252
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	08 c0       	rjmp	.+16     	; 0x183a <vfprintf+0x1ea>
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	07 2e       	mov	r0, r23
    1830:	00 0c       	add	r0, r0
    1832:	88 0b       	sbc	r24, r24
    1834:	99 0b       	sbc	r25, r25
    1836:	0e 5f       	subi	r16, 0xFE	; 254
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	f3 2d       	mov	r31, r3
    183c:	ff 76       	andi	r31, 0x6F	; 111
    183e:	3f 2e       	mov	r3, r31
    1840:	97 ff       	sbrs	r25, 7
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <vfprintf+0x206>
    1844:	90 95       	com	r25
    1846:	80 95       	com	r24
    1848:	70 95       	com	r23
    184a:	61 95       	neg	r22
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	8f 4f       	sbci	r24, 0xFF	; 255
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	f0 68       	ori	r31, 0x80	; 128
    1854:	3f 2e       	mov	r3, r31
    1856:	2a e0       	ldi	r18, 0x0A	; 10
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	a3 01       	movw	r20, r6
    185c:	20 d1       	rcall	.+576    	; 0x1a9e <__ultoa_invert>
    185e:	88 2e       	mov	r8, r24
    1860:	86 18       	sub	r8, r6
    1862:	44 c0       	rjmp	.+136    	; 0x18ec <vfprintf+0x29c>
    1864:	85 37       	cpi	r24, 0x75	; 117
    1866:	31 f4       	brne	.+12     	; 0x1874 <vfprintf+0x224>
    1868:	23 2d       	mov	r18, r3
    186a:	2f 7e       	andi	r18, 0xEF	; 239
    186c:	b2 2e       	mov	r11, r18
    186e:	2a e0       	ldi	r18, 0x0A	; 10
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	25 c0       	rjmp	.+74     	; 0x18be <vfprintf+0x26e>
    1874:	93 2d       	mov	r25, r3
    1876:	99 7f       	andi	r25, 0xF9	; 249
    1878:	b9 2e       	mov	r11, r25
    187a:	8f 36       	cpi	r24, 0x6F	; 111
    187c:	c1 f0       	breq	.+48     	; 0x18ae <vfprintf+0x25e>
    187e:	18 f4       	brcc	.+6      	; 0x1886 <vfprintf+0x236>
    1880:	88 35       	cpi	r24, 0x58	; 88
    1882:	79 f0       	breq	.+30     	; 0x18a2 <vfprintf+0x252>
    1884:	ae c0       	rjmp	.+348    	; 0x19e2 <vfprintf+0x392>
    1886:	80 37       	cpi	r24, 0x70	; 112
    1888:	19 f0       	breq	.+6      	; 0x1890 <vfprintf+0x240>
    188a:	88 37       	cpi	r24, 0x78	; 120
    188c:	21 f0       	breq	.+8      	; 0x1896 <vfprintf+0x246>
    188e:	a9 c0       	rjmp	.+338    	; 0x19e2 <vfprintf+0x392>
    1890:	e9 2f       	mov	r30, r25
    1892:	e0 61       	ori	r30, 0x10	; 16
    1894:	be 2e       	mov	r11, r30
    1896:	b4 fe       	sbrs	r11, 4
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <vfprintf+0x264>
    189a:	fb 2d       	mov	r31, r11
    189c:	f4 60       	ori	r31, 0x04	; 4
    189e:	bf 2e       	mov	r11, r31
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <vfprintf+0x264>
    18a2:	34 fe       	sbrs	r3, 4
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <vfprintf+0x26a>
    18a6:	29 2f       	mov	r18, r25
    18a8:	26 60       	ori	r18, 0x06	; 6
    18aa:	b2 2e       	mov	r11, r18
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <vfprintf+0x26a>
    18ae:	28 e0       	ldi	r18, 0x08	; 8
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <vfprintf+0x26e>
    18b4:	20 e1       	ldi	r18, 0x10	; 16
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <vfprintf+0x26e>
    18ba:	20 e1       	ldi	r18, 0x10	; 16
    18bc:	32 e0       	ldi	r19, 0x02	; 2
    18be:	f8 01       	movw	r30, r16
    18c0:	b7 fe       	sbrs	r11, 7
    18c2:	07 c0       	rjmp	.+14     	; 0x18d2 <vfprintf+0x282>
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	0c 5f       	subi	r16, 0xFC	; 252
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x28e>
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 5f       	subi	r16, 0xFE	; 254
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	a3 01       	movw	r20, r6
    18e0:	de d0       	rcall	.+444    	; 0x1a9e <__ultoa_invert>
    18e2:	88 2e       	mov	r8, r24
    18e4:	86 18       	sub	r8, r6
    18e6:	fb 2d       	mov	r31, r11
    18e8:	ff 77       	andi	r31, 0x7F	; 127
    18ea:	3f 2e       	mov	r3, r31
    18ec:	36 fe       	sbrs	r3, 6
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <vfprintf+0x2ba>
    18f0:	23 2d       	mov	r18, r3
    18f2:	2e 7f       	andi	r18, 0xFE	; 254
    18f4:	a2 2e       	mov	r10, r18
    18f6:	89 14       	cp	r8, r9
    18f8:	58 f4       	brcc	.+22     	; 0x1910 <vfprintf+0x2c0>
    18fa:	34 fe       	sbrs	r3, 4
    18fc:	0b c0       	rjmp	.+22     	; 0x1914 <vfprintf+0x2c4>
    18fe:	32 fc       	sbrc	r3, 2
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <vfprintf+0x2c4>
    1902:	83 2d       	mov	r24, r3
    1904:	8e 7e       	andi	r24, 0xEE	; 238
    1906:	a8 2e       	mov	r10, r24
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <vfprintf+0x2c4>
    190a:	b8 2c       	mov	r11, r8
    190c:	a3 2c       	mov	r10, r3
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <vfprintf+0x2c6>
    1910:	b8 2c       	mov	r11, r8
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <vfprintf+0x2c6>
    1914:	b9 2c       	mov	r11, r9
    1916:	a4 fe       	sbrs	r10, 4
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <vfprintf+0x2e8>
    191a:	fe 01       	movw	r30, r28
    191c:	e8 0d       	add	r30, r8
    191e:	f1 1d       	adc	r31, r1
    1920:	80 81       	ld	r24, Z
    1922:	80 33       	cpi	r24, 0x30	; 48
    1924:	21 f4       	brne	.+8      	; 0x192e <vfprintf+0x2de>
    1926:	9a 2d       	mov	r25, r10
    1928:	99 7e       	andi	r25, 0xE9	; 233
    192a:	a9 2e       	mov	r10, r25
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x2f0>
    192e:	a2 fe       	sbrs	r10, 2
    1930:	06 c0       	rjmp	.+12     	; 0x193e <vfprintf+0x2ee>
    1932:	b3 94       	inc	r11
    1934:	b3 94       	inc	r11
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <vfprintf+0x2f0>
    1938:	8a 2d       	mov	r24, r10
    193a:	86 78       	andi	r24, 0x86	; 134
    193c:	09 f0       	breq	.+2      	; 0x1940 <vfprintf+0x2f0>
    193e:	b3 94       	inc	r11
    1940:	a3 fc       	sbrc	r10, 3
    1942:	10 c0       	rjmp	.+32     	; 0x1964 <vfprintf+0x314>
    1944:	a0 fe       	sbrs	r10, 0
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <vfprintf+0x304>
    1948:	b2 14       	cp	r11, r2
    194a:	80 f4       	brcc	.+32     	; 0x196c <vfprintf+0x31c>
    194c:	28 0c       	add	r2, r8
    194e:	92 2c       	mov	r9, r2
    1950:	9b 18       	sub	r9, r11
    1952:	0d c0       	rjmp	.+26     	; 0x196e <vfprintf+0x31e>
    1954:	b2 14       	cp	r11, r2
    1956:	58 f4       	brcc	.+22     	; 0x196e <vfprintf+0x31e>
    1958:	b6 01       	movw	r22, r12
    195a:	80 e2       	ldi	r24, 0x20	; 32
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	63 d0       	rcall	.+198    	; 0x1a26 <fputc>
    1960:	b3 94       	inc	r11
    1962:	f8 cf       	rjmp	.-16     	; 0x1954 <vfprintf+0x304>
    1964:	b2 14       	cp	r11, r2
    1966:	18 f4       	brcc	.+6      	; 0x196e <vfprintf+0x31e>
    1968:	2b 18       	sub	r2, r11
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x320>
    196c:	98 2c       	mov	r9, r8
    196e:	21 2c       	mov	r2, r1
    1970:	a4 fe       	sbrs	r10, 4
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <vfprintf+0x342>
    1974:	b6 01       	movw	r22, r12
    1976:	80 e3       	ldi	r24, 0x30	; 48
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	55 d0       	rcall	.+170    	; 0x1a26 <fputc>
    197c:	a2 fe       	sbrs	r10, 2
    197e:	16 c0       	rjmp	.+44     	; 0x19ac <vfprintf+0x35c>
    1980:	a1 fc       	sbrc	r10, 1
    1982:	03 c0       	rjmp	.+6      	; 0x198a <vfprintf+0x33a>
    1984:	88 e7       	ldi	r24, 0x78	; 120
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x33e>
    198a:	88 e5       	ldi	r24, 0x58	; 88
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	b6 01       	movw	r22, r12
    1990:	0c c0       	rjmp	.+24     	; 0x19aa <vfprintf+0x35a>
    1992:	8a 2d       	mov	r24, r10
    1994:	86 78       	andi	r24, 0x86	; 134
    1996:	51 f0       	breq	.+20     	; 0x19ac <vfprintf+0x35c>
    1998:	a1 fe       	sbrs	r10, 1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfprintf+0x350>
    199c:	8b e2       	ldi	r24, 0x2B	; 43
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <vfprintf+0x352>
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	a7 fc       	sbrc	r10, 7
    19a4:	8d e2       	ldi	r24, 0x2D	; 45
    19a6:	b6 01       	movw	r22, r12
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	3d d0       	rcall	.+122    	; 0x1a26 <fputc>
    19ac:	89 14       	cp	r8, r9
    19ae:	30 f4       	brcc	.+12     	; 0x19bc <vfprintf+0x36c>
    19b0:	b6 01       	movw	r22, r12
    19b2:	80 e3       	ldi	r24, 0x30	; 48
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	37 d0       	rcall	.+110    	; 0x1a26 <fputc>
    19b8:	9a 94       	dec	r9
    19ba:	f8 cf       	rjmp	.-16     	; 0x19ac <vfprintf+0x35c>
    19bc:	8a 94       	dec	r8
    19be:	f3 01       	movw	r30, r6
    19c0:	e8 0d       	add	r30, r8
    19c2:	f1 1d       	adc	r31, r1
    19c4:	80 81       	ld	r24, Z
    19c6:	b6 01       	movw	r22, r12
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	2d d0       	rcall	.+90     	; 0x1a26 <fputc>
    19cc:	81 10       	cpse	r8, r1
    19ce:	f6 cf       	rjmp	.-20     	; 0x19bc <vfprintf+0x36c>
    19d0:	22 20       	and	r2, r2
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <vfprintf+0x386>
    19d4:	4e ce       	rjmp	.-868    	; 0x1672 <vfprintf+0x22>
    19d6:	b6 01       	movw	r22, r12
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	24 d0       	rcall	.+72     	; 0x1a26 <fputc>
    19de:	2a 94       	dec	r2
    19e0:	f7 cf       	rjmp	.-18     	; 0x19d0 <vfprintf+0x380>
    19e2:	f6 01       	movw	r30, r12
    19e4:	86 81       	ldd	r24, Z+6	; 0x06
    19e6:	97 81       	ldd	r25, Z+7	; 0x07
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <vfprintf+0x39e>
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	9f ef       	ldi	r25, 0xFF	; 255
    19ee:	2b 96       	adiw	r28, 0x0b	; 11
    19f0:	e2 e1       	ldi	r30, 0x12	; 18
    19f2:	e8 c0       	rjmp	.+464    	; 0x1bc4 <__epilogue_restores__>

000019f4 <__ctype_isfalse>:
    19f4:	99 27       	eor	r25, r25
    19f6:	88 27       	eor	r24, r24

000019f8 <__ctype_istrue>:
    19f8:	08 95       	ret

000019fa <strnlen_P>:
    19fa:	fc 01       	movw	r30, r24
    19fc:	05 90       	lpm	r0, Z+
    19fe:	61 50       	subi	r22, 0x01	; 1
    1a00:	70 40       	sbci	r23, 0x00	; 0
    1a02:	01 10       	cpse	r0, r1
    1a04:	d8 f7       	brcc	.-10     	; 0x19fc <strnlen_P+0x2>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	8e 0f       	add	r24, r30
    1a0c:	9f 1f       	adc	r25, r31
    1a0e:	08 95       	ret

00001a10 <strnlen>:
    1a10:	fc 01       	movw	r30, r24
    1a12:	61 50       	subi	r22, 0x01	; 1
    1a14:	70 40       	sbci	r23, 0x00	; 0
    1a16:	01 90       	ld	r0, Z+
    1a18:	01 10       	cpse	r0, r1
    1a1a:	d8 f7       	brcc	.-10     	; 0x1a12 <strnlen+0x2>
    1a1c:	80 95       	com	r24
    1a1e:	90 95       	com	r25
    1a20:	8e 0f       	add	r24, r30
    1a22:	9f 1f       	adc	r25, r31
    1a24:	08 95       	ret

00001a26 <fputc>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	fb 01       	movw	r30, r22
    1a30:	23 81       	ldd	r18, Z+3	; 0x03
    1a32:	21 fd       	sbrc	r18, 1
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <fputc+0x16>
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	9f ef       	ldi	r25, 0xFF	; 255
    1a3a:	2c c0       	rjmp	.+88     	; 0x1a94 <fputc+0x6e>
    1a3c:	22 ff       	sbrs	r18, 2
    1a3e:	16 c0       	rjmp	.+44     	; 0x1a6c <fputc+0x46>
    1a40:	46 81       	ldd	r20, Z+6	; 0x06
    1a42:	57 81       	ldd	r21, Z+7	; 0x07
    1a44:	24 81       	ldd	r18, Z+4	; 0x04
    1a46:	35 81       	ldd	r19, Z+5	; 0x05
    1a48:	42 17       	cp	r20, r18
    1a4a:	53 07       	cpc	r21, r19
    1a4c:	44 f4       	brge	.+16     	; 0x1a5e <fputc+0x38>
    1a4e:	a0 81       	ld	r26, Z
    1a50:	b1 81       	ldd	r27, Z+1	; 0x01
    1a52:	9d 01       	movw	r18, r26
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	31 83       	std	Z+1, r19	; 0x01
    1a5a:	20 83       	st	Z, r18
    1a5c:	8c 93       	st	X, r24
    1a5e:	26 81       	ldd	r18, Z+6	; 0x06
    1a60:	37 81       	ldd	r19, Z+7	; 0x07
    1a62:	2f 5f       	subi	r18, 0xFF	; 255
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	37 83       	std	Z+7, r19	; 0x07
    1a68:	26 83       	std	Z+6, r18	; 0x06
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <fputc+0x6e>
    1a6c:	8b 01       	movw	r16, r22
    1a6e:	ec 01       	movw	r28, r24
    1a70:	fb 01       	movw	r30, r22
    1a72:	00 84       	ldd	r0, Z+8	; 0x08
    1a74:	f1 85       	ldd	r31, Z+9	; 0x09
    1a76:	e0 2d       	mov	r30, r0
    1a78:	09 95       	icall
    1a7a:	89 2b       	or	r24, r25
    1a7c:	e1 f6       	brne	.-72     	; 0x1a36 <fputc+0x10>
    1a7e:	d8 01       	movw	r26, r16
    1a80:	16 96       	adiw	r26, 0x06	; 6
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	17 97       	sbiw	r26, 0x07	; 7
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	17 96       	adiw	r26, 0x07	; 7
    1a8c:	9c 93       	st	X, r25
    1a8e:	8e 93       	st	-X, r24
    1a90:	16 97       	sbiw	r26, 0x06	; 6
    1a92:	ce 01       	movw	r24, r28
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <__ultoa_invert>:
    1a9e:	fa 01       	movw	r30, r20
    1aa0:	aa 27       	eor	r26, r26
    1aa2:	28 30       	cpi	r18, 0x08	; 8
    1aa4:	51 f1       	breq	.+84     	; 0x1afa <__ultoa_invert+0x5c>
    1aa6:	20 31       	cpi	r18, 0x10	; 16
    1aa8:	81 f1       	breq	.+96     	; 0x1b0a <__ultoa_invert+0x6c>
    1aaa:	e8 94       	clt
    1aac:	6f 93       	push	r22
    1aae:	6e 7f       	andi	r22, 0xFE	; 254
    1ab0:	6e 5f       	subi	r22, 0xFE	; 254
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	af 4f       	sbci	r26, 0xFF	; 255
    1aba:	b1 e0       	ldi	r27, 0x01	; 1
    1abc:	3e d0       	rcall	.+124    	; 0x1b3a <__ultoa_invert+0x9c>
    1abe:	b4 e0       	ldi	r27, 0x04	; 4
    1ac0:	3c d0       	rcall	.+120    	; 0x1b3a <__ultoa_invert+0x9c>
    1ac2:	67 0f       	add	r22, r23
    1ac4:	78 1f       	adc	r23, r24
    1ac6:	89 1f       	adc	r24, r25
    1ac8:	9a 1f       	adc	r25, r26
    1aca:	a1 1d       	adc	r26, r1
    1acc:	68 0f       	add	r22, r24
    1ace:	79 1f       	adc	r23, r25
    1ad0:	8a 1f       	adc	r24, r26
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	a1 1d       	adc	r26, r1
    1ad6:	6a 0f       	add	r22, r26
    1ad8:	71 1d       	adc	r23, r1
    1ada:	81 1d       	adc	r24, r1
    1adc:	91 1d       	adc	r25, r1
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	20 d0       	rcall	.+64     	; 0x1b22 <__ultoa_invert+0x84>
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <__ultoa_invert+0x48>
    1ae4:	68 94       	set
    1ae6:	3f 91       	pop	r19
    1ae8:	2a e0       	ldi	r18, 0x0A	; 10
    1aea:	26 9f       	mul	r18, r22
    1aec:	11 24       	eor	r1, r1
    1aee:	30 19       	sub	r19, r0
    1af0:	30 5d       	subi	r19, 0xD0	; 208
    1af2:	31 93       	st	Z+, r19
    1af4:	de f6       	brtc	.-74     	; 0x1aac <__ultoa_invert+0xe>
    1af6:	cf 01       	movw	r24, r30
    1af8:	08 95       	ret
    1afa:	46 2f       	mov	r20, r22
    1afc:	47 70       	andi	r20, 0x07	; 7
    1afe:	40 5d       	subi	r20, 0xD0	; 208
    1b00:	41 93       	st	Z+, r20
    1b02:	b3 e0       	ldi	r27, 0x03	; 3
    1b04:	0f d0       	rcall	.+30     	; 0x1b24 <__ultoa_invert+0x86>
    1b06:	c9 f7       	brne	.-14     	; 0x1afa <__ultoa_invert+0x5c>
    1b08:	f6 cf       	rjmp	.-20     	; 0x1af6 <__ultoa_invert+0x58>
    1b0a:	46 2f       	mov	r20, r22
    1b0c:	4f 70       	andi	r20, 0x0F	; 15
    1b0e:	40 5d       	subi	r20, 0xD0	; 208
    1b10:	4a 33       	cpi	r20, 0x3A	; 58
    1b12:	18 f0       	brcs	.+6      	; 0x1b1a <__ultoa_invert+0x7c>
    1b14:	49 5d       	subi	r20, 0xD9	; 217
    1b16:	31 fd       	sbrc	r19, 1
    1b18:	40 52       	subi	r20, 0x20	; 32
    1b1a:	41 93       	st	Z+, r20
    1b1c:	02 d0       	rcall	.+4      	; 0x1b22 <__ultoa_invert+0x84>
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__ultoa_invert+0x6c>
    1b20:	ea cf       	rjmp	.-44     	; 0x1af6 <__ultoa_invert+0x58>
    1b22:	b4 e0       	ldi	r27, 0x04	; 4
    1b24:	a6 95       	lsr	r26
    1b26:	97 95       	ror	r25
    1b28:	87 95       	ror	r24
    1b2a:	77 95       	ror	r23
    1b2c:	67 95       	ror	r22
    1b2e:	ba 95       	dec	r27
    1b30:	c9 f7       	brne	.-14     	; 0x1b24 <__ultoa_invert+0x86>
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	61 05       	cpc	r22, r1
    1b36:	71 05       	cpc	r23, r1
    1b38:	08 95       	ret
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	0a 2e       	mov	r0, r26
    1b40:	06 94       	lsr	r0
    1b42:	57 95       	ror	r21
    1b44:	47 95       	ror	r20
    1b46:	37 95       	ror	r19
    1b48:	27 95       	ror	r18
    1b4a:	ba 95       	dec	r27
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <__ultoa_invert+0xa2>
    1b4e:	62 0f       	add	r22, r18
    1b50:	73 1f       	adc	r23, r19
    1b52:	84 1f       	adc	r24, r20
    1b54:	95 1f       	adc	r25, r21
    1b56:	a0 1d       	adc	r26, r0
    1b58:	08 95       	ret

00001b5a <__mulsi3>:
    1b5a:	db 01       	movw	r26, r22
    1b5c:	8f 93       	push	r24
    1b5e:	9f 93       	push	r25
    1b60:	0b d0       	rcall	.+22     	; 0x1b78 <__muluhisi3>
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	a2 9f       	mul	r26, r18
    1b68:	80 0d       	add	r24, r0
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	a3 9f       	mul	r26, r19
    1b6e:	90 0d       	add	r25, r0
    1b70:	b2 9f       	mul	r27, r18
    1b72:	90 0d       	add	r25, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	08 95       	ret

00001b78 <__muluhisi3>:
    1b78:	40 d0       	rcall	.+128    	; 0x1bfa <__umulhisi3>
    1b7a:	a5 9f       	mul	r26, r21
    1b7c:	90 0d       	add	r25, r0
    1b7e:	b4 9f       	mul	r27, r20
    1b80:	90 0d       	add	r25, r0
    1b82:	a4 9f       	mul	r26, r20
    1b84:	80 0d       	add	r24, r0
    1b86:	91 1d       	adc	r25, r1
    1b88:	11 24       	eor	r1, r1
    1b8a:	08 95       	ret

00001b8c <__prologue_saves__>:
    1b8c:	2f 92       	push	r2
    1b8e:	3f 92       	push	r3
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	ca 1b       	sub	r28, r26
    1bb6:	db 0b       	sbc	r29, r27
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	09 94       	ijmp

00001bc4 <__epilogue_restores__>:
    1bc4:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc6:	39 88       	ldd	r3, Y+17	; 0x11
    1bc8:	48 88       	ldd	r4, Y+16	; 0x10
    1bca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bcc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bce:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd6:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd8:	c8 84       	ldd	r12, Y+8	; 0x08
    1bda:	df 80       	ldd	r13, Y+7	; 0x07
    1bdc:	ee 80       	ldd	r14, Y+6	; 0x06
    1bde:	fd 80       	ldd	r15, Y+5	; 0x05
    1be0:	0c 81       	ldd	r16, Y+4	; 0x04
    1be2:	1b 81       	ldd	r17, Y+3	; 0x03
    1be4:	aa 81       	ldd	r26, Y+2	; 0x02
    1be6:	b9 81       	ldd	r27, Y+1	; 0x01
    1be8:	ce 0f       	add	r28, r30
    1bea:	d1 1d       	adc	r29, r1
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	ed 01       	movw	r28, r26
    1bf8:	08 95       	ret

00001bfa <__umulhisi3>:
    1bfa:	a2 9f       	mul	r26, r18
    1bfc:	b0 01       	movw	r22, r0
    1bfe:	b3 9f       	mul	r27, r19
    1c00:	c0 01       	movw	r24, r0
    1c02:	a3 9f       	mul	r26, r19
    1c04:	01 d0       	rcall	.+2      	; 0x1c08 <__umulhisi3+0xe>
    1c06:	b2 9f       	mul	r27, r18
    1c08:	70 0d       	add	r23, r0
    1c0a:	81 1d       	adc	r24, r1
    1c0c:	11 24       	eor	r1, r1
    1c0e:	91 1d       	adc	r25, r1
    1c10:	08 95       	ret

00001c12 <_exit>:
    1c12:	f8 94       	cli

00001c14 <__stop_program>:
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <__stop_program>
