
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000005ae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800066  00800066  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c3  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000828  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bd  00000000  00000000  0000247f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3b  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	d6 c1       	rjmp	.+940    	; 0x3b0 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	37 c0       	rjmp	.+110    	; 0x76 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ea       	ldi	r30, 0xAE	; 174
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 38       	cpi	r26, 0x84	; 132
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	82 d0       	rcall	.+260    	; 0x15e <main>
  5a:	a7 c2       	rjmp	.+1358   	; 0x5aa <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <timer2_ini>:
uint8_t gas_boiler_enable_flag = 0;

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 0.008с
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
  5e:	85 b5       	in	r24, 0x25	; 37
  60:	88 60       	ori	r24, 0x08	; 8
  62:	85 bd       	out	0x25, r24	; 37
	OCR2 = 0b11111010; //записываем в регистр число для сравнения 250
  64:	8a ef       	ldi	r24, 0xFA	; 250
  66:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= ((1<<CS21)|(1<<CS22));//установим делитель 256.
  68:	85 b5       	in	r24, 0x25	; 37
  6a:	86 60       	ori	r24, 0x06	; 6
  6c:	85 bd       	out	0x25, r24	; 37
    TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 2ого счетчика по совпадению с OCR2	
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 68       	ori	r24, 0x80	; 128
  72:	89 bf       	out	0x39, r24	; 57
  74:	08 95       	ret

00000076 <__vector_3>:
}
//——————————————–
ISR(TIMER2_COMP_vect)
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  if (TIM2_COUNT == 39750) TIM2_COUNT = 0;
  86:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  8a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  8e:	86 34       	cpi	r24, 0x46	; 70
  90:	2b e9       	ldi	r18, 0x9B	; 155
  92:	92 07       	cpc	r25, r18
  94:	29 f4       	brne	.+10     	; 0xa0 <__vector_3+0x2a>
  96:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
  9a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
  9e:	05 c0       	rjmp	.+10     	; 0xaa <__vector_3+0x34>
  else TIM2_COUNT++;
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
  a6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <timer_ini>:
void timer_ini(void)//период 2сек
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  c0:	89 b7       	in	r24, 0x39	; 57
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00111101; //записываем в регистр число для сравнения
  c6:	8d e3       	ldi	r24, 0x3D	; 61
  c8:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00001001;
  ca:	89 e0       	ldi	r24, 0x09	; 9
  cc:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12)|(1<<CS10);//установим делитель 1024.
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	85 60       	ori	r24, 0x05	; 5
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	08 95       	ret

000000d6 <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
   speed = hall_counter;
  e4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hall_counter>
  e8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <hall_counter+0x1>
  ec:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <speed+0x1>
  f0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <speed>
   hall_counter = 0;
  f4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <hall_counter+0x1>
  f8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <hall_counter>
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
 10a:	87 b3       	in	r24, 0x17	; 23
 10c:	8e 62       	ori	r24, 0x2E	; 46
 10e:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
 110:	88 b3       	in	r24, 0x18	; 24
 112:	83 7d       	andi	r24, 0xD3	; 211
 114:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
 116:	88 b3       	in	r24, 0x18	; 24
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	88 bb       	out	0x18, r24	; 24
	SPCR = ((1<<SPE)|(1<<MSTR));//включим шину, объявим ведущим
 11c:	80 e5       	ldi	r24, 0x50	; 80
 11e:	8d b9       	out	0x0d, r24	; 13
}
 120:	08 95       	ret

00000122 <port_init>:
//-------------------------------------------------------------
port_init(void)
{
	//инициализация ножки IRQ для внеш прерывания
	DDRD &= ~(1<<IRQ);
 122:	81 b3       	in	r24, 0x11	; 17
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<IRQ);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	82 bb       	out	0x12, r24	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
 12e:	81 b3       	in	r24, 0x11	; 17
 130:	80 64       	ori	r24, 0x40	; 64
 132:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_TX);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_RX);
 140:	82 b3       	in	r24, 0x12	; 18
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	82 bb       	out	0x12, r24	; 18
	//инициализация мосфета
	DDRB |= (1<<MOSFET);
 146:	87 b3       	in	r24, 0x17	; 23
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<MOSFET);
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	88 bb       	out	0x18, r24	; 24
}
 152:	08 95       	ret

00000154 <spi_send_recv>:
//-------------------------------------------------------------
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
 154:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
 156:	77 9b       	sbis	0x0e, 7	; 14
 158:	fe cf       	rjmp	.-4      	; 0x156 <spi_send_recv+0x2>
	return SPDR;
 15a:	8f b1       	in	r24, 0x0f	; 15
}
 15c:	08 95       	ret

0000015e <main>:

int main(void)
{
	int k = 0;
	uint8_t data[5] = {0};
	port_init();
 15e:	e1 df       	rcall	.-62     	; 0x122 <port_init>
	PORTD |= (1<<LED_TX);
 160:	82 b3       	in	r24, 0x12	; 18
 162:	80 64       	ori	r24, 0x40	; 64
 164:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_RX);
 166:	82 b3       	in	r24, 0x12	; 18
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	82 bb       	out	0x12, r24	; 18
	SPI_init();
 16c:	ce df       	rcall	.-100    	; 0x10a <SPI_init>
    NRF24_ini();
 16e:	90 d1       	rcall	.+800    	; 0x490 <NRF24_ini>
	// настраиваем параметры прерывания
	//----------------------
	MCUCR |= (1<<ISC01) ;
 170:	85 b7       	in	r24, 0x35	; 53
 172:	82 60       	ori	r24, 0x02	; 2
 174:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
 176:	8b b7       	in	r24, 0x3b	; 59
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8b bf       	out	0x3b, r24	; 59
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	83 ed       	ldi	r24, 0xD3	; 211
 180:	90 e3       	ldi	r25, 0x30	; 48
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x24>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x2e>
 18c:	00 00       	nop
	//----------------------
	_delay_ms(1000);
	PORTD &= ~(1<<LED_TX);
 18e:	82 b3       	in	r24, 0x12	; 18
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_RX);
 194:	82 b3       	in	r24, 0x12	; 18
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	82 bb       	out	0x12, r24	; 18
	WDTCR &= ~(1<<WDE);//откл WDT
 19a:	81 b5       	in	r24, 0x21	; 33
 19c:	87 7f       	andi	r24, 0xF7	; 247
 19e:	81 bd       	out	0x21, r24	; 33
	ACSR |= (1<<ACD);//откл компаратор
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	88 b9       	out	0x08, r24	; 8
    //INTER_COUNT == 0;
	timer_ini();
 1a6:	89 df       	rcall	.-238    	; 0xba <timer_ini>
	timer2_ini();
 1a8:	5a df       	rcall	.-332    	; 0x5e <timer2_ini>
	sei();
 1aa:	78 94       	sei
	
    while (1) 
    {
		//-------------------------------------------
		//отправка температуры
		buf1[0] = gas_boiler_enable_flag;
 1ac:	cd e6       	ldi	r28, 0x6D	; 109
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gas_boiler_enable_flag>
 1b4:	88 83       	st	Y, r24
			temp_integer = ((~(tt))&0x07FF)>>4;
		}
		buf1[1] = temp_sign;
		buf1[2] = temp_integer;
		buf1[3] = temp_fraction;*/
		dt = NRF24L01_Send(buf1);
 1b6:	ce 01       	movw	r24, r28
 1b8:	a8 d1       	rcall	.+848    	; 0x50a <NRF24L01_Send>
 1ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <dt>
		/*PORTD |= (1<<LED_TX);
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);*/
		memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 1be:	fe 01       	movw	r30, r28
 1c0:	01 90       	ld	r0, Z+
 1c2:	00 20       	and	r0, r0
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <main+0x62>
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	af 01       	movw	r20, r30
 1ca:	4d 56       	subi	r20, 0x6D	; 109
 1cc:	50 40       	sbci	r21, 0x00	; 0
 1ce:	44 0f       	add	r20, r20
 1d0:	55 1f       	adc	r21, r21
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	ce 01       	movw	r24, r28
 1d8:	e1 d1       	rcall	.+962    	; 0x59c <memset>
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	87 ea       	ldi	r24, 0xA7	; 167
 1de:	91 e6       	ldi	r25, 0x61	; 97
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x82>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x8c>
 1ea:	00 00       	nop
 1ec:	df cf       	rjmp	.-66     	; 0x1ac <main+0x4e>

000001ee <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	8b 01       	movw	r16, r22
 1fc:	c4 2f       	mov	r28, r20
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	9d 7f       	andi	r25, 0xFD	; 253
 202:	98 bb       	out	0x18, r25	; 24
 204:	98 b3       	in	r25, 0x18	; 24
 206:	9b 7f       	andi	r25, 0xFB	; 251
 208:	98 bb       	out	0x18, r25	; 24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	a3 df       	rcall	.-186    	; 0x154 <spi_send_recv>
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 214:	00 00       	nop
 216:	0a c0       	rjmp	.+20     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 218:	78 01       	movw	r14, r16
 21a:	ef ef       	ldi	r30, 0xFF	; 255
 21c:	ee 1a       	sub	r14, r30
 21e:	fe 0a       	sbc	r15, r30
 220:	f8 01       	movw	r30, r16
 222:	80 81       	ld	r24, Z
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	96 df       	rcall	.-212    	; 0x154 <spi_send_recv>
 228:	cd 2f       	mov	r28, r29
 22a:	87 01       	movw	r16, r14
 22c:	df ef       	ldi	r29, 0xFF	; 255
 22e:	dc 0f       	add	r29, r28
 230:	c1 11       	cpse	r28, r1
 232:	f2 cf       	rjmp	.-28     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 234:	88 b3       	in	r24, 0x18	; 24
 236:	84 60       	ori	r24, 0x04	; 4
 238:	88 bb       	out	0x18, r24	; 24
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	88 bb       	out	0x18, r24	; 24
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	08 95       	ret

0000024e <NRF24_FlushRX>:
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	8b 7f       	andi	r24, 0xFB	; 251
 252:	88 bb       	out	0x18, r24	; 24
 254:	82 ee       	ldi	r24, 0xE2	; 226
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	7d df       	rcall	.-262    	; 0x154 <spi_send_recv>
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <NRF24_FlushRX+0xe>
 260:	00 00       	nop
 262:	88 b3       	in	r24, 0x18	; 24
 264:	84 60       	ori	r24, 0x04	; 4
 266:	88 bb       	out	0x18, r24	; 24
 268:	08 95       	ret

0000026a <NRF24_FlushTX>:
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	88 bb       	out	0x18, r24	; 24
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	6f df       	rcall	.-290    	; 0x154 <spi_send_recv>
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <NRF24_FlushTX+0xe>
 27c:	00 00       	nop
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	84 60       	ori	r24, 0x04	; 4
 282:	88 bb       	out	0x18, r24	; 24
 284:	08 95       	ret

00000286 <NRF24_ToggleFeatures>:
 286:	88 b3       	in	r24, 0x18	; 24
 288:	8b 7f       	andi	r24, 0xFB	; 251
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	80 e5       	ldi	r24, 0x50	; 80
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	61 df       	rcall	.-318    	; 0x154 <spi_send_recv>
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <NRF24_ToggleFeatures+0xe>
 298:	00 00       	nop
 29a:	83 e7       	ldi	r24, 0x73	; 115
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	5a df       	rcall	.-332    	; 0x154 <spi_send_recv>
 2a0:	88 b3       	in	r24, 0x18	; 24
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	08 95       	ret

000002a8 <NRF24_Read_Buf>:
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8b 01       	movw	r16, r22
 2b6:	c4 2f       	mov	r28, r20
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	9b 7f       	andi	r25, 0xFB	; 251
 2bc:	98 bb       	out	0x18, r25	; 24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	49 df       	rcall	.-366    	; 0x154 <spi_send_recv>
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <NRF24_Read_Buf+0x32>
 2c4:	78 01       	movw	r14, r16
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	e8 1a       	sub	r14, r24
 2ca:	f8 0a       	sbc	r15, r24
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	41 df       	rcall	.-382    	; 0x154 <spi_send_recv>
 2d2:	f8 01       	movw	r30, r16
 2d4:	80 83       	st	Z, r24
 2d6:	cd 2f       	mov	r28, r29
 2d8:	87 01       	movw	r16, r14
 2da:	df ef       	ldi	r29, 0xFF	; 255
 2dc:	dc 0f       	add	r29, r28
 2de:	c1 11       	cpse	r28, r1
 2e0:	f1 cf       	rjmp	.-30     	; 0x2c4 <NRF24_Read_Buf+0x1c>
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	08 95       	ret

000002f6 <NRF24_Write_Buf>:
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8b 01       	movw	r16, r22
 304:	c4 2f       	mov	r28, r20
 306:	80 62       	ori	r24, 0x20	; 32
 308:	98 b3       	in	r25, 0x18	; 24
 30a:	9b 7f       	andi	r25, 0xFB	; 251
 30c:	98 bb       	out	0x18, r25	; 24
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	21 df       	rcall	.-446    	; 0x154 <spi_send_recv>
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	8a 95       	dec	r24
 316:	f1 f7       	brne	.-4      	; 0x314 <NRF24_Write_Buf+0x1e>
 318:	00 00       	nop
 31a:	0a c0       	rjmp	.+20     	; 0x330 <NRF24_Write_Buf+0x3a>
 31c:	78 01       	movw	r14, r16
 31e:	ef ef       	ldi	r30, 0xFF	; 255
 320:	ee 1a       	sub	r14, r30
 322:	fe 0a       	sbc	r15, r30
 324:	f8 01       	movw	r30, r16
 326:	80 81       	ld	r24, Z
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	14 df       	rcall	.-472    	; 0x154 <spi_send_recv>
 32c:	cd 2f       	mov	r28, r29
 32e:	87 01       	movw	r16, r14
 330:	df ef       	ldi	r29, 0xFF	; 255
 332:	dc 0f       	add	r29, r28
 334:	c1 11       	cpse	r28, r1
 336:	f2 cf       	rjmp	.-28     	; 0x31c <NRF24_Write_Buf+0x26>
 338:	88 b3       	in	r24, 0x18	; 24
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	88 bb       	out	0x18, r24	; 24
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <NRF24L01_TX_Mode>:
 34c:	43 e0       	ldi	r20, 0x03	; 3
 34e:	63 e6       	ldi	r22, 0x63	; 99
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	d0 df       	rcall	.-96     	; 0x2f6 <NRF24_Write_Buf>
 356:	43 e0       	ldi	r20, 0x03	; 3
 358:	63 e6       	ldi	r22, 0x63	; 99
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	8b e0       	ldi	r24, 0x0B	; 11
 35e:	cb df       	rcall	.-106    	; 0x2f6 <NRF24_Write_Buf>
 360:	88 b3       	in	r24, 0x18	; 24
 362:	8d 7f       	andi	r24, 0xFD	; 253
 364:	88 bb       	out	0x18, r24	; 24
 366:	73 df       	rcall	.-282    	; 0x24e <NRF24_FlushRX>
 368:	80 df       	rcall	.-256    	; 0x26a <NRF24_FlushTX>
 36a:	08 95       	ret

0000036c <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
 36c:	cf 93       	push	r28
 36e:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
 370:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
 372:	98 b3       	in	r25, 0x18	; 24
 374:	9b 7f       	andi	r25, 0xFB	; 251
 376:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	ec de       	rcall	.-552    	; 0x154 <spi_send_recv>
	spi_send_recv(data_out);
 37c:	8c 2f       	mov	r24, r28
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	e9 de       	rcall	.-558    	; 0x154 <spi_send_recv>
	HIGH_CSN;
 382:	88 b3       	in	r24, 0x18	; 24
 384:	84 60       	ori	r24, 0x04	; 4
 386:	88 bb       	out	0x18, r24	; 24
}
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
 390:	88 b3       	in	r24, 0x18	; 24
 392:	8b 7f       	andi	r24, 0xFB	; 251
 394:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
 396:	8c 2f       	mov	r24, r28
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	dc de       	rcall	.-584    	; 0x154 <spi_send_recv>
	if(reg != STATUS)
 39c:	c7 30       	cpi	r28, 0x07	; 7
 39e:	19 f0       	breq	.+6      	; 0x3a6 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	d7 de       	rcall	.-594    	; 0x154 <spi_send_recv>
	}
	HIGH_CSN;
 3a6:	98 b3       	in	r25, 0x18	; 24
 3a8:	94 60       	ori	r25, 0x04	; 4
 3aa:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
 3d2:	87 e0       	ldi	r24, 0x07	; 7
 3d4:	db df       	rcall	.-74     	; 0x38c <nRF_read_register>
	if(status & 0x40)
 3d6:	86 ff       	sbrs	r24, 6
 3d8:	2e c0       	rjmp	.+92     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
	{
		pipe = (status>>1)&0x07;
 3da:	86 95       	lsr	r24
 3dc:	87 70       	andi	r24, 0x07	; 7
 3de:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
 3e2:	45 e0       	ldi	r20, 0x05	; 5
 3e4:	68 e7       	ldi	r22, 0x78	; 120
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	81 e6       	ldi	r24, 0x61	; 97
 3ea:	5e df       	rcall	.-324    	; 0x2a8 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
 3ec:	60 e4       	ldi	r22, 0x40	; 64
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	bd df       	rcall	.-134    	; 0x36c <nRF_write_register>
		rx_flag = 1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <rx_flag>
		PORTD |= (1<<LED_RX);
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	80 62       	ori	r24, 0x20	; 32
 3fc:	82 bb       	out	0x12, r24	; 18
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	81 ee       	ldi	r24, 0xE1	; 225
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
 410:	82 b3       	in	r24, 0x12	; 18
 412:	8f 7d       	andi	r24, 0xDF	; 223
 414:	82 bb       	out	0x12, r24	; 18
		if (RX_BUF[0] == 1)
 416:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <RX_BUF>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	39 f4       	brne	.+14     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
		{
			PORTB |= (1<<MOSFET);
 41e:	88 b3       	in	r24, 0x18	; 24
 420:	81 60       	ori	r24, 0x01	; 1
 422:	88 bb       	out	0x18, r24	; 24
			gas_boiler_enable_flag = 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gas_boiler_enable_flag>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
		}
		else
		{
			PORTB &= ~(1<<MOSFET);
 42c:	88 b3       	in	r24, 0x18	; 24
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	88 bb       	out	0x18, r24	; 24
			gas_boiler_enable_flag = 0;
 432:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <gas_boiler_enable_flag>
		}
	}
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	98 df       	rcall	.-208    	; 0x38c <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 45c:	68 2f       	mov	r22, r24
 45e:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	84 df       	rcall	.-248    	; 0x36c <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
 464:	43 e0       	ldi	r20, 0x03	; 3
 466:	60 e6       	ldi	r22, 0x60	; 96
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e1       	ldi	r24, 0x10	; 16
 46c:	44 df       	rcall	.-376    	; 0x2f6 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
 46e:	43 e0       	ldi	r20, 0x03	; 3
 470:	60 e6       	ldi	r22, 0x60	; 96
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	8b e0       	ldi	r24, 0x0B	; 11
 476:	3f df       	rcall	.-386    	; 0x2f6 <NRF24_Write_Buf>
	HIGH_CE;
 478:	88 b3       	in	r24, 0x18	; 24
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47e:	87 e5       	ldi	r24, 0x57	; 87
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__stack+0x23>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__stack+0x29>
 488:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 48a:	e1 de       	rcall	.-574    	; 0x24e <NRF24_FlushRX>
	NRF24_FlushTX();
 48c:	ee de       	rcall	.-548    	; 0x26a <NRF24_FlushTX>
 48e:	08 95       	ret

00000490 <NRF24_ini>:

extern uint8_t gas_boiler_enable_flag;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
 490:	88 b3       	in	r24, 0x18	; 24
 492:	8d 7f       	andi	r24, 0xFD	; 253
 494:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	8f e1       	ldi	r24, 0x1F	; 31
 498:	9e e4       	ldi	r25, 0x4E	; 78
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <NRF24_ini+0xa>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <NRF24_ini+0x10>
 4a0:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 4a2:	6a e0       	ldi	r22, 0x0A	; 10
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	62 df       	rcall	.-316    	; 0x36c <nRF_write_register>
 4a8:	8f e1       	ldi	r24, 0x1F	; 31
 4aa:	9e e4       	ldi	r25, 0x4E	; 78
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <NRF24_ini+0x1c>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <NRF24_ini+0x22>
 4b2:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
 4b4:	63 e0       	ldi	r22, 0x03	; 3
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	59 df       	rcall	.-334    	; 0x36c <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
 4ba:	63 e0       	ldi	r22, 0x03	; 3
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	56 df       	rcall	.-340    	; 0x36c <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	53 df       	rcall	.-346    	; 0x36c <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
 4c6:	6f e6       	ldi	r22, 0x6F	; 111
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	50 df       	rcall	.-352    	; 0x36c <nRF_write_register>
	NRF24_ToggleFeatures();
 4cc:	dc de       	rcall	.-584    	; 0x286 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	8d e1       	ldi	r24, 0x1D	; 29
 4d2:	4c df       	rcall	.-360    	; 0x36c <nRF_write_register>
	nRF_write_register(DYNPD, 0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	8c e1       	ldi	r24, 0x1C	; 28
 4d8:	49 df       	rcall	.-366    	; 0x36c <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 4da:	60 e7       	ldi	r22, 0x70	; 112
 4dc:	87 e0       	ldi	r24, 0x07	; 7
 4de:	46 df       	rcall	.-372    	; 0x36c <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
 4e0:	6c e4       	ldi	r22, 0x4C	; 76
 4e2:	85 e0       	ldi	r24, 0x05	; 5
 4e4:	43 df       	rcall	.-378    	; 0x36c <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 4e6:	66 e0       	ldi	r22, 0x06	; 6
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	40 df       	rcall	.-384    	; 0x36c <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
 4ec:	43 e0       	ldi	r20, 0x03	; 3
 4ee:	60 e6       	ldi	r22, 0x60	; 96
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e1       	ldi	r24, 0x10	; 16
 4f4:	00 df       	rcall	.-512    	; 0x2f6 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
 4f6:	43 e0       	ldi	r20, 0x03	; 3
 4f8:	60 e6       	ldi	r22, 0x60	; 96
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	8b e0       	ldi	r24, 0x0B	; 11
 4fe:	fb de       	rcall	.-522    	; 0x2f6 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 500:	65 e0       	ldi	r22, 0x05	; 5
 502:	82 e1       	ldi	r24, 0x12	; 18
 504:	33 df       	rcall	.-410    	; 0x36c <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
 506:	a8 df       	rcall	.-176    	; 0x458 <NRF24L01_RX_Mode>
 508:	08 95       	ret

0000050a <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
 510:	1d df       	rcall	.-454    	; 0x34c <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	3b df       	rcall	.-394    	; 0x38c <nRF_read_register>
 516:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
 518:	68 2f       	mov	r22, r24
 51a:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	26 df       	rcall	.-436    	; 0x36c <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	87 e5       	ldi	r24, 0x57	; 87
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <NRF24L01_Send+0x1a>
 528:	00 c0       	rjmp	.+0      	; 0x52a <NRF24L01_Send+0x20>
 52a:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
 52c:	45 e0       	ldi	r20, 0x05	; 5
 52e:	be 01       	movw	r22, r28
 530:	80 ea       	ldi	r24, 0xA0	; 160
 532:	5d de       	rcall	.-838    	; 0x1ee <NRF24_Transmit>
	HIGH_CE;
 534:	88 b3       	in	r24, 0x18	; 24
 536:	82 60       	ori	r24, 0x02	; 2
 538:	88 bb       	out	0x18, r24	; 24
 53a:	90 e5       	ldi	r25, 0x50	; 80
 53c:	9a 95       	dec	r25
 53e:	f1 f7       	brne	.-4      	; 0x53c <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
 540:	88 b3       	in	r24, 0x18	; 24
 542:	8d 7f       	andi	r24, 0xFD	; 253
 544:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
 546:	82 99       	sbic	0x10, 2	; 16
 548:	fe cf       	rjmp	.-4      	; 0x546 <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
 54a:	87 e0       	ldi	r24, 0x07	; 7
 54c:	1f df       	rcall	.-450    	; 0x38c <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
 54e:	98 2f       	mov	r25, r24
 550:	95 70       	andi	r25, 0x05	; 5
 552:	99 f0       	breq	.+38     	; 0x57a <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED_TX);
 554:	82 b3       	in	r24, 0x12	; 18
 556:	80 64       	ori	r24, 0x40	; 64
 558:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	81 ee       	ldi	r24, 0xE1	; 225
 55e:	94 e0       	ldi	r25, 0x04	; 4
 560:	21 50       	subi	r18, 0x01	; 1
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <NRF24L01_Send+0x56>
 568:	00 c0       	rjmp	.+0      	; 0x56a <NRF24L01_Send+0x60>
 56a:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
 56c:	82 b3       	in	r24, 0x12	; 18
 56e:	8f 7b       	andi	r24, 0xBF	; 191
 570:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
 572:	60 e2       	ldi	r22, 0x20	; 32
 574:	87 e0       	ldi	r24, 0x07	; 7
 576:	fa de       	rcall	.-524    	; 0x36c <nRF_write_register>
 578:	06 c0       	rjmp	.+12     	; 0x586 <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
 57a:	82 ff       	sbrs	r24, 2
 57c:	04 c0       	rjmp	.+8      	; 0x586 <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
 57e:	60 e1       	ldi	r22, 0x10	; 16
 580:	87 e0       	ldi	r24, 0x07	; 7
 582:	f4 de       	rcall	.-536    	; 0x36c <nRF_write_register>
		NRF24_FlushTX();
 584:	72 de       	rcall	.-796    	; 0x26a <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	01 df       	rcall	.-510    	; 0x38c <nRF_read_register>
 58a:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 58c:	65 df       	rcall	.-310    	; 0x458 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 58e:	60 e7       	ldi	r22, 0x70	; 112
 590:	87 e0       	ldi	r24, 0x07	; 7
 592:	ec de       	rcall	.-552    	; 0x36c <nRF_write_register>
	return regval;
}
 594:	8c 2f       	mov	r24, r28
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <memset>:
 59c:	dc 01       	movw	r26, r24
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <memset+0x6>
 5a0:	6d 93       	st	X+, r22
 5a2:	41 50       	subi	r20, 0x01	; 1
 5a4:	50 40       	sbci	r21, 0x00	; 0
 5a6:	e0 f7       	brcc	.-8      	; 0x5a0 <memset+0x4>
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
