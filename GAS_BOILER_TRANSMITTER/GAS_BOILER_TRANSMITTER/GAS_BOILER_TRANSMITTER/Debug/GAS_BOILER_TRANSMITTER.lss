
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001ba0  00001c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  008000a0  008000a0  00001c74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000302a  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f09  00000000  00000000  00004f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019a9  00000000  00000000  00005e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00007818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000940  00000000  00000000  00007f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021aa  00000000  00000000  000088a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000aa52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	f9 c6       	rjmp	.+3570   	; 0xdf6 <__vector_1>
       4:	50 c2       	rjmp	.+1184   	; 0x4a6 <__vector_2>
       6:	41 c1       	rjmp	.+642    	; 0x28a <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	cf c1       	rjmp	.+926    	; 0x3ac <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	b7 c2       	rjmp	.+1390   	; 0x586 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 ea       	ldi	r30, 0xA0	; 160
      3a:	fb e1       	ldi	r31, 0x1B	; 27
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 3a       	cpi	r26, 0xA0	; 160
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a0 ea       	ldi	r26, 0xA0	; 160
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a4 32       	cpi	r26, 0x24	; 36
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	98 d3       	rcall	.+1840   	; 0x78a <main>
      5a:	a0 cd       	rjmp	.-1216   	; 0xfffffb9c <__eeprom_end+0xff7efb9c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t work_mode;

void gas_boiler_controller(void)
{
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	26 c0       	rjmp	.+76     	; 0xb2 <gas_boiler_controller+0x54>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
      66:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <home_temp_rx_integer>
      6a:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <temp_setpoint_integer>
      6e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <home_temp_rx_fraction>
      72:	30 e0       	ldi	r19, 0x00	; 0
      74:	5a e0       	ldi	r21, 0x0A	; 10
      76:	85 9f       	mul	r24, r21
      78:	20 0d       	add	r18, r0
      7a:	31 1d       	adc	r19, r1
      7c:	11 24       	eor	r1, r1
      7e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <temp_setpoint_fraction>
      82:	90 e0       	ldi	r25, 0x00	; 0
      84:	5a e0       	ldi	r21, 0x0A	; 10
      86:	45 9f       	mul	r20, r21
      88:	80 0d       	add	r24, r0
      8a:	91 1d       	adc	r25, r1
      8c:	11 24       	eor	r1, r1
      8e:	28 17       	cp	r18, r24
      90:	39 07       	cpc	r19, r25
      92:	34 f4       	brge	.+12     	; 0xa0 <gas_boiler_controller+0x42>
		{
			gas_boiler_enable_flag = 1;
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      9a:	c0 98       	cbi	0x18, 0	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      9c:	94 9a       	sbi	0x12, 4	; 18
      9e:	04 c0       	rjmp	.+8      	; 0xa8 <gas_boiler_controller+0x4a>
			EEPROM_write(5, gas_boiler_enable_flag);
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
		{
			gas_boiler_enable_flag = 0;
      a0:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      a4:	c0 9a       	sbi	0x18, 0	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      a6:	94 98       	cbi	0x12, 4	; 18
			EEPROM_write(5, gas_boiler_enable_flag);
      a8:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
      ac:	85 e0       	ldi	r24, 0x05	; 5
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <EEPROM_write>
      b2:	08 95       	ret

000000b4 <dt_testdevice>:
  return tt;
}
//функци€ определени€ датчика на шине
char dt_testdevice(void) //dt Ч digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      b4:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывани€
      b6:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      b8:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ba:	e3 e9       	ldi	r30, 0x93	; 147
      bc:	f7 e0       	ldi	r31, 0x07	; 7
      be:	31 97       	sbiw	r30, 0x01	; 1
      c0:	f1 f7       	brne	.-4      	; 0xbe <dt_testdevice+0xa>
      c2:	00 c0       	rjmp	.+0      	; 0xc4 <dt_testdevice+0x10>
      c4:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      c6:	8f 98       	cbi	0x11, 7	; 17
      c8:	e3 e0       	ldi	r30, 0x03	; 3
      ca:	f1 e0       	ldi	r31, 0x01	; 1
      cc:	31 97       	sbiw	r30, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <dt_testdevice+0x18>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <dt_testdevice+0x1e>
      d2:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//провер€ем, ответит ли устройство
      d4:	80 b3       	in	r24, 0x10	; 16
  {
	  dt=1;//устройство есть
  }
  else dt=0;//устройства нет
  SREG = stektemp;// вернем значение стека
      d6:	9f bf       	out	0x3f, r25	; 63
      d8:	ef e8       	ldi	r30, 0x8F	; 143
      da:	f6 e0       	ldi	r31, 0x06	; 6
      dc:	31 97       	sbiw	r30, 0x01	; 1
      de:	f1 f7       	brne	.-4      	; 0xdc <dt_testdevice+0x28>
      e0:	00 c0       	rjmp	.+0      	; 0xe2 <dt_testdevice+0x2e>
      e2:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
      e4:	80 95       	com	r24
}
      e6:	88 1f       	adc	r24, r24
      e8:	88 27       	eor	r24, r24
      ea:	88 1f       	adc	r24, r24
      ec:	08 95       	ret

000000ee <dt_readbit>:
	return c;
}
//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
      ee:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
      f0:	f8 94       	cli
  char bt; //переменна€ хранени€ бита
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      f2:	8f 9a       	sbi	0x11, 7	; 17
      f4:	2a e0       	ldi	r18, 0x0A	; 10
      f6:	2a 95       	dec	r18
      f8:	f1 f7       	brne	.-4      	; 0xf6 <dt_readbit+0x8>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <dt_readbit+0xe>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      fc:	8f 98       	cbi	0x11, 7	; 17
      fe:	85 e4       	ldi	r24, 0x45	; 69
     100:	8a 95       	dec	r24
     102:	f1 f7       	brne	.-4      	; 0x100 <dt_readbit+0x12>
     104:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     106:	80 b3       	in	r24, 0x10	; 16
     108:	20 ef       	ldi	r18, 0xF0	; 240
     10a:	2a 95       	dec	r18
     10c:	f1 f7       	brne	.-4      	; 0x10a <dt_readbit+0x1c>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     10e:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     110:	88 1f       	adc	r24, r24
     112:	88 27       	eor	r24, r24
     114:	88 1f       	adc	r24, r24
     116:	08 95       	ret

00000118 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
	char c=0;
     122:	10 e0       	ldi	r17, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
	{
	  c|=dt_readbit()<<i; //читаем бит
     124:	e4 df       	rcall	.-56     	; 0xee <dt_readbit>
     126:	0c 2e       	mov	r0, r28
     128:	01 c0       	rjmp	.+2      	; 0x12c <dt_readbyte+0x14>
     12a:	88 0f       	add	r24, r24
     12c:	0a 94       	dec	r0
     12e:	ea f7       	brpl	.-6      	; 0x12a <dt_readbyte+0x12>
     130:	18 2b       	or	r17, r24
     132:	21 96       	adiw	r28, 0x01	; 1
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     134:	c8 30       	cpi	r28, 0x08	; 8
     136:	d1 05       	cpc	r29, r1
     138:	a9 f7       	brne	.-22     	; 0x124 <dt_readbyte+0xc>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     13a:	81 2f       	mov	r24, r17
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	1f 91       	pop	r17
     142:	08 95       	ret

00000144 <dt_sendbit>:
	}
}
//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     144:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
     146:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     148:	8f 9a       	sbi	0x11, 7	; 17
     14a:	2a e0       	ldi	r18, 0x0A	; 10
     14c:	2a 95       	dec	r18
     14e:	f1 f7       	brne	.-4      	; 0x14c <dt_sendbit+0x8>
     150:	00 c0       	rjmp	.+0      	; 0x152 <dt_sendbit+0xe>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     152:	81 11       	cpse	r24, r1
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     154:	8f 98       	cbi	0x11, 7	; 17
     156:	e3 e0       	ldi	r30, 0x03	; 3
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <dt_sendbit+0x16>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <dt_sendbit+0x1c>
     160:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     162:	8f 98       	cbi	0x11, 7	; 17
	SREG = stektemp;// вернем значение стека
     164:	9f bf       	out	0x3f, r25	; 63
     166:	08 95       	ret

00000168 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	c0 e0       	ldi	r28, 0x00	; 0
     176:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     178:	ee 24       	eor	r14, r14
     17a:	e3 94       	inc	r14
     17c:	f1 2c       	mov	r15, r1
     17e:	08 2f       	mov	r16, r24
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	c7 01       	movw	r24, r14
     184:	0c 2e       	mov	r0, r28
     186:	02 c0       	rjmp	.+4      	; 0x18c <dt_sendbyte+0x24>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <dt_sendbyte+0x20>
     190:	98 01       	movw	r18, r16
     192:	28 23       	and	r18, r24
     194:	39 23       	and	r19, r25
     196:	82 17       	cp	r24, r18
     198:	93 07       	cpc	r25, r19
     19a:	11 f4       	brne	.+4      	; 0x1a0 <dt_sendbyte+0x38>
		dt_sendbit(1);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <dt_sendbyte+0x3a>
		else //посылаем 0
		dt_sendbit(0);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	d0 df       	rcall	.-96     	; 0x144 <dt_sendbit>
     1a4:	21 96       	adiw	r28, 0x01	; 1
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1a6:	c8 30       	cpi	r28, 0x08	; 8
     1a8:	d1 05       	cpc	r29, r1
     1aa:	59 f7       	brne	.-42     	; 0x182 <dt_sendbyte+0x1a>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	ff 90       	pop	r15
     1b6:	ef 90       	pop	r14
     1b8:	08 95       	ret

000001ba <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
     1ba:	cf 93       	push	r28
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     1bc:	7b df       	rcall	.-266    	; 0xb4 <dt_testdevice>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	d9 f4       	brne	.+54     	; 0x1f8 <dt_check+0x3e>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1c2:	8c ec       	ldi	r24, 0xCC	; 204
     1c4:	d1 df       	rcall	.-94     	; 0x168 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измер€ем температуру
     1c6:	84 e4       	ldi	r24, 0x44	; 68
     1c8:	cf df       	rcall	.-98     	; 0x168 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	2f ef       	ldi	r18, 0xFF	; 255
     1cc:	4d e2       	ldi	r20, 0x2D	; 45
     1ce:	59 e0       	ldi	r21, 0x09	; 9
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	50 40       	sbci	r21, 0x00	; 0
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <dt_check+0x16>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <dt_check+0x20>
     1da:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразовани€ Ч 188 милисекунд
   dt_testdevice(); //снова используем те же манипул€ции с шиной что и при проверке ее присутстви€
     1dc:	6b df       	rcall	.-298    	; 0xb4 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1de:	8c ec       	ldi	r24, 0xCC	; 204
     1e0:	c3 df       	rcall	.-122    	; 0x168 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     1e2:	8e eb       	ldi	r24, 0xBE	; 190
     1e4:	c1 df       	rcall	.-126    	; 0x168 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     1e6:	98 df       	rcall	.-208    	; 0x118 <dt_readbyte>
     1e8:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     1ea:	96 df       	rcall	.-212    	; 0x118 <dt_readbyte>
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     1ec:	2c 2f       	mov	r18, r28
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	a9 01       	movw	r20, r18
     1f2:	58 2b       	or	r21, r24
     1f4:	ca 01       	movw	r24, r20
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <dt_check+0x42>
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     200:	dc df       	rcall	.-72     	; 0x1ba <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     202:	29 2f       	mov	r18, r25
     204:	25 95       	asr	r18
     206:	25 95       	asr	r18
     208:	25 95       	asr	r18
	{
		home_temp_own_fraction = tt & 0xF;
     20a:	38 2f       	mov	r19, r24
	int tt = 0;
	tt = dt_check();
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     20c:	61 f4       	brne	.+24     	; 0x226 <DS18b0_find_temp+0x26>
	{
		home_temp_own_fraction = tt & 0xF;
     20e:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     210:	23 2f       	mov	r18, r19
     212:	22 0f       	add	r18, r18
     214:	48 e0       	ldi	r20, 0x08	; 8
     216:	34 9f       	mul	r19, r20
     218:	20 0d       	add	r18, r0
     21a:	11 24       	eor	r1, r1
     21c:	22 95       	swap	r18
     21e:	2f 70       	andi	r18, 0x0F	; 15
     220:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <home_temp_own_fraction>
     224:	0e c0       	rjmp	.+28     	; 0x242 <DS18b0_find_temp+0x42>
		home_temp_own_integer = (tt&0x07FF)>>4;
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     226:	30 95       	com	r19
     228:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// Фмножаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     22a:	23 2f       	mov	r18, r19
     22c:	22 0f       	add	r18, r18
     22e:	48 e0       	ldi	r20, 0x08	; 8
     230:	34 9f       	mul	r19, r20
     232:	20 0d       	add	r18, r0
     234:	11 24       	eor	r1, r1
     236:	22 95       	swap	r18
     238:	2f 70       	andi	r18, 0x0F	; 15
     23a:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     23e:	80 95       	com	r24
     240:	90 95       	com	r25
     242:	97 70       	andi	r25, 0x07	; 7
     244:	24 e0       	ldi	r18, 0x04	; 4
     246:	95 95       	asr	r25
     248:	87 95       	ror	r24
     24a:	2a 95       	dec	r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <DS18b0_find_temp+0x46>
     24e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <home_temp_own_integer>
     252:	08 95       	ret

00000254 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождени€ флага окончани€ последней операцией с пам€тью
     254:	e1 99       	sbic	0x1c, 1	; 28
     256:	fe cf       	rjmp	.-4      	; 0x254 <EEPROM_write>
	{}
	EEAR = uiAddress; //”станавливаем адрес
     258:	9f bb       	out	0x1f, r25	; 31
     25a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //ѕищем данные в регистр
     25c:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //–азрешаем запись
     25e:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //ѕишем байт в пам€ть
     260:	e1 9a       	sbi	0x1c, 1	; 28
     262:	08 95       	ret

00000264 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     264:	e1 99       	sbic	0x1c, 1	; 28
     266:	fe cf       	rjmp	.-4      	; 0x264 <EEPROM_read>
	{} //ждем освобождени€ флага окончани€ последней операцией с пам€тью
	EEAR = uiAddress; //”станавливаем адрес
     268:	9f bb       	out	0x1f, r25	; 31
     26a:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //«апускаем операцию считывани€ из пам€ти в регистр данных
     26c:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //¬озвращаем результат
     26e:	8d b3       	in	r24, 0x1d	; 29
}
     270:	08 95       	ret

00000272 <timer2_ini>:
char DATA_TO_UART[30] = {0};

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим —“— (сброс по совпадению)
     272:	85 b5       	in	r24, 0x25	; 37
     274:	88 60       	ori	r24, 0x08	; 8
     276:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     278:	89 b7       	in	r24, 0x39	; 57
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число дл€ сравнени€ 200
     27e:	88 ec       	ldi	r24, 0xC8	; 200
     280:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     282:	85 b5       	in	r24, 0x25	; 37
     284:	82 60       	ori	r24, 0x02	; 2
     286:	85 bd       	out	0x25, r24	; 37
     288:	08 95       	ret

0000028a <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	cf 93       	push	r28
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
	if(OK_BUTTON_FLAG == 1)
     2ae:	c0 91 c2 00 	lds	r28, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     2b2:	c1 30       	cpi	r28, 0x01	; 1
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <__vector_3+0x2e>
     2b6:	5a c0       	rjmp	.+180    	; 0x36c <__vector_3+0xe2>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     2b8:	9a 99       	sbic	0x13, 2	; 19
     2ba:	28 c0       	rjmp	.+80     	; 0x30c <__vector_3+0x82>
     2bc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <UP_BUTTON_FLAG>
     2c0:	81 11       	cpse	r24, r1
     2c2:	24 c0       	rjmp	.+72     	; 0x30c <__vector_3+0x82>
		{
			temp_setpoint += 5;
     2c4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_setpoint>
     2c8:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <temp_setpoint+0x1>
     2cc:	05 96       	adiw	r24, 0x05	; 5
     2ce:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <temp_setpoint+0x1>
     2d2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     2d6:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <home_temp_rx_integer>
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	b6 d7       	rcall	.+3948   	; 0x124c <__udivmodhi4>
     2e0:	3a e0       	ldi	r19, 0x0A	; 10
     2e2:	36 9f       	mul	r19, r22
     2e4:	a0 01       	movw	r20, r0
     2e6:	37 9f       	mul	r19, r23
     2e8:	50 0d       	add	r21, r0
     2ea:	11 24       	eor	r1, r1
     2ec:	ba 01       	movw	r22, r20
     2ee:	68 0f       	add	r22, r24
     2f0:	79 1f       	adc	r23, r25
     2f2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <home_temp_rx_fraction>
     2f6:	89 2f       	mov	r24, r25
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	3a e0       	ldi	r19, 0x0A	; 10
     2fc:	23 9f       	mul	r18, r19
     2fe:	80 0d       	add	r24, r0
     300:	91 1d       	adc	r25, r1
     302:	11 24       	eor	r1, r1
     304:	59 d4       	rcall	.+2226   	; 0xbb8 <PrintTemp_MAX7219>
			UP_BUTTON_FLAG = 1;
     306:	c0 93 c1 00 	sts	0x00C1, r28	; 0x8000c1 <UP_BUTTON_FLAG>
     30a:	2a c0       	rjmp	.+84     	; 0x360 <__vector_3+0xd6>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     30c:	9b 99       	sbic	0x13, 3	; 19
     30e:	28 c0       	rjmp	.+80     	; 0x360 <__vector_3+0xd6>
     310:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <DOWN_BUTTON_FLAG>
     314:	81 11       	cpse	r24, r1
     316:	24 c0       	rjmp	.+72     	; 0x360 <__vector_3+0xd6>
		{
			temp_setpoint -= 5;
     318:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_setpoint>
     31c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <temp_setpoint+0x1>
     320:	05 97       	sbiw	r24, 0x05	; 5
     322:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <temp_setpoint+0x1>
     326:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     32a:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <home_temp_rx_integer>
     32e:	6a e0       	ldi	r22, 0x0A	; 10
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	8c d7       	rcall	.+3864   	; 0x124c <__udivmodhi4>
     334:	3a e0       	ldi	r19, 0x0A	; 10
     336:	36 9f       	mul	r19, r22
     338:	a0 01       	movw	r20, r0
     33a:	37 9f       	mul	r19, r23
     33c:	50 0d       	add	r21, r0
     33e:	11 24       	eor	r1, r1
     340:	ba 01       	movw	r22, r20
     342:	68 0f       	add	r22, r24
     344:	79 1f       	adc	r23, r25
     346:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <home_temp_rx_fraction>
     34a:	89 2f       	mov	r24, r25
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	3a e0       	ldi	r19, 0x0A	; 10
     350:	23 9f       	mul	r18, r19
     352:	80 0d       	add	r24, r0
     354:	91 1d       	adc	r25, r1
     356:	11 24       	eor	r1, r1
     358:	2f d4       	rcall	.+2142   	; 0xbb8 <PrintTemp_MAX7219>
			DOWN_BUTTON_FLAG = 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <DOWN_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     360:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     362:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     366:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     368:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <DOWN_BUTTON_FLAG>
		}
	}
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	cf 91       	pop	r28
     372:	bf 91       	pop	r27
     374:	af 91       	pop	r26
     376:	9f 91       	pop	r25
     378:	8f 91       	pop	r24
     37a:	7f 91       	pop	r23
     37c:	6f 91       	pop	r22
     37e:	5f 91       	pop	r21
     380:	4f 91       	pop	r20
     382:	3f 91       	pop	r19
     384:	2f 91       	pop	r18
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
     390:	8e b5       	in	r24, 0x2e	; 46
     392:	88 60       	ori	r24, 0x08	; 8
     394:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     396:	89 b7       	in	r24, 0x39	; 57
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число дл€ сравнени€ 2000
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     3a0:	80 ed       	ldi	r24, 0xD0	; 208
     3a2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     3a4:	8e b5       	in	r24, 0x2e	; 46
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8e bd       	out	0x2e, r24	; 46
     3aa:	08 95       	ret

000003ac <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ef 93       	push	r30
     3d0:	ff 93       	push	r31
	millis++;
     3d2:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <millis>
     3d6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <millis+0x1>
     3da:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <millis+0x2>
     3de:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <millis+0x3>
     3e2:	bc 01       	movw	r22, r24
     3e4:	cd 01       	movw	r24, r26
     3e6:	6f 5f       	subi	r22, 0xFF	; 255
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	8f 4f       	sbci	r24, 0xFF	; 255
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <millis>
     3f2:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <millis+0x1>
     3f6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <millis+0x2>
     3fa:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <millis+0x3>
	{
		millis = 0;
		millis_hometemp_update = 0;
	}
	//каждые 10 сек работает контроллер и отправка актуальных данных в Ѕƒ
	if ((millis % 10000)==0)
     3fe:	20 e1       	ldi	r18, 0x10	; 16
     400:	37 e2       	ldi	r19, 0x27	; 39
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	49 d7       	rcall	.+3730   	; 0x129a <__divmodsi4>
     408:	67 2b       	or	r22, r23
     40a:	68 2b       	or	r22, r24
     40c:	69 2b       	or	r22, r25
     40e:	c1 f5       	brne	.+112    	; 0x480 <__stack+0x21>
	{
		gas_boiler_controller();
     410:	26 de       	rcall	.-948    	; 0x5e <gas_boiler_controller>
		//отправл€ем в Ѕƒ данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     412:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <work_mode>
     416:	1f 92       	push	r1
     418:	8f 93       	push	r24
     41a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <temp_setpoint_fraction>
     41e:	1f 92       	push	r1
     420:	8f 93       	push	r24
     422:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_setpoint_integer>
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <home_temp_rx_fraction>
     42e:	1f 92       	push	r1
     430:	8f 93       	push	r24
     432:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <home_temp_rx_integer>
     436:	1f 92       	push	r1
     438:	8f 93       	push	r24
     43a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
     43e:	1f 92       	push	r1
     440:	8f 93       	push	r24
     442:	86 e6       	ldi	r24, 0x66	; 102
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	c2 ea       	ldi	r28, 0xA2	; 162
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	a4 d8       	rcall	.-3768   	; 0xfffff59c <__eeprom_end+0xff7ef59c>
		USART_Transmit(DATA_TO_UART);
     454:	ce 01       	movw	r24, r28
     456:	e3 d6       	rcall	.+3526   	; 0x121e <USART_Transmit>
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     458:	09 90       	ld	r0, Y+
     45a:	00 20       	and	r0, r0
     45c:	e9 f7       	brne	.-6      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
     45e:	21 97       	sbiw	r28, 0x01	; 1
     460:	ae 01       	movw	r20, r28
     462:	42 5a       	subi	r20, 0xA2	; 162
     464:	50 40       	sbci	r21, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	82 ea       	ldi	r24, 0xA2	; 162
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	75 d8       	rcall	.-3862   	; 0xfffff55a <__eeprom_end+0xff7ef55a>
     470:	8d b7       	in	r24, 0x3d	; 61
     472:	9e b7       	in	r25, 0x3e	; 62
     474:	40 96       	adiw	r24, 0x10	; 16
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	9e bf       	out	0x3e, r25	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	8d bf       	out	0x3d, r24	; 61
	}
}
     480:	ff 91       	pop	r31
     482:	ef 91       	pop	r30
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	2f 93       	push	r18
     4b2:	3f 93       	push	r19
     4b4:	4f 93       	push	r20
     4b6:	5f 93       	push	r21
     4b8:	6f 93       	push	r22
     4ba:	7f 93       	push	r23
     4bc:	8f 93       	push	r24
     4be:	9f 93       	push	r25
     4c0:	af 93       	push	r26
     4c2:	bf 93       	push	r27
     4c4:	ef 93       	push	r30
     4c6:	ff 93       	push	r31
	if (OK_BUTTON_FLAG == 1) 
     4c8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	b9 f4       	brne	.+46     	; 0x4fe <__vector_2+0x58>
	{
		OK_BUTTON_FLAG = 0;
     4d0:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <OK_BUTTON_FLAG>
		temp_setpoint_integer = temp_setpoint/10;
     4d4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_setpoint>
     4d8:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <temp_setpoint+0x1>
     4dc:	6a e0       	ldi	r22, 0x0A	; 10
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	b5 d6       	rcall	.+3434   	; 0x124c <__udivmodhi4>
     4e2:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <temp_setpoint_integer>
		temp_setpoint_fraction = temp_setpoint%10;
     4e6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_setpoint_fraction>
		EEPROM_write(1, temp_setpoint_integer);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	b2 de       	rcall	.-668    	; 0x254 <EEPROM_write>
		EEPROM_write(2, temp_setpoint_fraction);
     4f0:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <temp_setpoint_fraction>
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	ad de       	rcall	.-678    	; 0x254 <EEPROM_write>
		
		gas_boiler_controller();
     4fa:	b1 dd       	rcall	.-1182   	; 0x5e <gas_boiler_controller>
     4fc:	11 c0       	rjmp	.+34     	; 0x520 <__vector_2+0x7a>
		USART_Transmit(DATA_TO_UART);
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива*/
	}
	else 
	{
		temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     4fe:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <temp_setpoint_integer>
     502:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <temp_setpoint_fraction>
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	3a e0       	ldi	r19, 0x0A	; 10
     50a:	23 9f       	mul	r18, r19
     50c:	80 0d       	add	r24, r0
     50e:	91 1d       	adc	r25, r1
     510:	11 24       	eor	r1, r1
     512:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <temp_setpoint+0x1>
     516:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <temp_setpoint>
		OK_BUTTON_FLAG = 1;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <OK_BUTTON_FLAG>
	}
}
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <SPI_init>:
SPI_init(void) //инициализаци€ SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     542:	87 b3       	in	r24, 0x17	; 23
     544:	8e 62       	ori	r24, 0x2E	; 46
     546:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     548:	88 b3       	in	r24, 0x18	; 24
     54a:	83 7d       	andi	r24, 0xD3	; 211
     54c:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     54e:	c2 9a       	sbi	0x18, 2	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ§вим ведущим
     550:	8d b1       	in	r24, 0x0d	; 13
     552:	80 65       	ori	r24, 0x50	; 80
     554:	8d b9       	out	0x0d, r24	; 13
}
     556:	08 95       	ret

00000558 <port_init>:
port_init(void)
{
	//инициализаци€ ножки IRQ дл€ внеш прерывани€
	DDRD &= ~(1<<IRQ);
     558:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<IRQ);
     55a:	92 9a       	sbi	0x12, 2	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     55c:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<LED_TX);
     55e:	96 98       	cbi	0x12, 6	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     560:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1<<LED_RX);
     562:	95 98       	cbi	0x12, 5	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     564:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     566:	94 98       	cbi	0x12, 4	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     568:	a1 9a       	sbi	0x14, 1	; 20
	PORTC &= ~(1<<LED_WIFI);
     56a:	a9 98       	cbi	0x15, 1	; 21
	//инициализаци€ мосфета
	DDRB |= (1<<MOSFET);
     56c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<MOSFET);
     56e:	c0 98       	cbi	0x18, 0	; 24
	//инициализаци€ индикатора
	DDRC |= (1<<MAX7219_SS);
     570:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<MAX7219_SS);
     572:	a8 9a       	sbi	0x15, 0	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     574:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<BUTTON_OK);
     576:	93 9a       	sbi	0x12, 3	; 18
	DDRC &= ~(1<<BUTTON_UP);
     578:	a2 98       	cbi	0x14, 2	; 20
	PORTC |= (1<<BUTTON_UP);
     57a:	aa 9a       	sbi	0x15, 2	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     57c:	a3 98       	cbi	0x14, 3	; 20
	PORTC |= (1<<BUTTON_DOWN);
     57e:	ab 9a       	sbi	0x15, 3	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     580:	8f 98       	cbi	0x11, 7	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     582:	97 98       	cbi	0x12, 7	; 18
}
     584:	08 95       	ret

00000586 <__vector_11>:
//обработчик прерывани€ по UART
uint16_t uart_rx_count = 0;
char uart_rx_buffer[50];
ISR(USART_RXC_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	c6 54       	subi	r28, 0x46	; 70
     5b8:	d1 09       	sbc	r29, r1
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	cd bf       	out	0x3d, r28	; 61
	char uart_message[50];
	uart_rx_buffer[uart_rx_count] = UDR;
     5be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     5c2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
     5c6:	2c b1       	in	r18, 0x0c	; 12
     5c8:	09 ee       	ldi	r16, 0xE9	; 233
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	fc 01       	movw	r30, r24
     5ce:	e7 51       	subi	r30, 0x17	; 23
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     5d4:	2f 32       	cpi	r18, 0x2F	; 47
     5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_11+0x54>
     5d8:	b1 c0       	rjmp	.+354    	; 0x73c <__vector_11+0x1b6>
	{
		memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     5da:	f8 01       	movw	r30, r16
     5dc:	01 90       	ld	r0, Z+
     5de:	00 20       	and	r0, r0
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <__vector_11+0x56>
     5e2:	af 01       	movw	r20, r30
     5e4:	4b 5e       	subi	r20, 0xEB	; 235
     5e6:	50 40       	sbci	r21, 0x00	; 0
     5e8:	b8 01       	movw	r22, r16
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	ac d7       	rcall	.+3928   	; 0x1548 <memcpy>
		memset(uart_rx_buffer,'\0',strlen(uart_rx_buffer));
     5f0:	f8 01       	movw	r30, r16
     5f2:	01 90       	ld	r0, Z+
     5f4:	00 20       	and	r0, r0
     5f6:	e9 f7       	brne	.-6      	; 0x5f2 <__vector_11+0x6c>
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	af 01       	movw	r20, r30
     5fc:	49 5e       	subi	r20, 0xE9	; 233
     5fe:	50 40       	sbci	r21, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	c8 01       	movw	r24, r16
     606:	a9 d7       	rcall	.+3922   	; 0x155a <memset>
		uart_rx_count = 0;
     608:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
     60c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
		//ѕолучение данные о wifi по uart
		if (strstr(uart_message,"WiFi-OK")!=0)
     610:	69 e7       	ldi	r22, 0x79	; 121
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	ce 01       	movw	r24, r28
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	a7 d7       	rcall	.+3918   	; 0x1568 <strstr>
     61a:	89 2b       	or	r24, r25
     61c:	09 f0       	breq	.+2      	; 0x620 <__vector_11+0x9a>
		{
			PORTC |= (1<<LED_WIFI);
     61e:	a9 9a       	sbi	0x15, 1	; 21
		}
		if (strstr(uart_message,"WiFi-ERROR")!=0)
     620:	61 e8       	ldi	r22, 0x81	; 129
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	9f d7       	rcall	.+3902   	; 0x1568 <strstr>
     62a:	89 2b       	or	r24, r25
     62c:	09 f0       	breq	.+2      	; 0x630 <__vector_11+0xaa>
		{
			PORTC &= ~(1<<LED_WIFI);
     62e:	a9 98       	cbi	0x15, 1	; 21
		}
		//ѕолучение инфы от Ѕƒ с котлом
		if (strstr(uart_message,"BD")!=0)
     630:	6c e8       	ldi	r22, 0x8C	; 140
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	97 d7       	rcall	.+3886   	; 0x1568 <strstr>
     63a:	89 2b       	or	r24, r25
     63c:	09 f4       	brne	.+2      	; 0x640 <__vector_11+0xba>
     63e:	83 c0       	rjmp	.+262    	; 0x746 <__vector_11+0x1c0>
		{
			//считывание статуса котла
			if (strstr(uart_message,"OF")!=0)
     640:	6f e8       	ldi	r22, 0x8F	; 143
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	8f d7       	rcall	.+3870   	; 0x1568 <strstr>
     64a:	89 2b       	or	r24, r25
     64c:	19 f0       	breq	.+6      	; 0x654 <__vector_11+0xce>
			{
				gas_boiler_enable_flag_from_BD = 0;
     64e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <gas_boiler_enable_flag_from_BD>
     652:	0a c0       	rjmp	.+20     	; 0x668 <__vector_11+0xe2>
			}
			else if (strstr(uart_message,"ON")!=0)
     654:	62 e9       	ldi	r22, 0x92	; 146
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	85 d7       	rcall	.+3850   	; 0x1568 <strstr>
     65e:	89 2b       	or	r24, r25
     660:	19 f0       	breq	.+6      	; 0x668 <__vector_11+0xe2>
			{
				gas_boiler_enable_flag_from_BD = 1;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <gas_boiler_enable_flag_from_BD>
			}
			//считывание режима работы котла
			if (strstr(uart_message,"AUTO")!=0)
     668:	65 e9       	ldi	r22, 0x95	; 149
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	7b d7       	rcall	.+3830   	; 0x1568 <strstr>
     672:	89 2b       	or	r24, r25
     674:	19 f0       	breq	.+6      	; 0x67c <__vector_11+0xf6>
			{
				work_mode_from_BD = 0;
     676:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <work_mode_from_BD>
     67a:	0a c0       	rjmp	.+20     	; 0x690 <__vector_11+0x10a>
			}
			else if (strstr(uart_message,"MANU")!=0)
     67c:	6a e9       	ldi	r22, 0x9A	; 154
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	ce 01       	movw	r24, r28
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	71 d7       	rcall	.+3810   	; 0x1568 <strstr>
     686:	89 2b       	or	r24, r25
     688:	19 f0       	breq	.+6      	; 0x690 <__vector_11+0x10a>
			{
				work_mode_from_BD = 1;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <work_mode_from_BD>
			}
			//считывание уставки
			char data[20] = {};
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	f8 2e       	mov	r15, r24
     694:	8e 01       	movw	r16, r28
     696:	0d 5c       	subi	r16, 0xCD	; 205
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	f8 01       	movw	r30, r16
     69c:	8f 2d       	mov	r24, r15
     69e:	11 92       	st	Z+, r1
     6a0:	8a 95       	dec	r24
     6a2:	e9 f7       	brne	.-6      	; 0x69e <__vector_11+0x118>
			memcpy(data,uart_message+7,2);
     6a4:	88 85       	ldd	r24, Y+8	; 0x08
     6a6:	99 85       	ldd	r25, Y+9	; 0x09
     6a8:	9c ab       	std	Y+52, r25	; 0x34
     6aa:	8b ab       	std	Y+51, r24	; 0x33
			temp_setpoint_integer_from_BD = strtol(data, NULL, 10);
     6ac:	4a e0       	ldi	r20, 0x0A	; 10
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	c8 01       	movw	r24, r16
     6b6:	2f d6       	rcall	.+3166   	; 0x1316 <strtol>
     6b8:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <temp_setpoint_integer_from_BD>
			memset(data,0,sizeof(data));
     6bc:	f8 01       	movw	r30, r16
     6be:	8f 2d       	mov	r24, r15
     6c0:	11 92       	st	Z+, r1
     6c2:	8a 95       	dec	r24
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <__vector_11+0x13a>
			memcpy(data,uart_message+10,1);
     6c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c8:	8b ab       	std	Y+51, r24	; 0x33
			temp_setpoint_fraction_from_BD = strtol(data, NULL, 10);
     6ca:	4a e0       	ldi	r20, 0x0A	; 10
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	c8 01       	movw	r24, r16
     6d4:	20 d6       	rcall	.+3136   	; 0x1316 <strtol>
     6d6:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <temp_setpoint_fraction_from_BD>
			memset(data,0,sizeof(data));
     6da:	f8 01       	movw	r30, r16
     6dc:	11 92       	st	Z+, r1
     6de:	fa 94       	dec	r15
     6e0:	e9 f7       	brne	.-6      	; 0x6dc <__vector_11+0x156>
			//изменение параметров если они отличаютс€
			if (temp_setpoint_integer != temp_setpoint_integer_from_BD)
     6e2:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <temp_setpoint_integer_from_BD>
     6e6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_setpoint_integer>
     6ea:	86 17       	cp	r24, r22
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <__vector_11+0x172>
			{
				temp_setpoint_integer = temp_setpoint_integer_from_BD;
     6ee:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <temp_setpoint_integer>
				EEPROM_write(1, temp_setpoint_integer);
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ae dd       	rcall	.-1188   	; 0x254 <EEPROM_write>
			}
			if (temp_setpoint_fraction != temp_setpoint_fraction_from_BD)
     6f8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <temp_setpoint_fraction_from_BD>
     6fc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <temp_setpoint_fraction>
     700:	86 17       	cp	r24, r22
     702:	29 f0       	breq	.+10     	; 0x70e <__vector_11+0x188>
			{
				temp_setpoint_fraction = temp_setpoint_fraction_from_BD;
     704:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <temp_setpoint_fraction>
				EEPROM_write(2, temp_setpoint_fraction);
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a3 dd       	rcall	.-1210   	; 0x254 <EEPROM_write>
			}
			if (gas_boiler_enable_flag != gas_boiler_enable_flag_from_BD)
     70e:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <gas_boiler_enable_flag_from_BD>
     712:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
     716:	86 17       	cp	r24, r22
     718:	29 f0       	breq	.+10     	; 0x724 <__vector_11+0x19e>
			{
				gas_boiler_enable_flag = gas_boiler_enable_flag_from_BD;
     71a:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <gas_boiler_enable_flag>
				EEPROM_write(5, gas_boiler_enable_flag);
     71e:	85 e0       	ldi	r24, 0x05	; 5
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	98 dd       	rcall	.-1232   	; 0x254 <EEPROM_write>
			}
			if (work_mode != work_mode_from_BD)
     724:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <work_mode_from_BD>
     728:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <work_mode>
     72c:	86 17       	cp	r24, r22
     72e:	59 f0       	breq	.+22     	; 0x746 <__vector_11+0x1c0>
			{
				work_mode = work_mode_from_BD;
     730:	60 93 cb 00 	sts	0x00CB, r22	; 0x8000cb <work_mode>
				EEPROM_write(6, work_mode);
     734:	86 e0       	ldi	r24, 0x06	; 6
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	8d dd       	rcall	.-1254   	; 0x254 <EEPROM_write>
     73a:	05 c0       	rjmp	.+10     	; 0x746 <__vector_11+0x1c0>
			}
		}
	}
	else
	{
		uart_rx_count++;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
     742:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
	}
}
     746:	ca 5b       	subi	r28, 0xBA	; 186
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // ѕередаЄт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     780:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     782:	77 9b       	sbis	0x0e, 7	; 14
     784:	fe cf       	rjmp	.-4      	; 0x782 <spi_send_recv+0x2>
	return SPDR;
     786:	8f b1       	in	r24, 0x0f	; 15
}
     788:	08 95       	ret

0000078a <main>:
     78a:	2f ef       	ldi	r18, 0xFF	; 255
     78c:	33 ed       	ldi	r19, 0xD3	; 211
     78e:	40 e3       	ldi	r20, 0x30	; 48
     790:	21 50       	subi	r18, 0x01	; 1
     792:	30 40       	sbci	r19, 0x00	; 0
     794:	40 40       	sbci	r20, 0x00	; 0
     796:	e1 f7       	brne	.-8      	; 0x790 <main+0x6>
     798:	00 c0       	rjmp	.+0      	; 0x79a <main+0x10>
     79a:	00 00       	nop
void main(void)
{
	_delay_ms(1000);
	port_init();
     79c:	dd de       	rcall	.-582    	; 0x558 <port_init>
	PORTD |= (1<<LED_TX);
     79e:	96 9a       	sbi	0x12, 6	; 18
	PORTD |= (1<<LED_RX);
     7a0:	95 9a       	sbi	0x12, 5	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     7a2:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<LED_WIFI);
     7a4:	a9 9a       	sbi	0x15, 1	; 21
	SPI_init();
     7a6:	cd de       	rcall	.-614    	; 0x542 <SPI_init>
	USART_Init(16);    //»нициализаци€ модул€ USART скорость 115200	
     7a8:	80 e1       	ldi	r24, 0x10	; 16
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	2d d5       	rcall	.+2650   	; 0x1208 <USART_Init>
    NRF24_ini();
     7ae:	b1 d4       	rcall	.+2402   	; 0x1112 <NRF24_ini>
     7b0:	5f ef       	ldi	r21, 0xFF	; 255
     7b2:	81 ee       	ldi	r24, 0xE1	; 225
     7b4:	94 e0       	ldi	r25, 0x04	; 4
     7b6:	51 50       	subi	r21, 0x01	; 1
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <main+0x2c>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <main+0x36>
     7c0:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     7c2:	a1 d1       	rcall	.+834    	; 0xb06 <MAX7219_init>
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	33 ed       	ldi	r19, 0xD3	; 211
     7c8:	40 e3       	ldi	r20, 0x30	; 48
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	30 40       	sbci	r19, 0x00	; 0
     7ce:	40 40       	sbci	r20, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0x40>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0x4a>
     7d4:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывани€
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     7d6:	85 b7       	in	r24, 0x35	; 53
     7d8:	8a 60       	ori	r24, 0x0A	; 10
     7da:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     7dc:	8b b7       	in	r24, 0x3b	; 59
     7de:	80 6c       	ori	r24, 0xC0	; 192
     7e0:	8b bf       	out	0x3b, r24	; 59
     7e2:	5f ef       	ldi	r21, 0xFF	; 255
     7e4:	87 ea       	ldi	r24, 0xA7	; 167
     7e6:	91 e6       	ldi	r25, 0x61	; 97
     7e8:	51 50       	subi	r21, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x5e>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <main+0x68>
     7f2:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     7f4:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~(1<<LED_RX);
     7f6:	95 98       	cbi	0x12, 5	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     7f8:	94 98       	cbi	0x12, 4	; 18
	PORTC &= ~(1<<LED_WIFI);
     7fa:	a9 98       	cbi	0x15, 1	; 21
	timer1_ini();
     7fc:	c9 dd       	rcall	.-1134   	; 0x390 <timer1_ini>
	timer2_ini();
     7fe:	39 dd       	rcall	.-1422   	; 0x272 <timer2_ini>
	gas_boiler_controller();
     800:	2e dc       	rcall	.-1956   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     802:	81 b5       	in	r24, 0x21	; 33
     804:	87 7f       	andi	r24, 0xF7	; 247
     806:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     808:	9f e0       	ldi	r25, 0x0F	; 15
     80a:	88 e1       	ldi	r24, 0x18	; 24
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	a8 95       	wdr
     812:	81 bd       	out	0x21, r24	; 33
     814:	0f be       	out	0x3f, r0	; 63
     816:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     818:	47 9a       	sbi	0x08, 7	; 8
     81a:	2f ef       	ldi	r18, 0xFF	; 255
     81c:	3d e3       	ldi	r19, 0x3D	; 61
     81e:	49 e4       	ldi	r20, 0x49	; 73
     820:	21 50       	subi	r18, 0x01	; 1
     822:	30 40       	sbci	r19, 0x00	; 0
     824:	40 40       	sbci	r20, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <main+0x96>
     828:	00 c0       	rjmp	.+0      	; 0x82a <main+0xa0>
     82a:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     82c:	a8 95       	wdr
     82e:	5f ef       	ldi	r21, 0xFF	; 255
     830:	8d e3       	ldi	r24, 0x3D	; 61
     832:	99 e4       	ldi	r25, 0x49	; 73
     834:	51 50       	subi	r21, 0x01	; 1
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <main+0xaa>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0xb4>
     83e:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     840:	a8 95       	wdr
	3-температура цела€
	4-температура дробь
	5-статус котла
	6-режим работы
	*/
	if(EEPROM_read(1) > 100) EEPROM_write(1,20);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e dd       	rcall	.-1508   	; 0x264 <EEPROM_read>
     848:	85 36       	cpi	r24, 0x65	; 101
     84a:	20 f0       	brcs	.+8      	; 0x854 <main+0xca>
     84c:	64 e1       	ldi	r22, 0x14	; 20
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	00 dd       	rcall	.-1536   	; 0x254 <EEPROM_write>
	if(EEPROM_read(2) > 100) EEPROM_write(2,0);
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	05 dd       	rcall	.-1526   	; 0x264 <EEPROM_read>
     85a:	85 36       	cpi	r24, 0x65	; 101
     85c:	20 f0       	brcs	.+8      	; 0x866 <main+0xdc>
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	f7 dc       	rcall	.-1554   	; 0x254 <EEPROM_write>
	if(EEPROM_read(3) > 100) EEPROM_write(3,20);
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc dc       	rcall	.-1544   	; 0x264 <EEPROM_read>
     86c:	85 36       	cpi	r24, 0x65	; 101
     86e:	20 f0       	brcs	.+8      	; 0x878 <main+0xee>
     870:	64 e1       	ldi	r22, 0x14	; 20
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	ee dc       	rcall	.-1572   	; 0x254 <EEPROM_write>
	if(EEPROM_read(4) > 100) EEPROM_write(4,0);
     878:	84 e0       	ldi	r24, 0x04	; 4
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	f3 dc       	rcall	.-1562   	; 0x264 <EEPROM_read>
     87e:	85 36       	cpi	r24, 0x65	; 101
     880:	20 f0       	brcs	.+8      	; 0x88a <main+0x100>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	e5 dc       	rcall	.-1590   	; 0x254 <EEPROM_write>
	if(EEPROM_read(5) > 100) EEPROM_write(5,0);
     88a:	85 e0       	ldi	r24, 0x05	; 5
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	ea dc       	rcall	.-1580   	; 0x264 <EEPROM_read>
     890:	85 36       	cpi	r24, 0x65	; 101
     892:	20 f0       	brcs	.+8      	; 0x89c <main+0x112>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	dc dc       	rcall	.-1608   	; 0x254 <EEPROM_write>
	if(EEPROM_read(6) > 100) EEPROM_write(6,0);
     89c:	86 e0       	ldi	r24, 0x06	; 6
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	e1 dc       	rcall	.-1598   	; 0x264 <EEPROM_read>
     8a2:	85 36       	cpi	r24, 0x65	; 101
     8a4:	20 f0       	brcs	.+8      	; 0x8ae <main+0x124>
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	d3 dc       	rcall	.-1626   	; 0x254 <EEPROM_write>
	temp_setpoint_integer = EEPROM_read(1);
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	d8 dc       	rcall	.-1616   	; 0x264 <EEPROM_read>
     8b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <temp_setpoint_integer>
	temp_setpoint_fraction = EEPROM_read(2);
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	d3 dc       	rcall	.-1626   	; 0x264 <EEPROM_read>
     8be:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_setpoint_fraction>
	home_temp_rx_integer = EEPROM_read(3);
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	ce dc       	rcall	.-1636   	; 0x264 <EEPROM_read>
     8c8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <home_temp_rx_integer>
	home_temp_rx_fraction = EEPROM_read(4);
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	c9 dc       	rcall	.-1646   	; 0x264 <EEPROM_read>
     8d2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <home_temp_rx_fraction>
	gas_boiler_enable_flag = EEPROM_read(5);
     8d6:	85 e0       	ldi	r24, 0x05	; 5
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	c4 dc       	rcall	.-1656   	; 0x264 <EEPROM_read>
     8dc:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gas_boiler_enable_flag>
	work_mode = EEPROM_read(6);
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	bf dc       	rcall	.-1666   	; 0x264 <EEPROM_read>
     8e6:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <work_mode>

	gas_boiler_controller();
     8ea:	b9 db       	rcall	.-2190   	; 0x5e <gas_boiler_controller>
	//отправл€ем в Ѕƒ первичные данные после включени€
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     8ec:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <work_mode>
     8f0:	1f 92       	push	r1
     8f2:	8f 93       	push	r24
     8f4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <temp_setpoint_fraction>
     8f8:	1f 92       	push	r1
     8fa:	8f 93       	push	r24
     8fc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_setpoint_integer>
     900:	1f 92       	push	r1
     902:	8f 93       	push	r24
     904:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <home_temp_rx_fraction>
     908:	1f 92       	push	r1
     90a:	8f 93       	push	r24
     90c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <home_temp_rx_integer>
     910:	1f 92       	push	r1
     912:	8f 93       	push	r24
     914:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
     918:	1f 92       	push	r1
     91a:	8f 93       	push	r24
     91c:	86 e6       	ldi	r24, 0x66	; 102
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	c2 ea       	ldi	r28, 0xA2	; 162
     926:	d0 e0       	ldi	r29, 0x00	; 0
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	37 d6       	rcall	.+3182   	; 0x159c <sprintf>
	USART_Transmit(DATA_TO_UART);
     92e:	ce 01       	movw	r24, r28
     930:	76 d4       	rcall	.+2284   	; 0x121e <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     932:	09 90       	ld	r0, Y+
     934:	00 20       	and	r0, r0
     936:	e9 f7       	brne	.-6      	; 0x932 <main+0x1a8>
     938:	21 97       	sbiw	r28, 0x01	; 1
     93a:	ae 01       	movw	r20, r28
     93c:	42 5a       	subi	r20, 0xA2	; 162
     93e:	50 40       	sbci	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	82 ea       	ldi	r24, 0xA2	; 162
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	08 d6       	rcall	.+3088   	; 0x155a <memset>
	sei();
     94a:	78 94       	sei
     94c:	4d b7       	in	r20, 0x3d	; 61
     94e:	5e b7       	in	r21, 0x3e	; 62
     950:	40 5f       	subi	r20, 0xF0	; 240
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	5e bf       	out	0x3e, r21	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	4d bf       	out	0x3d, r20	; 61
			EEPROM_write(3, home_temp_rx_integer);
			EEPROM_write(4, home_temp_rx_fraction);
			EEPROM_write(6, work_mode);
		}
		//каждые 3сек отправл€ем данные и измер€ем температуру
		if ((millis%3000) == 0)
     95e:	98 eb       	ldi	r25, 0xB8	; 184
     960:	c9 2e       	mov	r12, r25
     962:	9b e0       	ldi	r25, 0x0B	; 11
     964:	d9 2e       	mov	r13, r25
     966:	e1 2c       	mov	r14, r1
     968:	f1 2c       	mov	r15, r1
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
			{
				buf1[0] += 100;
			}
			buf1[1] = temp_setpoint_integer;
     96a:	c3 ed       	ldi	r28, 0xD3	; 211
     96c:	d0 e0       	ldi	r29, 0x00	; 0
			dt = NRF24L01_Send(buf1);
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
			DS18b0_find_temp();
		}
		//вывод инфы на индикатор
		if (((millis%500) == 0) && (OK_BUTTON_FLAG != 1))
     96e:	24 ef       	ldi	r18, 0xF4	; 244
     970:	82 2e       	mov	r8, r18
     972:	99 24       	eor	r9, r9
     974:	93 94       	inc	r9
     976:	a1 2c       	mov	r10, r1
     978:	b1 2c       	mov	r11, r1
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
	sei();
	while (1) 
    {
		//если нет св€зи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     97a:	00 91 c7 00 	lds	r16, 0x00C7	; 0x8000c7 <millis>
     97e:	10 91 c8 00 	lds	r17, 0x00C8	; 0x8000c8 <millis+0x1>
     982:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <millis+0x2>
     986:	30 91 ca 00 	lds	r19, 0x00CA	; 0x8000ca <millis+0x3>
     98a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <millis_hometemp_update>
     98e:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <millis_hometemp_update+0x1>
     992:	a8 01       	movw	r20, r16
     994:	48 1b       	sub	r20, r24
     996:	59 0b       	sbc	r21, r25
     998:	ca 01       	movw	r24, r20
     99a:	57 ff       	sbrs	r21, 7
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <main+0x21a>
     99e:	91 95       	neg	r25
     9a0:	81 95       	neg	r24
     9a2:	91 09       	sbc	r25, r1
     9a4:	89 39       	cpi	r24, 0x99	; 153
     9a6:	9a 43       	sbci	r25, 0x3A	; 58
     9a8:	fc f0       	brlt	.+62     	; 0x9e8 <main+0x25e>
		{
			work_mode = 0;
     9aa:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     9ae:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <home_temp_own_integer>
     9b2:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <home_temp_rx_integer>
			home_temp_rx_fraction = home_temp_own_fraction;
     9b6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <home_temp_own_fraction>
     9ba:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     9be:	00 93 c3 00 	sts	0x00C3, r16	; 0x8000c3 <millis_hometemp_update>
     9c2:	10 93 c4 00 	sts	0x00C4, r17	; 0x8000c4 <millis_hometemp_update+0x1>
     9c6:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <millis_hometemp_update+0x2>
     9ca:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <millis_hometemp_update+0x3>
			EEPROM_write(3, home_temp_rx_integer);
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	40 dc       	rcall	.-1920   	; 0x254 <EEPROM_write>
			EEPROM_write(4, home_temp_rx_fraction);
     9d4:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <home_temp_rx_fraction>
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	3b dc       	rcall	.-1930   	; 0x254 <EEPROM_write>
			EEPROM_write(6, work_mode);
     9de:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <work_mode>
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	36 dc       	rcall	.-1940   	; 0x254 <EEPROM_write>
		}
		//каждые 3сек отправл€ем данные и измер€ем температуру
		if ((millis%3000) == 0)
     9e8:	60 91 c7 00 	lds	r22, 0x00C7	; 0x8000c7 <millis>
     9ec:	70 91 c8 00 	lds	r23, 0x00C8	; 0x8000c8 <millis+0x1>
     9f0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <millis+0x2>
     9f4:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <millis+0x3>
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	4e d4       	rcall	.+2204   	; 0x129a <__divmodsi4>
     9fe:	67 2b       	or	r22, r23
     a00:	68 2b       	or	r22, r24
     a02:	69 2b       	or	r22, r25
     a04:	a1 f5       	brne	.+104    	; 0xa6e <main+0x2e4>
		{
			buf1[0] = gas_boiler_enable_flag;
     a06:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
     a0a:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <buf1>
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     a0e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <temp_setpoint_integer>
     a12:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <RX_BUF+0x1>
     a16:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <temp_setpoint_fraction>
     a1a:	32 13       	cpse	r19, r18
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <main+0x29c>
     a1e:	30 91 e0 00 	lds	r19, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     a22:	39 17       	cp	r19, r25
     a24:	19 f0       	breq	.+6      	; 0xa2c <main+0x2a2>
			{
				buf1[0] += 100;
     a26:	8c 59       	subi	r24, 0x9C	; 156
     a28:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     a2c:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <buf1+0x1>
			buf1[2] = temp_setpoint_fraction;
     a30:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <buf1+0x2>
			buf1[3] = home_temp_rx_integer;
     a34:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <home_temp_rx_integer>
     a38:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <buf1+0x3>
			buf1[4] = home_temp_rx_fraction;
     a3c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <home_temp_rx_fraction>
     a40:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <buf1+0x4>
			dt = NRF24L01_Send(buf1);
     a44:	83 ed       	ldi	r24, 0xD3	; 211
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	9e d3       	rcall	.+1852   	; 0x1186 <NRF24L01_Send>
     a4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     a4e:	fe 01       	movw	r30, r28
     a50:	01 90       	ld	r0, Z+
     a52:	00 20       	and	r0, r0
     a54:	e9 f7       	brne	.-6      	; 0xa50 <main+0x2c6>
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	af 01       	movw	r20, r30
     a5a:	43 5d       	subi	r20, 0xD3	; 211
     a5c:	50 40       	sbci	r21, 0x00	; 0
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	83 ed       	ldi	r24, 0xD3	; 211
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	77 d5       	rcall	.+2798   	; 0x155a <memset>
			DS18b0_find_temp();
     a6c:	c9 db       	rcall	.-2158   	; 0x200 <DS18b0_find_temp>
		}
		//вывод инфы на индикатор
		if (((millis%500) == 0) && (OK_BUTTON_FLAG != 1))
     a6e:	60 91 c7 00 	lds	r22, 0x00C7	; 0x8000c7 <millis>
     a72:	70 91 c8 00 	lds	r23, 0x00C8	; 0x8000c8 <millis+0x1>
     a76:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <millis+0x2>
     a7a:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <millis+0x3>
     a7e:	a5 01       	movw	r20, r10
     a80:	94 01       	movw	r18, r8
     a82:	0b d4       	rcall	.+2070   	; 0x129a <__divmodsi4>
     a84:	67 2b       	or	r22, r23
     a86:	68 2b       	or	r22, r24
     a88:	69 2b       	or	r22, r25
     a8a:	c9 f4       	brne	.+50     	; 0xabe <main+0x334>
     a8c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <OK_BUTTON_FLAG>
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	a9 f0       	breq	.+42     	; 0xabe <main+0x334>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     a94:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <temp_setpoint_integer>
     a98:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <home_temp_rx_integer>
     a9c:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <temp_setpoint_fraction>
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	9a e0       	ldi	r25, 0x0A	; 10
     aa4:	89 9f       	mul	r24, r25
     aa6:	60 0d       	add	r22, r0
     aa8:	71 1d       	adc	r23, r1
     aaa:	11 24       	eor	r1, r1
     aac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <home_temp_rx_fraction>
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	3a e0       	ldi	r19, 0x0A	; 10
     ab4:	23 9f       	mul	r18, r19
     ab6:	80 0d       	add	r24, r0
     ab8:	91 1d       	adc	r25, r1
     aba:	11 24       	eor	r1, r1
     abc:	7d d0       	rcall	.+250    	; 0xbb8 <PrintTemp_MAX7219>
		}
		wdt_reset();
     abe:	a8 95       	wdr
    }
     ac0:	5c cf       	rjmp	.-328    	; 0x97a <main+0x1f0>

00000ac2 <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
     ac2:	cf 93       	push	r28
     ac4:	c6 2f       	mov	r28, r22
     ac6:	a8 98       	cbi	0x15, 0	; 21
     ac8:	00 00       	nop
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	59 de       	rcall	.-846    	; 0x780 <spi_send_recv>
     ace:	8c 2f       	mov	r24, r28
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	56 de       	rcall	.-852    	; 0x780 <spi_send_recv>
     ad4:	a8 9a       	sbi	0x15, 0	; 21
     ad6:	00 00       	nop
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <MAX7219_clear>:
     adc:	cf 93       	push	r28
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	8f e0       	ldi	r24, 0x0F	; 15
     ae2:	ef df       	rcall	.-34     	; 0xac2 <Send_MAX7219>
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	8c e0       	ldi	r24, 0x0C	; 12
     ae8:	ec df       	rcall	.-40     	; 0xac2 <Send_MAX7219>
     aea:	67 e0       	ldi	r22, 0x07	; 7
     aec:	8b e0       	ldi	r24, 0x0B	; 11
     aee:	e9 df       	rcall	.-46     	; 0xac2 <Send_MAX7219>
     af0:	6f ef       	ldi	r22, 0xFF	; 255
     af2:	89 e0       	ldi	r24, 0x09	; 9
     af4:	e6 df       	rcall	.-52     	; 0xac2 <Send_MAX7219>
     af6:	c8 e0       	ldi	r28, 0x08	; 8
     af8:	6f e0       	ldi	r22, 0x0F	; 15
     afa:	8c 2f       	mov	r24, r28
     afc:	e2 df       	rcall	.-60     	; 0xac2 <Send_MAX7219>
     afe:	c1 50       	subi	r28, 0x01	; 1
     b00:	d9 f7       	brne	.-10     	; 0xaf8 <MAX7219_clear+0x1c>
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <MAX7219_init>:
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	8f e0       	ldi	r24, 0x0F	; 15
     b0a:	db df       	rcall	.-74     	; 0xac2 <Send_MAX7219>
     b0c:	8f e3       	ldi	r24, 0x3F	; 63
     b0e:	9c e9       	ldi	r25, 0x9C	; 156
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <MAX7219_init+0xa>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <MAX7219_init+0x10>
     b16:	00 00       	nop
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	8c e0       	ldi	r24, 0x0C	; 12
     b1c:	d2 df       	rcall	.-92     	; 0xac2 <Send_MAX7219>
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	9c e9       	ldi	r25, 0x9C	; 156
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <MAX7219_init+0x1c>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <MAX7219_init+0x22>
     b28:	00 00       	nop
     b2a:	67 e0       	ldi	r22, 0x07	; 7
     b2c:	8b e0       	ldi	r24, 0x0B	; 11
     b2e:	c9 df       	rcall	.-110    	; 0xac2 <Send_MAX7219>
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	9c e9       	ldi	r25, 0x9C	; 156
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <MAX7219_init+0x2e>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <MAX7219_init+0x34>
     b3a:	00 00       	nop
     b3c:	6f ef       	ldi	r22, 0xFF	; 255
     b3e:	89 e0       	ldi	r24, 0x09	; 9
     b40:	c0 df       	rcall	.-128    	; 0xac2 <Send_MAX7219>
     b42:	8f e3       	ldi	r24, 0x3F	; 63
     b44:	9c e9       	ldi	r25, 0x9C	; 156
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <MAX7219_init+0x40>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <MAX7219_init+0x46>
     b4c:	00 00       	nop
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	8a e0       	ldi	r24, 0x0A	; 10
     b52:	b7 df       	rcall	.-146    	; 0xac2 <Send_MAX7219>
     b54:	8f e3       	ldi	r24, 0x3F	; 63
     b56:	9c e9       	ldi	r25, 0x9C	; 156
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <MAX7219_init+0x52>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <MAX7219_init+0x58>
     b5e:	00 00       	nop
     b60:	bd df       	rcall	.-134    	; 0xadc <MAX7219_clear>
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	89 e0       	ldi	r24, 0x09	; 9
     b66:	ad df       	rcall	.-166    	; 0xac2 <Send_MAX7219>
     b68:	8f e3       	ldi	r24, 0x3F	; 63
     b6a:	9c e9       	ldi	r25, 0x9C	; 156
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <MAX7219_init+0x66>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <MAX7219_init+0x6c>
     b72:	00 00       	nop
     b74:	6f ef       	ldi	r22, 0xFF	; 255
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	a4 df       	rcall	.-184    	; 0xac2 <Send_MAX7219>
     b7a:	6f ef       	ldi	r22, 0xFF	; 255
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	a1 df       	rcall	.-190    	; 0xac2 <Send_MAX7219>
     b80:	6f ef       	ldi	r22, 0xFF	; 255
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	9e df       	rcall	.-196    	; 0xac2 <Send_MAX7219>
     b86:	6f ef       	ldi	r22, 0xFF	; 255
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	9b df       	rcall	.-202    	; 0xac2 <Send_MAX7219>
     b8c:	6f ef       	ldi	r22, 0xFF	; 255
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	98 df       	rcall	.-208    	; 0xac2 <Send_MAX7219>
     b92:	6f ef       	ldi	r22, 0xFF	; 255
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	95 df       	rcall	.-214    	; 0xac2 <Send_MAX7219>
     b98:	6f ef       	ldi	r22, 0xFF	; 255
     b9a:	87 e0       	ldi	r24, 0x07	; 7
     b9c:	92 df       	rcall	.-220    	; 0xac2 <Send_MAX7219>
     b9e:	6f ef       	ldi	r22, 0xFF	; 255
     ba0:	88 e0       	ldi	r24, 0x08	; 8
     ba2:	8f df       	rcall	.-226    	; 0xac2 <Send_MAX7219>
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	23 ed       	ldi	r18, 0xD3	; 211
     ba8:	80 e3       	ldi	r24, 0x30	; 48
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	20 40       	sbci	r18, 0x00	; 0
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <MAX7219_init+0xa4>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <MAX7219_init+0xae>
     bb4:	00 00       	nop
     bb6:	08 95       	ret

00000bb8 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	8c 01       	movw	r16, r24
     bca:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     bcc:	08 3e       	cpi	r16, 0xE8	; 232
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	18 07       	cpc	r17, r24
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <PrintTemp_MAX7219+0x1e>
     bd4:	5c c0       	rjmp	.+184    	; 0xc8e <PrintTemp_MAX7219+0xd6>
     bd6:	68 3e       	cpi	r22, 0xE8	; 232
     bd8:	73 40       	sbci	r23, 0x03	; 3
     bda:	0c f0       	brlt	.+2      	; 0xbde <PrintTemp_MAX7219+0x26>
     bdc:	58 c0       	rjmp	.+176    	; 0xc8e <PrintTemp_MAX7219+0xd6>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     bde:	7e df       	rcall	.-260    	; 0xadc <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодировани€ дл€ всех разр€дов кроме позиций 2 и 6
     be0:	6e ee       	ldi	r22, 0xEE	; 238
     be2:	89 e0       	ldi	r24, 0x09	; 9
     be4:	6e df       	rcall	.-292    	; 0xac2 <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв —
     be6:	6e e4       	ldi	r22, 0x4E	; 78
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	6b df       	rcall	.-298    	; 0xac2 <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв —
     bec:	6e e4       	ldi	r22, 0x4E	; 78
     bee:	85 e0       	ldi	r24, 0x05	; 5
     bf0:	68 df       	rcall	.-304    	; 0xac2 <Send_MAX7219>
	if (current_temp == 0)
     bf2:	01 15       	cp	r16, r1
     bf4:	11 05       	cpc	r17, r1
     bf6:	39 f4       	brne	.+14     	; 0xc06 <PrintTemp_MAX7219+0x4e>
	{
		Send_MAX7219(start_pos, 0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	62 df       	rcall	.-316    	; 0xac2 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     bfe:	60 e8       	ldi	r22, 0x80	; 128
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	5f df       	rcall	.-322    	; 0xac2 <Send_MAX7219>
     c04:	1d c0       	rjmp	.+58     	; 0xc40 <PrintTemp_MAX7219+0x88>
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	f9 2e       	mov	r15, r25
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     c0a:	2a e0       	ldi	r18, 0x0A	; 10
     c0c:	c2 2e       	mov	r12, r18
     c0e:	d1 2c       	mov	r13, r1
     c10:	c8 01       	movw	r24, r16
     c12:	b6 01       	movw	r22, r12
     c14:	2f d3       	rcall	.+1630   	; 0x1274 <__divmodhi4>
     c16:	68 2f       	mov	r22, r24
     c18:	8f 2d       	mov	r24, r15
     c1a:	53 df       	rcall	.-346    	; 0xac2 <Send_MAX7219>
     c1c:	2f 2d       	mov	r18, r15
			}
			start_pos++;
     c1e:	f3 94       	inc	r15
			current_temp /= 10;
     c20:	c8 01       	movw	r24, r16
     c22:	b6 01       	movw	r22, r12
     c24:	27 d3       	rcall	.+1614   	; 0x1274 <__divmodhi4>
     c26:	8b 01       	movw	r16, r22
			asm("nop");
     c28:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     c2a:	67 2b       	or	r22, r23
     c2c:	49 f0       	breq	.+18     	; 0xc40 <PrintTemp_MAX7219+0x88>
		{
			if((start_pos == 3)||(start_pos == 7))
     c2e:	2b 7f       	andi	r18, 0xFB	; 251
     c30:	22 30       	cpi	r18, 0x02	; 2
     c32:	71 f7       	brne	.-36     	; 0xc10 <PrintTemp_MAX7219+0x58>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     c34:	c8 01       	movw	r24, r16
     c36:	b6 01       	movw	r22, r12
     c38:	1d d3       	rcall	.+1594   	; 0x1274 <__divmodhi4>
     c3a:	68 2f       	mov	r22, r24
     c3c:	60 68       	ori	r22, 0x80	; 128
     c3e:	ec cf       	rjmp	.-40     	; 0xc18 <PrintTemp_MAX7219+0x60>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     c40:	20 97       	sbiw	r28, 0x00	; 0
     c42:	39 f4       	brne	.+14     	; 0xc52 <PrintTemp_MAX7219+0x9a>
	{
		Send_MAX7219(start_pos, 0);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	86 e0       	ldi	r24, 0x06	; 6
     c48:	3c df       	rcall	.-392    	; 0xac2 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     c4a:	60 e8       	ldi	r22, 0x80	; 128
     c4c:	87 e0       	ldi	r24, 0x07	; 7
     c4e:	39 df       	rcall	.-398    	; 0xac2 <Send_MAX7219>
     c50:	1c c0       	rjmp	.+56     	; 0xc8a <PrintTemp_MAX7219+0xd2>
     c52:	16 e0       	ldi	r17, 0x06	; 6
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     c54:	8a e0       	ldi	r24, 0x0A	; 10
     c56:	e8 2e       	mov	r14, r24
     c58:	f1 2c       	mov	r15, r1
     c5a:	ce 01       	movw	r24, r28
     c5c:	b7 01       	movw	r22, r14
     c5e:	0a d3       	rcall	.+1556   	; 0x1274 <__divmodhi4>
     c60:	68 2f       	mov	r22, r24
     c62:	81 2f       	mov	r24, r17
     c64:	2e df       	rcall	.-420    	; 0xac2 <Send_MAX7219>
     c66:	21 2f       	mov	r18, r17
			}
			start_pos++;
     c68:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     c6a:	ce 01       	movw	r24, r28
     c6c:	b7 01       	movw	r22, r14
     c6e:	02 d3       	rcall	.+1540   	; 0x1274 <__divmodhi4>
     c70:	eb 01       	movw	r28, r22
			asm("nop");
     c72:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     c74:	20 97       	sbiw	r28, 0x00	; 0
     c76:	49 f0       	breq	.+18     	; 0xc8a <PrintTemp_MAX7219+0xd2>
		{
			if((start_pos == 3)||(start_pos == 7))
     c78:	2b 7f       	andi	r18, 0xFB	; 251
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	71 f7       	brne	.-36     	; 0xc5a <PrintTemp_MAX7219+0xa2>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     c7e:	ce 01       	movw	r24, r28
     c80:	b7 01       	movw	r22, r14
     c82:	f8 d2       	rcall	.+1520   	; 0x1274 <__divmodhi4>
     c84:	68 2f       	mov	r22, r24
     c86:	60 68       	ori	r22, 0x80	; 128
     c88:	ec cf       	rjmp	.-40     	; 0xc62 <PrintTemp_MAX7219+0xaa>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <PrintTemp_MAX7219+0xd8>
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	08 95       	ret

00000ca2 <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	f6 2e       	mov	r15, r22
     cae:	d7 2f       	mov	r29, r23
     cb0:	c4 2f       	mov	r28, r20
     cb2:	c1 98       	cbi	0x18, 1	; 24
     cb4:	c2 98       	cbi	0x18, 2	; 24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	63 dd       	rcall	.-1338   	; 0x780 <spi_send_recv>
     cba:	85 e0       	ldi	r24, 0x05	; 5
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <NRF24_Transmit+0x1a>
     cc0:	00 00       	nop
     cc2:	0f 2d       	mov	r16, r15
     cc4:	1d 2f       	mov	r17, r29
     cc6:	cc 23       	and	r28, r28
     cc8:	39 f0       	breq	.+14     	; 0xcd8 <NRF24_Transmit+0x36>
     cca:	f8 01       	movw	r30, r16
     ccc:	81 91       	ld	r24, Z+
     cce:	8f 01       	movw	r16, r30
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	56 dd       	rcall	.-1364   	; 0x780 <spi_send_recv>
     cd4:	c1 50       	subi	r28, 0x01	; 1
     cd6:	f7 cf       	rjmp	.-18     	; 0xcc6 <NRF24_Transmit+0x24>
     cd8:	c2 9a       	sbi	0x18, 2	; 24
     cda:	c1 9a       	sbi	0x18, 1	; 24
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	08 95       	ret

00000ce8 <NRF24_FlushRX>:
     ce8:	c2 98       	cbi	0x18, 2	; 24
     cea:	82 ee       	ldi	r24, 0xE2	; 226
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	48 dd       	rcall	.-1392   	; 0x780 <spi_send_recv>
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	8a 95       	dec	r24
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <NRF24_FlushRX+0xa>
     cf6:	00 00       	nop
     cf8:	c2 9a       	sbi	0x18, 2	; 24
     cfa:	08 95       	ret

00000cfc <NRF24_FlushTX>:
     cfc:	c2 98       	cbi	0x18, 2	; 24
     cfe:	81 ee       	ldi	r24, 0xE1	; 225
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	3e dd       	rcall	.-1412   	; 0x780 <spi_send_recv>
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	8a 95       	dec	r24
     d08:	f1 f7       	brne	.-4      	; 0xd06 <NRF24_FlushTX+0xa>
     d0a:	00 00       	nop
     d0c:	c2 9a       	sbi	0x18, 2	; 24
     d0e:	08 95       	ret

00000d10 <NRF24_ToggleFeatures>:
     d10:	c2 98       	cbi	0x18, 2	; 24
     d12:	80 e5       	ldi	r24, 0x50	; 80
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	34 dd       	rcall	.-1432   	; 0x780 <spi_send_recv>
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	8a 95       	dec	r24
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <NRF24_ToggleFeatures+0xa>
     d1e:	00 00       	nop
     d20:	83 e7       	ldi	r24, 0x73	; 115
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	2d dd       	rcall	.-1446   	; 0x780 <spi_send_recv>
     d26:	c2 9a       	sbi	0x18, 2	; 24
     d28:	08 95       	ret

00000d2a <NRF24_Read_Buf>:
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	f6 2e       	mov	r15, r22
     d36:	d7 2f       	mov	r29, r23
     d38:	c4 2f       	mov	r28, r20
     d3a:	c2 98       	cbi	0x18, 2	; 24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	20 dd       	rcall	.-1472   	; 0x780 <spi_send_recv>
     d40:	0f 2d       	mov	r16, r15
     d42:	1d 2f       	mov	r17, r29
     d44:	cc 23       	and	r28, r28
     d46:	41 f0       	breq	.+16     	; 0xd58 <NRF24_Read_Buf+0x2e>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	19 dd       	rcall	.-1486   	; 0x780 <spi_send_recv>
     d4e:	f8 01       	movw	r30, r16
     d50:	81 93       	st	Z+, r24
     d52:	8f 01       	movw	r16, r30
     d54:	c1 50       	subi	r28, 0x01	; 1
     d56:	f6 cf       	rjmp	.-20     	; 0xd44 <NRF24_Read_Buf+0x1a>
     d58:	c2 9a       	sbi	0x18, 2	; 24
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	08 95       	ret

00000d66 <NRF24_Write_Buf>:
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	f6 2e       	mov	r15, r22
     d72:	d7 2f       	mov	r29, r23
     d74:	c4 2f       	mov	r28, r20
     d76:	c2 98       	cbi	0x18, 2	; 24
     d78:	80 62       	ori	r24, 0x20	; 32
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	01 dd       	rcall	.-1534   	; 0x780 <spi_send_recv>
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	8a 95       	dec	r24
     d82:	f1 f7       	brne	.-4      	; 0xd80 <NRF24_Write_Buf+0x1a>
     d84:	00 00       	nop
     d86:	0f 2d       	mov	r16, r15
     d88:	1d 2f       	mov	r17, r29
     d8a:	cc 23       	and	r28, r28
     d8c:	39 f0       	breq	.+14     	; 0xd9c <NRF24_Write_Buf+0x36>
     d8e:	f8 01       	movw	r30, r16
     d90:	81 91       	ld	r24, Z+
     d92:	8f 01       	movw	r16, r30
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	f4 dc       	rcall	.-1560   	; 0x780 <spi_send_recv>
     d98:	c1 50       	subi	r28, 0x01	; 1
     d9a:	f7 cf       	rjmp	.-18     	; 0xd8a <NRF24_Write_Buf+0x24>
     d9c:	c2 9a       	sbi	0x18, 2	; 24
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	08 95       	ret

00000daa <NRF24L01_TX_Mode>:
     daa:	43 e0       	ldi	r20, 0x03	; 3
     dac:	63 e6       	ldi	r22, 0x63	; 99
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 e1       	ldi	r24, 0x10	; 16
     db2:	d9 df       	rcall	.-78     	; 0xd66 <NRF24_Write_Buf>
     db4:	43 e0       	ldi	r20, 0x03	; 3
     db6:	63 e6       	ldi	r22, 0x63	; 99
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	8b e0       	ldi	r24, 0x0B	; 11
     dbc:	d4 df       	rcall	.-88     	; 0xd66 <NRF24_Write_Buf>
     dbe:	c1 98       	cbi	0x18, 1	; 24
     dc0:	93 df       	rcall	.-218    	; 0xce8 <NRF24_FlushRX>
     dc2:	9c cf       	rjmp	.-200    	; 0xcfc <NRF24_FlushTX>

00000dc4 <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
     dc4:	cf 93       	push	r28
     dc6:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
	LOW_CSN;
     dc8:	c2 98       	cbi	0x18, 2	; 24
	spi_send_recv(reg);
     dca:	80 62       	ori	r24, 0x20	; 32
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	d8 dc       	rcall	.-1616   	; 0x780 <spi_send_recv>
	spi_send_recv(data_out);
     dd0:	8c 2f       	mov	r24, r28
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	d5 dc       	rcall	.-1622   	; 0x780 <spi_send_recv>
	HIGH_CSN;
     dd6:	c2 9a       	sbi	0x18, 2	; 24
}
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
     ddc:	cf 93       	push	r28
     dde:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
     de0:	c2 98       	cbi	0x18, 2	; 24
	data_in = spi_send_recv(reg);
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	cd dc       	rcall	.-1638   	; 0x780 <spi_send_recv>
	if(reg != STATUS)
     de6:	c7 30       	cpi	r28, 0x07	; 7
     de8:	19 f0       	breq	.+6      	; 0xdf0 <nRF_read_register+0x14>
	{
		data_in = spi_send_recv(NOP);
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	c8 dc       	rcall	.-1648   	; 0x780 <spi_send_recv>
	}
	HIGH_CSN;
     df0:	c2 9a       	sbi	0x18, 2	; 24
	return data_in;
}
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	cf 93       	push	r28
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	df df       	rcall	.-66     	; 0xddc <nRF_read_register>
     e1e:	c8 2f       	mov	r28, r24
	if(status & 0x40)
     e20:	86 ff       	sbrs	r24, 6
     e22:	47 c1       	rjmp	.+654    	; 0x10b2 <__vector_1+0x2bc>
	{
		pipe = (status>>1)&0x07;
     e24:	86 95       	lsr	r24
     e26:	87 70       	andi	r24, 0x07	; 7
     e28:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
     e2c:	45 e0       	ldi	r20, 0x05	; 5
     e2e:	6e ed       	ldi	r22, 0xDE	; 222
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	81 e6       	ldi	r24, 0x61	; 97
     e34:	7a df       	rcall	.-268    	; 0xd2a <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
     e36:	60 e4       	ldi	r22, 0x40	; 64
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	c4 df       	rcall	.-120    	; 0xdc4 <nRF_write_register>
		rx_flag = 1;
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <rx_flag>
		PORTD |= (1<<LED_RX);
     e42:	95 9a       	sbi	0x12, 5	; 18
     e44:	2f ef       	ldi	r18, 0xFF	; 255
     e46:	31 ee       	ldi	r19, 0xE1	; 225
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	21 50       	subi	r18, 0x01	; 1
     e4c:	30 40       	sbci	r19, 0x00	; 0
     e4e:	80 40       	sbci	r24, 0x00	; 0
     e50:	e1 f7       	brne	.-8      	; 0xe4a <__vector_1+0x54>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <__vector_1+0x5e>
     e54:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
     e56:	95 98       	cbi	0x12, 5	; 18
		millis_hometemp_update = millis;
     e58:	40 91 c7 00 	lds	r20, 0x00C7	; 0x8000c7 <millis>
     e5c:	50 91 c8 00 	lds	r21, 0x00C8	; 0x8000c8 <millis+0x1>
     e60:	60 91 c9 00 	lds	r22, 0x00C9	; 0x8000c9 <millis+0x2>
     e64:	70 91 ca 00 	lds	r23, 0x00CA	; 0x8000ca <millis+0x3>
     e68:	40 93 c3 00 	sts	0x00C3, r20	; 0x8000c3 <millis_hometemp_update>
     e6c:	50 93 c4 00 	sts	0x00C4, r21	; 0x8000c4 <millis_hometemp_update+0x1>
     e70:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <millis_hometemp_update+0x2>
     e74:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <millis_hometemp_update+0x3>
		
		gas_boiler_enable_flag = RX_BUF[0];
     e78:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <RX_BUF>
     e7c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <gas_boiler_enable_flag>
		switch (gas_boiler_enable_flag)
     e80:	8b 30       	cpi	r24, 0x0B	; 11
     e82:	09 f4       	brne	.+2      	; 0xe86 <__vector_1+0x90>
     e84:	58 c0       	rjmp	.+176    	; 0xf36 <__vector_1+0x140>
     e86:	30 f4       	brcc	.+12     	; 0xe94 <__vector_1+0x9e>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	99 f0       	breq	.+38     	; 0xeb2 <__vector_1+0xbc>
     e8c:	90 f0       	brcs	.+36     	; 0xeb2 <__vector_1+0xbc>
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	91 f1       	breq	.+100    	; 0xef6 <__vector_1+0x100>
     e92:	0f c1       	rjmp	.+542    	; 0x10b2 <__vector_1+0x2bc>
     e94:	85 36       	cpi	r24, 0x65	; 101
     e96:	09 f4       	brne	.+2      	; 0xe9a <__vector_1+0xa4>
     e98:	8a c0       	rjmp	.+276    	; 0xfae <__vector_1+0x1b8>
     e9a:	20 f4       	brcc	.+8      	; 0xea4 <__vector_1+0xae>
     e9c:	84 36       	cpi	r24, 0x64	; 100
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__vector_1+0xac>
     ea0:	69 c0       	rjmp	.+210    	; 0xf74 <__vector_1+0x17e>
     ea2:	07 c1       	rjmp	.+526    	; 0x10b2 <__vector_1+0x2bc>
     ea4:	8e 36       	cpi	r24, 0x6E	; 110
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__vector_1+0xb4>
     ea8:	a3 c0       	rjmp	.+326    	; 0xff0 <__vector_1+0x1fa>
     eaa:	8f 36       	cpi	r24, 0x6F	; 111
     eac:	09 f4       	brne	.+2      	; 0xeb0 <__vector_1+0xba>
     eae:	c4 c0       	rjmp	.+392    	; 0x1038 <__vector_1+0x242>
     eb0:	00 c1       	rjmp	.+512    	; 0x10b2 <__vector_1+0x2bc>
						EEPROM_write(4, home_temp_rx_fraction);
						EEPROM_write(6, work_mode);
					}
					break;
			case 1:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     eb2:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     eb6:	63 33       	cpi	r22, 0x33	; 51
     eb8:	08 f0       	brcs	.+2      	; 0xebc <__vector_1+0xc6>
     eba:	fb c0       	rjmp	.+502    	; 0x10b2 <__vector_1+0x2bc>
     ebc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     ec0:	8a 30       	cpi	r24, 0x0A	; 10
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__vector_1+0xd0>
     ec4:	f6 c0       	rjmp	.+492    	; 0x10b2 <__vector_1+0x2bc>
     ec6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <RX_BUF+0x1>
     eca:	93 33       	cpi	r25, 0x33	; 51
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <__vector_1+0xda>
     ece:	f1 c0       	rjmp	.+482    	; 0x10b2 <__vector_1+0x2bc>
     ed0:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     ed4:	9a 30       	cpi	r25, 0x0A	; 10
     ed6:	08 f0       	brcs	.+2      	; 0xeda <__vector_1+0xe4>
     ed8:	ec c0       	rjmp	.+472    	; 0x10b2 <__vector_1+0x2bc>
					{
						work_mode = 0;
     eda:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     ede:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     ee2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <home_temp_rx_fraction>
						EEPROM_write(3, home_temp_rx_integer);
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b4 d9       	rcall	.-3224   	; 0x254 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
     eec:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <home_temp_rx_fraction>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	d8 c0       	rjmp	.+432    	; 0x10a6 <__vector_1+0x2b0>
						EEPROM_write(6, work_mode);
					}
					break;
			case 10:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     ef6:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     efa:	93 33       	cpi	r25, 0x33	; 51
     efc:	08 f0       	brcs	.+2      	; 0xf00 <__vector_1+0x10a>
     efe:	d9 c0       	rjmp	.+434    	; 0x10b2 <__vector_1+0x2bc>
     f00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     f04:	8a 30       	cpi	r24, 0x0A	; 10
     f06:	08 f0       	brcs	.+2      	; 0xf0a <__vector_1+0x114>
     f08:	d4 c0       	rjmp	.+424    	; 0x10b2 <__vector_1+0x2bc>
     f0a:	20 91 df 00 	lds	r18, 0x00DF	; 0x8000df <RX_BUF+0x1>
     f0e:	23 33       	cpi	r18, 0x33	; 51
     f10:	08 f0       	brcs	.+2      	; 0xf14 <__vector_1+0x11e>
     f12:	cf c0       	rjmp	.+414    	; 0x10b2 <__vector_1+0x2bc>
     f14:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     f18:	2a 30       	cpi	r18, 0x0A	; 10
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <__vector_1+0x128>
     f1c:	ca c0       	rjmp	.+404    	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 0;
     f1e:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 1;
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f28:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     f2c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <home_temp_rx_fraction>
						PORTB |= (1<<MOSFET);
     f30:	c0 9a       	sbi	0x18, 0	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
     f32:	94 98       	cbi	0x12, 4	; 18
     f34:	aa c0       	rjmp	.+340    	; 0x108a <__vector_1+0x294>
						EEPROM_write(5, gas_boiler_enable_flag);
						EEPROM_write(6, work_mode);
					}
					break;
			case 11:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f36:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     f3a:	23 33       	cpi	r18, 0x33	; 51
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__vector_1+0x14a>
     f3e:	b9 c0       	rjmp	.+370    	; 0x10b2 <__vector_1+0x2bc>
     f40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     f44:	8a 30       	cpi	r24, 0x0A	; 10
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__vector_1+0x154>
     f48:	b4 c0       	rjmp	.+360    	; 0x10b2 <__vector_1+0x2bc>
     f4a:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <RX_BUF+0x1>
     f4e:	33 33       	cpi	r19, 0x33	; 51
     f50:	08 f0       	brcs	.+2      	; 0xf54 <__vector_1+0x15e>
     f52:	af c0       	rjmp	.+350    	; 0x10b2 <__vector_1+0x2bc>
     f54:	30 91 e0 00 	lds	r19, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     f58:	3a 30       	cpi	r19, 0x0A	; 10
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <__vector_1+0x168>
     f5c:	aa c0       	rjmp	.+340    	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 1;
     f5e:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 1;
     f62:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f66:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     f6a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <home_temp_rx_fraction>
						PORTB &= ~(1<<MOSFET);
     f6e:	c0 98       	cbi	0x18, 0	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
     f70:	94 9a       	sbi	0x12, 4	; 18
     f72:	8b c0       	rjmp	.+278    	; 0x108a <__vector_1+0x294>
						EEPROM_write(5, gas_boiler_enable_flag);
						EEPROM_write(6, work_mode);
					}
					break;
			case 100:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f74:	20 91 e1 00 	lds	r18, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     f78:	23 33       	cpi	r18, 0x33	; 51
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__vector_1+0x188>
     f7c:	9a c0       	rjmp	.+308    	; 0x10b2 <__vector_1+0x2bc>
     f7e:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     f82:	9a 30       	cpi	r25, 0x0A	; 10
     f84:	08 f0       	brcs	.+2      	; 0xf88 <__vector_1+0x192>
     f86:	95 c0       	rjmp	.+298    	; 0x10b2 <__vector_1+0x2bc>
     f88:	60 91 df 00 	lds	r22, 0x00DF	; 0x8000df <RX_BUF+0x1>
     f8c:	63 33       	cpi	r22, 0x33	; 51
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <__vector_1+0x19c>
     f90:	90 c0       	rjmp	.+288    	; 0x10b2 <__vector_1+0x2bc>
     f92:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     f96:	8a 30       	cpi	r24, 0x0A	; 10
     f98:	08 f0       	brcs	.+2      	; 0xf9c <__vector_1+0x1a6>
     f9a:	8b c0       	rjmp	.+278    	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 0;
     f9c:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 0;
     fa0:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     fa4:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     fa8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <home_temp_rx_fraction>
     fac:	1c c0       	rjmp	.+56     	; 0xfe6 <__vector_1+0x1f0>
						EEPROM_write(5, gas_boiler_enable_flag);
						EEPROM_write(6, work_mode);
					}
					break;
			case 101:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     fae:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     fb2:	33 33       	cpi	r19, 0x33	; 51
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <__vector_1+0x1c2>
     fb6:	7d c0       	rjmp	.+250    	; 0x10b2 <__vector_1+0x2bc>
     fb8:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     fbc:	2a 30       	cpi	r18, 0x0A	; 10
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <__vector_1+0x1cc>
     fc0:	78 c0       	rjmp	.+240    	; 0x10b2 <__vector_1+0x2bc>
     fc2:	60 91 df 00 	lds	r22, 0x00DF	; 0x8000df <RX_BUF+0x1>
     fc6:	63 33       	cpi	r22, 0x33	; 51
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <__vector_1+0x1d6>
     fca:	73 c0       	rjmp	.+230    	; 0x10b2 <__vector_1+0x2bc>
     fcc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
     fd0:	8a 30       	cpi	r24, 0x0A	; 10
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__vector_1+0x1e0>
     fd4:	6e c0       	rjmp	.+220    	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 1;
     fd6:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 0;
     fda:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     fde:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     fe2:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     fe6:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     fea:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_setpoint_fraction>
     fee:	45 c0       	rjmp	.+138    	; 0x107a <__vector_1+0x284>
						EEPROM_write(5, gas_boiler_enable_flag);
						EEPROM_write(6, work_mode);
					}
					break;
			case 110:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     ff0:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
     ff4:	33 33       	cpi	r19, 0x33	; 51
     ff6:	08 f0       	brcs	.+2      	; 0xffa <__vector_1+0x204>
     ff8:	5c c0       	rjmp	.+184    	; 0x10b2 <__vector_1+0x2bc>
     ffa:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
     ffe:	2a 30       	cpi	r18, 0x0A	; 10
    1000:	08 f0       	brcs	.+2      	; 0x1004 <__vector_1+0x20e>
    1002:	57 c0       	rjmp	.+174    	; 0x10b2 <__vector_1+0x2bc>
    1004:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <RX_BUF+0x1>
    1008:	93 33       	cpi	r25, 0x33	; 51
    100a:	08 f0       	brcs	.+2      	; 0x100e <__vector_1+0x218>
    100c:	52 c0       	rjmp	.+164    	; 0x10b2 <__vector_1+0x2bc>
    100e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
    1012:	8a 30       	cpi	r24, 0x0A	; 10
    1014:	08 f0       	brcs	.+2      	; 0x1018 <__vector_1+0x222>
    1016:	4d c0       	rjmp	.+154    	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 0;
    1018:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 1;
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	40 93 cb 00 	sts	0x00CB, r20	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1022:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    1026:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    102a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    102e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_setpoint_fraction>
						PORTB |= (1<<MOSFET);
    1032:	c0 9a       	sbi	0x18, 0	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
    1034:	94 98       	cbi	0x12, 4	; 18
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <__vector_1+0x280>
						EEPROM_write(5, gas_boiler_enable_flag);
						EEPROM_write(6, work_mode);
					}
					break;
			case 111:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    1038:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <RX_BUF+0x3>
    103c:	33 33       	cpi	r19, 0x33	; 51
    103e:	c8 f5       	brcc	.+114    	; 0x10b2 <__vector_1+0x2bc>
    1040:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <RX_BUF+0x4>
    1044:	2a 30       	cpi	r18, 0x0A	; 10
    1046:	a8 f5       	brcc	.+106    	; 0x10b2 <__vector_1+0x2bc>
    1048:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <RX_BUF+0x1>
    104c:	93 33       	cpi	r25, 0x33	; 51
    104e:	88 f5       	brcc	.+98     	; 0x10b2 <__vector_1+0x2bc>
    1050:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <RX_BUF+0x2>
    1054:	8a 30       	cpi	r24, 0x0A	; 10
    1056:	68 f5       	brcc	.+90     	; 0x10b2 <__vector_1+0x2bc>
					{
						gas_boiler_enable_flag = 1;
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <gas_boiler_enable_flag>
						work_mode = 1;
    105e:	40 93 cb 00 	sts	0x00CB, r20	; 0x8000cb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1062:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    1066:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    106a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    106e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <temp_setpoint_fraction>
						PORTB &= ~(1<<MOSFET);
    1072:	c0 98       	cbi	0x18, 0	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
    1074:	94 9a       	sbi	0x12, 4	; 18
						EEPROM_write(1, temp_setpoint_integer);
    1076:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <temp_setpoint_integer>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	ea d8       	rcall	.-3628   	; 0x254 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    1080:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <temp_setpoint_fraction>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	e5 d8       	rcall	.-3638   	; 0x254 <EEPROM_write>
						EEPROM_write(3, home_temp_rx_integer);
    108a:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <home_temp_rx_integer>
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	e0 d8       	rcall	.-3648   	; 0x254 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    1094:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <home_temp_rx_fraction>
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	db d8       	rcall	.-3658   	; 0x254 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    109e:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <gas_boiler_enable_flag>
    10a2:	85 e0       	ldi	r24, 0x05	; 5
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	d6 d8       	rcall	.-3668   	; 0x254 <EEPROM_write>
						EEPROM_write(6, work_mode);
    10a8:	60 91 cb 00 	lds	r22, 0x00CB	; 0x8000cb <work_mode>
    10ac:	86 e0       	ldi	r24, 0x06	; 6
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	d1 d8       	rcall	.-3678   	; 0x254 <EEPROM_write>
		}
		home_temp_rx_integer = RX_BUF[3];
		home_temp_rx_fraction = RX_BUF[4];
		*/
	}
	if(status&TX_DS) //tx_ds == 0x20
    10b2:	c5 70       	andi	r28, 0x05	; 5
    10b4:	19 f0       	breq	.+6      	; 0x10bc <__vector_1+0x2c6>
	{
		nRF_write_register(STATUS, 0x20);
    10b6:	60 e2       	ldi	r22, 0x20	; 32
    10b8:	87 e0       	ldi	r24, 0x07	; 7
    10ba:	84 de       	rcall	.-760    	; 0xdc4 <nRF_write_register>
	}
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	cf 91       	pop	r28
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	7c de       	rcall	.-776    	; 0xddc <nRF_read_register>
	//разбудим модуль и переведЄм его в режим приЄмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    10e4:	68 2f       	mov	r22, r24
    10e6:	63 60       	ori	r22, 0x03	; 3
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	6c de       	rcall	.-808    	; 0xdc4 <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    10ec:	43 e0       	ldi	r20, 0x03	; 3
    10ee:	60 e6       	ldi	r22, 0x60	; 96
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e1       	ldi	r24, 0x10	; 16
    10f4:	38 de       	rcall	.-912    	; 0xd66 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    10f6:	43 e0       	ldi	r20, 0x03	; 3
    10f8:	60 e6       	ldi	r22, 0x60	; 96
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	8b e0       	ldi	r24, 0x0B	; 11
    10fe:	33 de       	rcall	.-922    	; 0xd66 <NRF24_Write_Buf>
	HIGH_CE;
    1100:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1102:	87 e5       	ldi	r24, 0x57	; 87
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <NRF24L01_RX_Mode+0x26>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <NRF24L01_RX_Mode+0x2c>
    110c:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    110e:	ec dd       	rcall	.-1064   	; 0xce8 <NRF24_FlushRX>
	NRF24_FlushTX();
    1110:	f5 cd       	rjmp	.-1046   	; 0xcfc <NRF24_FlushTX>

00001112 <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    1112:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1114:	8f e1       	ldi	r24, 0x1F	; 31
    1116:	9e e4       	ldi	r25, 0x4E	; 78
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <NRF24_ini+0x6>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <NRF24_ini+0xc>
    111e:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    1120:	6a e0       	ldi	r22, 0x0A	; 10
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	4f de       	rcall	.-866    	; 0xdc4 <nRF_write_register>
    1126:	8f e1       	ldi	r24, 0x1F	; 31
    1128:	9e e4       	ldi	r25, 0x4E	; 78
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <NRF24_ini+0x18>
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <NRF24_ini+0x1e>
    1130:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	46 de       	rcall	.-884    	; 0xdc4 <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	43 de       	rcall	.-890    	; 0xdc4 <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	40 de       	rcall	.-896    	; 0xdc4 <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    1144:	6f e6       	ldi	r22, 0x6F	; 111
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	3d de       	rcall	.-902    	; 0xdc4 <nRF_write_register>
	NRF24_ToggleFeatures();
    114a:	e2 dd       	rcall	.-1084   	; 0xd10 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	8d e1       	ldi	r24, 0x1D	; 29
    1150:	39 de       	rcall	.-910    	; 0xdc4 <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	8c e1       	ldi	r24, 0x1C	; 28
    1156:	36 de       	rcall	.-916    	; 0xdc4 <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    1158:	60 e7       	ldi	r22, 0x70	; 112
    115a:	87 e0       	ldi	r24, 0x07	; 7
    115c:	33 de       	rcall	.-922    	; 0xdc4 <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    115e:	6c e4       	ldi	r22, 0x4C	; 76
    1160:	85 e0       	ldi	r24, 0x05	; 5
    1162:	30 de       	rcall	.-928    	; 0xdc4 <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    1164:	66 e0       	ldi	r22, 0x06	; 6
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	2d de       	rcall	.-934    	; 0xdc4 <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    116a:	43 e0       	ldi	r20, 0x03	; 3
    116c:	60 e6       	ldi	r22, 0x60	; 96
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e1       	ldi	r24, 0x10	; 16
    1172:	f9 dd       	rcall	.-1038   	; 0xd66 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    1174:	43 e0       	ldi	r20, 0x03	; 3
    1176:	60 e6       	ldi	r22, 0x60	; 96
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	8b e0       	ldi	r24, 0x0B	; 11
    117c:	f4 dd       	rcall	.-1048   	; 0xd66 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    117e:	65 e0       	ldi	r22, 0x05	; 5
    1180:	82 e1       	ldi	r24, 0x12	; 18
    1182:	20 de       	rcall	.-960    	; 0xdc4 <nRF_write_register>
	//пока уходим в режим приЄмника
	NRF24L01_RX_Mode();
    1184:	ad cf       	rjmp	.-166    	; 0x10e0 <NRF24L01_RX_Mode>

00001186 <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потер€нных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    118c:	0e de       	rcall	.-996    	; 0xdaa <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	25 de       	rcall	.-950    	; 0xddc <nRF_read_register>
    1192:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в сп€щий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    1194:	68 2f       	mov	r22, r24
    1196:	62 60       	ori	r22, 0x02	; 2
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	14 de       	rcall	.-984    	; 0xdc4 <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119c:	87 e5       	ldi	r24, 0x57	; 87
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <NRF24L01_Send+0x1a>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <NRF24L01_Send+0x20>
    11a6:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	//ќтправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    11a8:	45 e0       	ldi	r20, 0x05	; 5
    11aa:	be 01       	movw	r22, r28
    11ac:	80 ea       	ldi	r24, 0xA0	; 160
    11ae:	79 dd       	rcall	.-1294   	; 0xca2 <NRF24_Transmit>
	HIGH_CE;
    11b0:	c1 9a       	sbi	0x18, 1	; 24
    11b2:	90 e5       	ldi	r25, 0x50	; 80
    11b4:	9a 95       	dec	r25
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <NRF24L01_Send+0x2e>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    11b8:	c1 98       	cbi	0x18, 1	; 24
	while( (PIND&(1<<IRQ)) != 0);
    11ba:	82 99       	sbic	0x10, 2	; 16
    11bc:	fe cf       	rjmp	.-4      	; 0x11ba <NRF24L01_Send+0x34>
	status = nRF_read_register(STATUS);
    11be:	87 e0       	ldi	r24, 0x07	; 7
    11c0:	0d de       	rcall	.-998    	; 0xddc <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    11c2:	98 2f       	mov	r25, r24
    11c4:	95 70       	andi	r25, 0x05	; 5
    11c6:	79 f0       	breq	.+30     	; 0x11e6 <NRF24L01_Send+0x60>
	{
		PORTD |= (1<<LED_TX);
    11c8:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	81 ee       	ldi	r24, 0xE1	; 225
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	80 40       	sbci	r24, 0x00	; 0
    11d4:	90 40       	sbci	r25, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <NRF24L01_Send+0x4a>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <NRF24L01_Send+0x54>
    11da:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    11dc:	96 98       	cbi	0x12, 6	; 18
		nRF_write_register(STATUS, 0x20);
    11de:	60 e2       	ldi	r22, 0x20	; 32
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	f0 dd       	rcall	.-1056   	; 0xdc4 <nRF_write_register>
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <NRF24L01_Send+0x6c>
	}
	else if(status&MAX_RT)
    11e6:	82 ff       	sbrs	r24, 2
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <NRF24L01_Send+0x6c>
	{
		nRF_write_register(STATUS, 0x10);
    11ea:	60 e1       	ldi	r22, 0x10	; 16
    11ec:	87 e0       	ldi	r24, 0x07	; 7
    11ee:	ea dd       	rcall	.-1068   	; 0xdc4 <nRF_write_register>
		NRF24_FlushTX();
    11f0:	85 dd       	rcall	.-1270   	; 0xcfc <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	f3 dd       	rcall	.-1050   	; 0xddc <nRF_read_register>
    11f6:	c8 2f       	mov	r28, r24
	//”ходим в режим приЄмника
	NRF24L01_RX_Mode();
    11f8:	73 df       	rcall	.-282    	; 0x10e0 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    11fa:	60 e7       	ldi	r22, 0x70	; 112
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	e2 dd       	rcall	.-1084   	; 0xdc4 <nRF_write_register>
	return regval;
}
    1200:	8c 2f       	mov	r24, r28
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <USART_Init>:

extern uint8_t rx_flag;

void USART_Init( unsigned int speed)//»нициализаци€ модул€ USART
{	
  UBRRH = (unsigned char)(speed>>8);
    1208:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    120a:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //¬ключаем прием и передачу по USART
    120c:	8a b1       	in	r24, 0x0a	; 10
    120e:	88 61       	ori	r24, 0x18	; 24
    1210:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //–азрешаем прерывание при приеме
    1212:	57 9a       	sbi	0x0a, 7	; 10
  UCSRA |= (1<<U2X); // ƒл€ 8 мгц, удвоение скорости
    1214:	59 9a       	sbi	0x0b, 1	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// ќбращаемс€ именно к регистру UCSRC (URSEL=1),
    1216:	80 b5       	in	r24, 0x20	; 32
    1218:	8e 68       	ori	r24, 0x8E	; 142
    121a:	80 bd       	out	0x20, r24	; 32
    121c:	08 95       	ret

0000121e <USART_Transmit>:
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	24 2f       	mov	r18, r20
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	01 90       	ld	r0, Z+
    1228:	00 20       	and	r0, r0
    122a:	e9 f7       	brne	.-6      	; 0x1226 <USART_Transmit+0x8>
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	e8 1b       	sub	r30, r24
    1230:	f9 0b       	sbc	r31, r25
    1232:	2e 17       	cp	r18, r30
    1234:	3f 07       	cpc	r19, r31
    1236:	48 f4       	brcc	.+18     	; 0x124a <USART_Transmit+0x2c>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
    1238:	5d 9b       	sbis	0x0b, 5	; 11
    123a:	fe cf       	rjmp	.-4      	; 0x1238 <USART_Transmit+0x1a>
	  UDR = data[i]; //Ќачало передачи данных
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	20 81       	ld	r18, Z
    1244:	2c b9       	out	0x0c, r18	; 12
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    1246:	4f 5f       	subi	r20, 0xFF	; 255
    1248:	eb cf       	rjmp	.-42     	; 0x1220 <USART_Transmit+0x2>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
	  UDR = data[i]; //Ќачало передачи данных
  }
}
    124a:	08 95       	ret

0000124c <__udivmodhi4>:
    124c:	aa 1b       	sub	r26, r26
    124e:	bb 1b       	sub	r27, r27
    1250:	51 e1       	ldi	r21, 0x11	; 17
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <__udivmodhi4_ep>

00001254 <__udivmodhi4_loop>:
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	a6 17       	cp	r26, r22
    125a:	b7 07       	cpc	r27, r23
    125c:	10 f0       	brcs	.+4      	; 0x1262 <__udivmodhi4_ep>
    125e:	a6 1b       	sub	r26, r22
    1260:	b7 0b       	sbc	r27, r23

00001262 <__udivmodhi4_ep>:
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	5a 95       	dec	r21
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__udivmodhi4_loop>
    126a:	80 95       	com	r24
    126c:	90 95       	com	r25
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	08 95       	ret

00001274 <__divmodhi4>:
    1274:	97 fb       	bst	r25, 7
    1276:	07 2e       	mov	r0, r23
    1278:	16 f4       	brtc	.+4      	; 0x127e <__divmodhi4+0xa>
    127a:	00 94       	com	r0
    127c:	06 d0       	rcall	.+12     	; 0x128a <__divmodhi4_neg1>
    127e:	77 fd       	sbrc	r23, 7
    1280:	08 d0       	rcall	.+16     	; 0x1292 <__divmodhi4_neg2>
    1282:	e4 df       	rcall	.-56     	; 0x124c <__udivmodhi4>
    1284:	07 fc       	sbrc	r0, 7
    1286:	05 d0       	rcall	.+10     	; 0x1292 <__divmodhi4_neg2>
    1288:	3e f4       	brtc	.+14     	; 0x1298 <__divmodhi4_exit>

0000128a <__divmodhi4_neg1>:
    128a:	90 95       	com	r25
    128c:	81 95       	neg	r24
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__divmodhi4_neg2>:
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255

00001298 <__divmodhi4_exit>:
    1298:	08 95       	ret

0000129a <__divmodsi4>:
    129a:	05 2e       	mov	r0, r21
    129c:	97 fb       	bst	r25, 7
    129e:	16 f4       	brtc	.+4      	; 0x12a4 <__divmodsi4+0xa>
    12a0:	00 94       	com	r0
    12a2:	0f d0       	rcall	.+30     	; 0x12c2 <__negsi2>
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	05 d0       	rcall	.+10     	; 0x12b2 <__divmodsi4_neg2>
    12a8:	14 d0       	rcall	.+40     	; 0x12d2 <__udivmodsi4>
    12aa:	07 fc       	sbrc	r0, 7
    12ac:	02 d0       	rcall	.+4      	; 0x12b2 <__divmodsi4_neg2>
    12ae:	46 f4       	brtc	.+16     	; 0x12c0 <__divmodsi4_exit>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__negsi2>

000012b2 <__divmodsi4_neg2>:
    12b2:	50 95       	com	r21
    12b4:	40 95       	com	r20
    12b6:	30 95       	com	r19
    12b8:	21 95       	neg	r18
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	4f 4f       	sbci	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255

000012c0 <__divmodsi4_exit>:
    12c0:	08 95       	ret

000012c2 <__negsi2>:
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__udivmodsi4>:
    12d2:	a1 e2       	ldi	r26, 0x21	; 33
    12d4:	1a 2e       	mov	r1, r26
    12d6:	aa 1b       	sub	r26, r26
    12d8:	bb 1b       	sub	r27, r27
    12da:	fd 01       	movw	r30, r26
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <__udivmodsi4_ep>

000012de <__udivmodsi4_loop>:
    12de:	aa 1f       	adc	r26, r26
    12e0:	bb 1f       	adc	r27, r27
    12e2:	ee 1f       	adc	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	a2 17       	cp	r26, r18
    12e8:	b3 07       	cpc	r27, r19
    12ea:	e4 07       	cpc	r30, r20
    12ec:	f5 07       	cpc	r31, r21
    12ee:	20 f0       	brcs	.+8      	; 0x12f8 <__udivmodsi4_ep>
    12f0:	a2 1b       	sub	r26, r18
    12f2:	b3 0b       	sbc	r27, r19
    12f4:	e4 0b       	sbc	r30, r20
    12f6:	f5 0b       	sbc	r31, r21

000012f8 <__udivmodsi4_ep>:
    12f8:	66 1f       	adc	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	1a 94       	dec	r1
    1302:	69 f7       	brne	.-38     	; 0x12de <__udivmodsi4_loop>
    1304:	60 95       	com	r22
    1306:	70 95       	com	r23
    1308:	80 95       	com	r24
    130a:	90 95       	com	r25
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	bd 01       	movw	r22, r26
    1312:	cf 01       	movw	r24, r30
    1314:	08 95       	ret

00001316 <strtol>:
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e0 e9       	ldi	r30, 0x90	; 144
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	fc c3       	rjmp	.+2040   	; 0x1b18 <__prologue_saves__+0x2>
    1320:	5c 01       	movw	r10, r24
    1322:	6b 01       	movw	r12, r22
    1324:	7a 01       	movw	r14, r20
    1326:	61 15       	cp	r22, r1
    1328:	71 05       	cpc	r23, r1
    132a:	19 f0       	breq	.+6      	; 0x1332 <strtol+0x1c>
    132c:	fb 01       	movw	r30, r22
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	80 83       	st	Z, r24
    1332:	e1 14       	cp	r14, r1
    1334:	f1 04       	cpc	r15, r1
    1336:	29 f0       	breq	.+10     	; 0x1342 <strtol+0x2c>
    1338:	c7 01       	movw	r24, r14
    133a:	02 97       	sbiw	r24, 0x02	; 2
    133c:	83 97       	sbiw	r24, 0x23	; 35
    133e:	08 f0       	brcs	.+2      	; 0x1342 <strtol+0x2c>
    1340:	e2 c0       	rjmp	.+452    	; 0x1506 <strtol+0x1f0>
    1342:	e5 01       	movw	r28, r10
    1344:	21 96       	adiw	r28, 0x01	; 1
    1346:	f5 01       	movw	r30, r10
    1348:	10 81       	ld	r17, Z
    134a:	81 2f       	mov	r24, r17
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	f4 d0       	rcall	.+488    	; 0x1538 <isspace>
    1350:	89 2b       	or	r24, r25
    1352:	11 f0       	breq	.+4      	; 0x1358 <strtol+0x42>
    1354:	5e 01       	movw	r10, r28
    1356:	f5 cf       	rjmp	.-22     	; 0x1342 <strtol+0x2c>
    1358:	1d 32       	cpi	r17, 0x2D	; 45
    135a:	29 f4       	brne	.+10     	; 0x1366 <strtol+0x50>
    135c:	21 96       	adiw	r28, 0x01	; 1
    135e:	f5 01       	movw	r30, r10
    1360:	11 81       	ldd	r17, Z+1	; 0x01
    1362:	01 e0       	ldi	r16, 0x01	; 1
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <strtol+0x5e>
    1366:	1b 32       	cpi	r17, 0x2B	; 43
    1368:	21 f4       	brne	.+8      	; 0x1372 <strtol+0x5c>
    136a:	e5 01       	movw	r28, r10
    136c:	22 96       	adiw	r28, 0x02	; 2
    136e:	f5 01       	movw	r30, r10
    1370:	11 81       	ldd	r17, Z+1	; 0x01
    1372:	00 e0       	ldi	r16, 0x00	; 0
    1374:	e1 14       	cp	r14, r1
    1376:	f1 04       	cpc	r15, r1
    1378:	09 f1       	breq	.+66     	; 0x13bc <strtol+0xa6>
    137a:	f0 e1       	ldi	r31, 0x10	; 16
    137c:	ef 16       	cp	r14, r31
    137e:	f1 04       	cpc	r15, r1
    1380:	29 f4       	brne	.+10     	; 0x138c <strtol+0x76>
    1382:	3e c0       	rjmp	.+124    	; 0x1400 <strtol+0xea>
    1384:	10 e3       	ldi	r17, 0x30	; 48
    1386:	e1 14       	cp	r14, r1
    1388:	f1 04       	cpc	r15, r1
    138a:	21 f1       	breq	.+72     	; 0x13d4 <strtol+0xbe>
    138c:	28 e0       	ldi	r18, 0x08	; 8
    138e:	e2 16       	cp	r14, r18
    1390:	f1 04       	cpc	r15, r1
    1392:	01 f1       	breq	.+64     	; 0x13d4 <strtol+0xbe>
    1394:	54 f4       	brge	.+20     	; 0x13aa <strtol+0x94>
    1396:	e2 e0       	ldi	r30, 0x02	; 2
    1398:	ee 16       	cp	r14, r30
    139a:	f1 04       	cpc	r15, r1
    139c:	21 f5       	brne	.+72     	; 0x13e6 <strtol+0xd0>
    139e:	81 2c       	mov	r8, r1
    13a0:	91 2c       	mov	r9, r1
    13a2:	a1 2c       	mov	r10, r1
    13a4:	b0 e4       	ldi	r27, 0x40	; 64
    13a6:	bb 2e       	mov	r11, r27
    13a8:	3d c0       	rjmp	.+122    	; 0x1424 <strtol+0x10e>
    13aa:	fa e0       	ldi	r31, 0x0A	; 10
    13ac:	ef 16       	cp	r14, r31
    13ae:	f1 04       	cpc	r15, r1
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <strtol+0xaa>
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	e2 16       	cp	r14, r18
    13b6:	f1 04       	cpc	r15, r1
    13b8:	b1 f4       	brne	.+44     	; 0x13e6 <strtol+0xd0>
    13ba:	2f c0       	rjmp	.+94     	; 0x141a <strtol+0x104>
    13bc:	10 33       	cpi	r17, 0x30	; 48
    13be:	11 f1       	breq	.+68     	; 0x1404 <strtol+0xee>
    13c0:	fa e0       	ldi	r31, 0x0A	; 10
    13c2:	ef 2e       	mov	r14, r31
    13c4:	f1 2c       	mov	r15, r1
    13c6:	ac ec       	ldi	r26, 0xCC	; 204
    13c8:	8a 2e       	mov	r8, r26
    13ca:	98 2c       	mov	r9, r8
    13cc:	a8 2c       	mov	r10, r8
    13ce:	ac e0       	ldi	r26, 0x0C	; 12
    13d0:	ba 2e       	mov	r11, r26
    13d2:	28 c0       	rjmp	.+80     	; 0x1424 <strtol+0x10e>
    13d4:	78 e0       	ldi	r23, 0x08	; 8
    13d6:	e7 2e       	mov	r14, r23
    13d8:	f1 2c       	mov	r15, r1
    13da:	81 2c       	mov	r8, r1
    13dc:	91 2c       	mov	r9, r1
    13de:	a1 2c       	mov	r10, r1
    13e0:	e0 e1       	ldi	r30, 0x10	; 16
    13e2:	be 2e       	mov	r11, r30
    13e4:	1f c0       	rjmp	.+62     	; 0x1424 <strtol+0x10e>
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e8       	ldi	r25, 0x80	; 128
    13ee:	97 01       	movw	r18, r14
    13f0:	0f 2c       	mov	r0, r15
    13f2:	00 0c       	add	r0, r0
    13f4:	44 0b       	sbc	r20, r20
    13f6:	55 0b       	sbc	r21, r21
    13f8:	6c df       	rcall	.-296    	; 0x12d2 <__udivmodsi4>
    13fa:	49 01       	movw	r8, r18
    13fc:	5a 01       	movw	r10, r20
    13fe:	12 c0       	rjmp	.+36     	; 0x1424 <strtol+0x10e>
    1400:	10 33       	cpi	r17, 0x30	; 48
    1402:	59 f4       	brne	.+22     	; 0x141a <strtol+0x104>
    1404:	88 81       	ld	r24, Y
    1406:	8f 7d       	andi	r24, 0xDF	; 223
    1408:	88 35       	cpi	r24, 0x58	; 88
    140a:	09 f0       	breq	.+2      	; 0x140e <strtol+0xf8>
    140c:	bb cf       	rjmp	.-138    	; 0x1384 <strtol+0x6e>
    140e:	19 81       	ldd	r17, Y+1	; 0x01
    1410:	22 96       	adiw	r28, 0x02	; 2
    1412:	02 60       	ori	r16, 0x02	; 2
    1414:	80 e1       	ldi	r24, 0x10	; 16
    1416:	e8 2e       	mov	r14, r24
    1418:	f1 2c       	mov	r15, r1
    141a:	81 2c       	mov	r8, r1
    141c:	91 2c       	mov	r9, r1
    141e:	a1 2c       	mov	r10, r1
    1420:	68 e0       	ldi	r22, 0x08	; 8
    1422:	b6 2e       	mov	r11, r22
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	cb 01       	movw	r24, r22
    142c:	27 01       	movw	r4, r14
    142e:	0f 2c       	mov	r0, r15
    1430:	00 0c       	add	r0, r0
    1432:	66 08       	sbc	r6, r6
    1434:	77 08       	sbc	r7, r7
    1436:	fe 01       	movw	r30, r28
    1438:	50 ed       	ldi	r21, 0xD0	; 208
    143a:	35 2e       	mov	r3, r21
    143c:	31 0e       	add	r3, r17
    143e:	29 e0       	ldi	r18, 0x09	; 9
    1440:	23 15       	cp	r18, r3
    1442:	70 f4       	brcc	.+28     	; 0x1460 <strtol+0x14a>
    1444:	2f eb       	ldi	r18, 0xBF	; 191
    1446:	21 0f       	add	r18, r17
    1448:	2a 31       	cpi	r18, 0x1A	; 26
    144a:	18 f4       	brcc	.+6      	; 0x1452 <strtol+0x13c>
    144c:	39 ec       	ldi	r19, 0xC9	; 201
    144e:	33 2e       	mov	r3, r19
    1450:	06 c0       	rjmp	.+12     	; 0x145e <strtol+0x148>
    1452:	2f e9       	ldi	r18, 0x9F	; 159
    1454:	21 0f       	add	r18, r17
    1456:	2a 31       	cpi	r18, 0x1A	; 26
    1458:	10 f5       	brcc	.+68     	; 0x149e <strtol+0x188>
    145a:	29 ea       	ldi	r18, 0xA9	; 169
    145c:	32 2e       	mov	r3, r18
    145e:	31 0e       	add	r3, r17
    1460:	23 2d       	mov	r18, r3
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	2e 15       	cp	r18, r14
    1466:	3f 05       	cpc	r19, r15
    1468:	d4 f4       	brge	.+52     	; 0x149e <strtol+0x188>
    146a:	47 fd       	sbrc	r20, 7
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <strtol+0x182>
    146e:	86 16       	cp	r8, r22
    1470:	97 06       	cpc	r9, r23
    1472:	a8 06       	cpc	r10, r24
    1474:	b9 06       	cpc	r11, r25
    1476:	68 f0       	brcs	.+26     	; 0x1492 <strtol+0x17c>
    1478:	a3 01       	movw	r20, r6
    147a:	92 01       	movw	r18, r4
    147c:	33 d3       	rcall	.+1638   	; 0x1ae4 <__mulsi3>
    147e:	63 0d       	add	r22, r3
    1480:	71 1d       	adc	r23, r1
    1482:	81 1d       	adc	r24, r1
    1484:	91 1d       	adc	r25, r1
    1486:	61 30       	cpi	r22, 0x01	; 1
    1488:	71 05       	cpc	r23, r1
    148a:	81 05       	cpc	r24, r1
    148c:	20 e8       	ldi	r18, 0x80	; 128
    148e:	92 07       	cpc	r25, r18
    1490:	10 f0       	brcs	.+4      	; 0x1496 <strtol+0x180>
    1492:	4f ef       	ldi	r20, 0xFF	; 255
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <strtol+0x182>
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	10 81       	ld	r17, Z
    149c:	cc cf       	rjmp	.-104    	; 0x1436 <strtol+0x120>
    149e:	20 2f       	mov	r18, r16
    14a0:	21 70       	andi	r18, 0x01	; 1
    14a2:	c1 14       	cp	r12, r1
    14a4:	d1 04       	cpc	r13, r1
    14a6:	71 f0       	breq	.+28     	; 0x14c4 <strtol+0x1ae>
    14a8:	44 23       	and	r20, r20
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <strtol+0x1a0>
    14ac:	21 97       	sbiw	r28, 0x01	; 1
    14ae:	f6 01       	movw	r30, r12
    14b0:	d1 83       	std	Z+1, r29	; 0x01
    14b2:	c0 83       	st	Z, r28
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <strtol+0x1ae>
    14b6:	01 ff       	sbrs	r16, 1
    14b8:	19 c0       	rjmp	.+50     	; 0x14ec <strtol+0x1d6>
    14ba:	22 97       	sbiw	r28, 0x02	; 2
    14bc:	f6 01       	movw	r30, r12
    14be:	d1 83       	std	Z+1, r29	; 0x01
    14c0:	c0 83       	st	Z, r28
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <strtol+0x1d6>
    14c4:	47 ff       	sbrs	r20, 7
    14c6:	12 c0       	rjmp	.+36     	; 0x14ec <strtol+0x1d6>
    14c8:	22 23       	and	r18, r18
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <strtol+0x1c0>
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e8       	ldi	r25, 0x80	; 128
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <strtol+0x1c8>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f e7       	ldi	r25, 0x7F	; 127
    14de:	22 e2       	ldi	r18, 0x22	; 34
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <errno+0x1>
    14e6:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <errno>
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <strtol+0x1e8>
    14ec:	22 23       	and	r18, r18
    14ee:	81 f0       	breq	.+32     	; 0x1510 <strtol+0x1fa>
    14f0:	90 95       	com	r25
    14f2:	80 95       	com	r24
    14f4:	70 95       	com	r23
    14f6:	61 95       	neg	r22
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	8f 4f       	sbci	r24, 0xFF	; 255
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	46 2f       	mov	r20, r22
    1500:	37 2f       	mov	r19, r23
    1502:	28 2f       	mov	r18, r24
    1504:	12 c0       	rjmp	.+36     	; 0x152a <strtol+0x214>
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0d c0       	rjmp	.+26     	; 0x152a <strtol+0x214>
    1510:	97 ff       	sbrs	r25, 7
    1512:	f5 cf       	rjmp	.-22     	; 0x14fe <strtol+0x1e8>
    1514:	82 e2       	ldi	r24, 0x22	; 34
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <errno+0x1>
    151c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <errno>
    1520:	6f ef       	ldi	r22, 0xFF	; 255
    1522:	7f ef       	ldi	r23, 0xFF	; 255
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f e7       	ldi	r25, 0x7F	; 127
    1528:	ea cf       	rjmp	.-44     	; 0x14fe <strtol+0x1e8>
    152a:	64 2f       	mov	r22, r20
    152c:	73 2f       	mov	r23, r19
    152e:	82 2f       	mov	r24, r18
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	e1 e1       	ldi	r30, 0x11	; 17
    1536:	0c c3       	rjmp	.+1560   	; 0x1b50 <__epilogue_restores__+0x2>

00001538 <isspace>:
    1538:	91 11       	cpse	r25, r1
    153a:	21 c2       	rjmp	.+1090   	; 0x197e <__ctype_isfalse>
    153c:	80 32       	cpi	r24, 0x20	; 32
    153e:	19 f0       	breq	.+6      	; 0x1546 <isspace+0xe>
    1540:	89 50       	subi	r24, 0x09	; 9
    1542:	85 50       	subi	r24, 0x05	; 5
    1544:	d0 f7       	brcc	.-12     	; 0x153a <isspace+0x2>
    1546:	08 95       	ret

00001548 <memcpy>:
    1548:	fb 01       	movw	r30, r22
    154a:	dc 01       	movw	r26, r24
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <memcpy+0xa>
    154e:	01 90       	ld	r0, Z+
    1550:	0d 92       	st	X+, r0
    1552:	41 50       	subi	r20, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	d8 f7       	brcc	.-10     	; 0x154e <memcpy+0x6>
    1558:	08 95       	ret

0000155a <memset>:
    155a:	dc 01       	movw	r26, r24
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <memset+0x6>
    155e:	6d 93       	st	X+, r22
    1560:	41 50       	subi	r20, 0x01	; 1
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	e0 f7       	brcc	.-8      	; 0x155e <memset+0x4>
    1566:	08 95       	ret

00001568 <strstr>:
    1568:	fb 01       	movw	r30, r22
    156a:	51 91       	ld	r21, Z+
    156c:	55 23       	and	r21, r21
    156e:	a9 f0       	breq	.+42     	; 0x159a <strstr+0x32>
    1570:	bf 01       	movw	r22, r30
    1572:	dc 01       	movw	r26, r24
    1574:	4d 91       	ld	r20, X+
    1576:	45 17       	cp	r20, r21
    1578:	41 11       	cpse	r20, r1
    157a:	e1 f7       	brne	.-8      	; 0x1574 <strstr+0xc>
    157c:	59 f4       	brne	.+22     	; 0x1594 <strstr+0x2c>
    157e:	cd 01       	movw	r24, r26
    1580:	01 90       	ld	r0, Z+
    1582:	00 20       	and	r0, r0
    1584:	49 f0       	breq	.+18     	; 0x1598 <strstr+0x30>
    1586:	4d 91       	ld	r20, X+
    1588:	40 15       	cp	r20, r0
    158a:	41 11       	cpse	r20, r1
    158c:	c9 f3       	breq	.-14     	; 0x1580 <strstr+0x18>
    158e:	fb 01       	movw	r30, r22
    1590:	41 11       	cpse	r20, r1
    1592:	ef cf       	rjmp	.-34     	; 0x1572 <strstr+0xa>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	08 95       	ret

0000159c <sprintf>:
    159c:	ae e0       	ldi	r26, 0x0E	; 14
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e3 ed       	ldi	r30, 0xD3	; 211
    15a2:	fa e0       	ldi	r31, 0x0A	; 10
    15a4:	c6 c2       	rjmp	.+1420   	; 0x1b32 <__prologue_saves__+0x1c>
    15a6:	0d 89       	ldd	r16, Y+21	; 0x15
    15a8:	1e 89       	ldd	r17, Y+22	; 0x16
    15aa:	86 e0       	ldi	r24, 0x06	; 6
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	1a 83       	std	Y+2, r17	; 0x02
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f e7       	ldi	r25, 0x7F	; 127
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	ae 01       	movw	r20, r28
    15bc:	47 5e       	subi	r20, 0xE7	; 231
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	6f 89       	ldd	r22, Y+23	; 0x17
    15c2:	78 8d       	ldd	r23, Y+24	; 0x18
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	08 d0       	rcall	.+16     	; 0x15da <vfprintf>
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	e0 0f       	add	r30, r16
    15d0:	f1 1f       	adc	r31, r17
    15d2:	10 82       	st	Z, r1
    15d4:	2e 96       	adiw	r28, 0x0e	; 14
    15d6:	e4 e0       	ldi	r30, 0x04	; 4
    15d8:	c8 c2       	rjmp	.+1424   	; 0x1b6a <__epilogue_restores__+0x1c>

000015da <vfprintf>:
    15da:	ab e0       	ldi	r26, 0x0B	; 11
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e2 ef       	ldi	r30, 0xF2	; 242
    15e0:	fa e0       	ldi	r31, 0x0A	; 10
    15e2:	99 c2       	rjmp	.+1330   	; 0x1b16 <__prologue_saves__>
    15e4:	6c 01       	movw	r12, r24
    15e6:	7b 01       	movw	r14, r22
    15e8:	8a 01       	movw	r16, r20
    15ea:	fc 01       	movw	r30, r24
    15ec:	17 82       	std	Z+7, r1	; 0x07
    15ee:	16 82       	std	Z+6, r1	; 0x06
    15f0:	83 81       	ldd	r24, Z+3	; 0x03
    15f2:	81 ff       	sbrs	r24, 1
    15f4:	bf c1       	rjmp	.+894    	; 0x1974 <vfprintf+0x39a>
    15f6:	ce 01       	movw	r24, r28
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	3c 01       	movw	r6, r24
    15fc:	f6 01       	movw	r30, r12
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	f7 01       	movw	r30, r14
    1602:	93 fd       	sbrc	r25, 3
    1604:	85 91       	lpm	r24, Z+
    1606:	93 ff       	sbrs	r25, 3
    1608:	81 91       	ld	r24, Z+
    160a:	7f 01       	movw	r14, r30
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <vfprintf+0x38>
    1610:	ad c1       	rjmp	.+858    	; 0x196c <vfprintf+0x392>
    1612:	85 32       	cpi	r24, 0x25	; 37
    1614:	39 f4       	brne	.+14     	; 0x1624 <vfprintf+0x4a>
    1616:	93 fd       	sbrc	r25, 3
    1618:	85 91       	lpm	r24, Z+
    161a:	93 ff       	sbrs	r25, 3
    161c:	81 91       	ld	r24, Z+
    161e:	7f 01       	movw	r14, r30
    1620:	85 32       	cpi	r24, 0x25	; 37
    1622:	21 f4       	brne	.+8      	; 0x162c <vfprintf+0x52>
    1624:	b6 01       	movw	r22, r12
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	c3 d1       	rcall	.+902    	; 0x19b0 <fputc>
    162a:	e8 cf       	rjmp	.-48     	; 0x15fc <vfprintf+0x22>
    162c:	91 2c       	mov	r9, r1
    162e:	21 2c       	mov	r2, r1
    1630:	31 2c       	mov	r3, r1
    1632:	ff e1       	ldi	r31, 0x1F	; 31
    1634:	f3 15       	cp	r31, r3
    1636:	d8 f0       	brcs	.+54     	; 0x166e <vfprintf+0x94>
    1638:	8b 32       	cpi	r24, 0x2B	; 43
    163a:	79 f0       	breq	.+30     	; 0x165a <vfprintf+0x80>
    163c:	38 f4       	brcc	.+14     	; 0x164c <vfprintf+0x72>
    163e:	80 32       	cpi	r24, 0x20	; 32
    1640:	79 f0       	breq	.+30     	; 0x1660 <vfprintf+0x86>
    1642:	83 32       	cpi	r24, 0x23	; 35
    1644:	a1 f4       	brne	.+40     	; 0x166e <vfprintf+0x94>
    1646:	23 2d       	mov	r18, r3
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <vfprintf+0xac>
    164c:	8d 32       	cpi	r24, 0x2D	; 45
    164e:	61 f0       	breq	.+24     	; 0x1668 <vfprintf+0x8e>
    1650:	80 33       	cpi	r24, 0x30	; 48
    1652:	69 f4       	brne	.+26     	; 0x166e <vfprintf+0x94>
    1654:	23 2d       	mov	r18, r3
    1656:	21 60       	ori	r18, 0x01	; 1
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <vfprintf+0xac>
    165a:	83 2d       	mov	r24, r3
    165c:	82 60       	ori	r24, 0x02	; 2
    165e:	38 2e       	mov	r3, r24
    1660:	e3 2d       	mov	r30, r3
    1662:	e4 60       	ori	r30, 0x04	; 4
    1664:	3e 2e       	mov	r3, r30
    1666:	2a c0       	rjmp	.+84     	; 0x16bc <vfprintf+0xe2>
    1668:	f3 2d       	mov	r31, r3
    166a:	f8 60       	ori	r31, 0x08	; 8
    166c:	1d c0       	rjmp	.+58     	; 0x16a8 <vfprintf+0xce>
    166e:	37 fc       	sbrc	r3, 7
    1670:	2d c0       	rjmp	.+90     	; 0x16cc <vfprintf+0xf2>
    1672:	20 ed       	ldi	r18, 0xD0	; 208
    1674:	28 0f       	add	r18, r24
    1676:	2a 30       	cpi	r18, 0x0A	; 10
    1678:	40 f0       	brcs	.+16     	; 0x168a <vfprintf+0xb0>
    167a:	8e 32       	cpi	r24, 0x2E	; 46
    167c:	b9 f4       	brne	.+46     	; 0x16ac <vfprintf+0xd2>
    167e:	36 fc       	sbrc	r3, 6
    1680:	75 c1       	rjmp	.+746    	; 0x196c <vfprintf+0x392>
    1682:	23 2d       	mov	r18, r3
    1684:	20 64       	ori	r18, 0x40	; 64
    1686:	32 2e       	mov	r3, r18
    1688:	19 c0       	rjmp	.+50     	; 0x16bc <vfprintf+0xe2>
    168a:	36 fe       	sbrs	r3, 6
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0xc0>
    168e:	8a e0       	ldi	r24, 0x0A	; 10
    1690:	98 9e       	mul	r9, r24
    1692:	20 0d       	add	r18, r0
    1694:	11 24       	eor	r1, r1
    1696:	92 2e       	mov	r9, r18
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <vfprintf+0xe2>
    169a:	ea e0       	ldi	r30, 0x0A	; 10
    169c:	2e 9e       	mul	r2, r30
    169e:	20 0d       	add	r18, r0
    16a0:	11 24       	eor	r1, r1
    16a2:	22 2e       	mov	r2, r18
    16a4:	f3 2d       	mov	r31, r3
    16a6:	f0 62       	ori	r31, 0x20	; 32
    16a8:	3f 2e       	mov	r3, r31
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <vfprintf+0xe2>
    16ac:	8c 36       	cpi	r24, 0x6C	; 108
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <vfprintf+0xde>
    16b0:	83 2d       	mov	r24, r3
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	38 2e       	mov	r3, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <vfprintf+0xe2>
    16b8:	88 36       	cpi	r24, 0x68	; 104
    16ba:	41 f4       	brne	.+16     	; 0x16cc <vfprintf+0xf2>
    16bc:	f7 01       	movw	r30, r14
    16be:	93 fd       	sbrc	r25, 3
    16c0:	85 91       	lpm	r24, Z+
    16c2:	93 ff       	sbrs	r25, 3
    16c4:	81 91       	ld	r24, Z+
    16c6:	7f 01       	movw	r14, r30
    16c8:	81 11       	cpse	r24, r1
    16ca:	b3 cf       	rjmp	.-154    	; 0x1632 <vfprintf+0x58>
    16cc:	98 2f       	mov	r25, r24
    16ce:	9f 7d       	andi	r25, 0xDF	; 223
    16d0:	95 54       	subi	r25, 0x45	; 69
    16d2:	93 30       	cpi	r25, 0x03	; 3
    16d4:	28 f4       	brcc	.+10     	; 0x16e0 <vfprintf+0x106>
    16d6:	0c 5f       	subi	r16, 0xFC	; 252
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	9f e3       	ldi	r25, 0x3F	; 63
    16dc:	99 83       	std	Y+1, r25	; 0x01
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <vfprintf+0x120>
    16e0:	83 36       	cpi	r24, 0x63	; 99
    16e2:	31 f0       	breq	.+12     	; 0x16f0 <vfprintf+0x116>
    16e4:	83 37       	cpi	r24, 0x73	; 115
    16e6:	71 f0       	breq	.+28     	; 0x1704 <vfprintf+0x12a>
    16e8:	83 35       	cpi	r24, 0x53	; 83
    16ea:	09 f0       	breq	.+2      	; 0x16ee <vfprintf+0x114>
    16ec:	55 c0       	rjmp	.+170    	; 0x1798 <vfprintf+0x1be>
    16ee:	20 c0       	rjmp	.+64     	; 0x1730 <vfprintf+0x156>
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 81       	ld	r24, Z
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	0e 5f       	subi	r16, 0xFE	; 254
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	88 24       	eor	r8, r8
    16fc:	83 94       	inc	r8
    16fe:	91 2c       	mov	r9, r1
    1700:	53 01       	movw	r10, r6
    1702:	12 c0       	rjmp	.+36     	; 0x1728 <vfprintf+0x14e>
    1704:	28 01       	movw	r4, r16
    1706:	f2 e0       	ldi	r31, 0x02	; 2
    1708:	4f 0e       	add	r4, r31
    170a:	51 1c       	adc	r5, r1
    170c:	f8 01       	movw	r30, r16
    170e:	a0 80       	ld	r10, Z
    1710:	b1 80       	ldd	r11, Z+1	; 0x01
    1712:	36 fe       	sbrs	r3, 6
    1714:	03 c0       	rjmp	.+6      	; 0x171c <vfprintf+0x142>
    1716:	69 2d       	mov	r22, r9
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x146>
    171c:	6f ef       	ldi	r22, 0xFF	; 255
    171e:	7f ef       	ldi	r23, 0xFF	; 255
    1720:	c5 01       	movw	r24, r10
    1722:	3b d1       	rcall	.+630    	; 0x199a <strnlen>
    1724:	4c 01       	movw	r8, r24
    1726:	82 01       	movw	r16, r4
    1728:	f3 2d       	mov	r31, r3
    172a:	ff 77       	andi	r31, 0x7F	; 127
    172c:	3f 2e       	mov	r3, r31
    172e:	15 c0       	rjmp	.+42     	; 0x175a <vfprintf+0x180>
    1730:	28 01       	movw	r4, r16
    1732:	22 e0       	ldi	r18, 0x02	; 2
    1734:	42 0e       	add	r4, r18
    1736:	51 1c       	adc	r5, r1
    1738:	f8 01       	movw	r30, r16
    173a:	a0 80       	ld	r10, Z
    173c:	b1 80       	ldd	r11, Z+1	; 0x01
    173e:	36 fe       	sbrs	r3, 6
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <vfprintf+0x16e>
    1742:	69 2d       	mov	r22, r9
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <vfprintf+0x172>
    1748:	6f ef       	ldi	r22, 0xFF	; 255
    174a:	7f ef       	ldi	r23, 0xFF	; 255
    174c:	c5 01       	movw	r24, r10
    174e:	1a d1       	rcall	.+564    	; 0x1984 <strnlen_P>
    1750:	4c 01       	movw	r8, r24
    1752:	f3 2d       	mov	r31, r3
    1754:	f0 68       	ori	r31, 0x80	; 128
    1756:	3f 2e       	mov	r3, r31
    1758:	82 01       	movw	r16, r4
    175a:	33 fc       	sbrc	r3, 3
    175c:	19 c0       	rjmp	.+50     	; 0x1790 <vfprintf+0x1b6>
    175e:	82 2d       	mov	r24, r2
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	88 16       	cp	r8, r24
    1764:	99 06       	cpc	r9, r25
    1766:	a0 f4       	brcc	.+40     	; 0x1790 <vfprintf+0x1b6>
    1768:	b6 01       	movw	r22, r12
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	20 d1       	rcall	.+576    	; 0x19b0 <fputc>
    1770:	2a 94       	dec	r2
    1772:	f5 cf       	rjmp	.-22     	; 0x175e <vfprintf+0x184>
    1774:	f5 01       	movw	r30, r10
    1776:	37 fc       	sbrc	r3, 7
    1778:	85 91       	lpm	r24, Z+
    177a:	37 fe       	sbrs	r3, 7
    177c:	81 91       	ld	r24, Z+
    177e:	5f 01       	movw	r10, r30
    1780:	b6 01       	movw	r22, r12
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	15 d1       	rcall	.+554    	; 0x19b0 <fputc>
    1786:	21 10       	cpse	r2, r1
    1788:	2a 94       	dec	r2
    178a:	21 e0       	ldi	r18, 0x01	; 1
    178c:	82 1a       	sub	r8, r18
    178e:	91 08       	sbc	r9, r1
    1790:	81 14       	cp	r8, r1
    1792:	91 04       	cpc	r9, r1
    1794:	79 f7       	brne	.-34     	; 0x1774 <vfprintf+0x19a>
    1796:	e1 c0       	rjmp	.+450    	; 0x195a <vfprintf+0x380>
    1798:	84 36       	cpi	r24, 0x64	; 100
    179a:	11 f0       	breq	.+4      	; 0x17a0 <vfprintf+0x1c6>
    179c:	89 36       	cpi	r24, 0x69	; 105
    179e:	39 f5       	brne	.+78     	; 0x17ee <vfprintf+0x214>
    17a0:	f8 01       	movw	r30, r16
    17a2:	37 fe       	sbrs	r3, 7
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <vfprintf+0x1da>
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	0c 5f       	subi	r16, 0xFC	; 252
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <vfprintf+0x1ea>
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	07 2e       	mov	r0, r23
    17ba:	00 0c       	add	r0, r0
    17bc:	88 0b       	sbc	r24, r24
    17be:	99 0b       	sbc	r25, r25
    17c0:	0e 5f       	subi	r16, 0xFE	; 254
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	f3 2d       	mov	r31, r3
    17c6:	ff 76       	andi	r31, 0x6F	; 111
    17c8:	3f 2e       	mov	r3, r31
    17ca:	97 ff       	sbrs	r25, 7
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <vfprintf+0x206>
    17ce:	90 95       	com	r25
    17d0:	80 95       	com	r24
    17d2:	70 95       	com	r23
    17d4:	61 95       	neg	r22
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	f0 68       	ori	r31, 0x80	; 128
    17de:	3f 2e       	mov	r3, r31
    17e0:	2a e0       	ldi	r18, 0x0A	; 10
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	a3 01       	movw	r20, r6
    17e6:	20 d1       	rcall	.+576    	; 0x1a28 <__ultoa_invert>
    17e8:	88 2e       	mov	r8, r24
    17ea:	86 18       	sub	r8, r6
    17ec:	44 c0       	rjmp	.+136    	; 0x1876 <vfprintf+0x29c>
    17ee:	85 37       	cpi	r24, 0x75	; 117
    17f0:	31 f4       	brne	.+12     	; 0x17fe <vfprintf+0x224>
    17f2:	23 2d       	mov	r18, r3
    17f4:	2f 7e       	andi	r18, 0xEF	; 239
    17f6:	b2 2e       	mov	r11, r18
    17f8:	2a e0       	ldi	r18, 0x0A	; 10
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	25 c0       	rjmp	.+74     	; 0x1848 <vfprintf+0x26e>
    17fe:	93 2d       	mov	r25, r3
    1800:	99 7f       	andi	r25, 0xF9	; 249
    1802:	b9 2e       	mov	r11, r25
    1804:	8f 36       	cpi	r24, 0x6F	; 111
    1806:	c1 f0       	breq	.+48     	; 0x1838 <vfprintf+0x25e>
    1808:	18 f4       	brcc	.+6      	; 0x1810 <vfprintf+0x236>
    180a:	88 35       	cpi	r24, 0x58	; 88
    180c:	79 f0       	breq	.+30     	; 0x182c <vfprintf+0x252>
    180e:	ae c0       	rjmp	.+348    	; 0x196c <vfprintf+0x392>
    1810:	80 37       	cpi	r24, 0x70	; 112
    1812:	19 f0       	breq	.+6      	; 0x181a <vfprintf+0x240>
    1814:	88 37       	cpi	r24, 0x78	; 120
    1816:	21 f0       	breq	.+8      	; 0x1820 <vfprintf+0x246>
    1818:	a9 c0       	rjmp	.+338    	; 0x196c <vfprintf+0x392>
    181a:	e9 2f       	mov	r30, r25
    181c:	e0 61       	ori	r30, 0x10	; 16
    181e:	be 2e       	mov	r11, r30
    1820:	b4 fe       	sbrs	r11, 4
    1822:	0d c0       	rjmp	.+26     	; 0x183e <vfprintf+0x264>
    1824:	fb 2d       	mov	r31, r11
    1826:	f4 60       	ori	r31, 0x04	; 4
    1828:	bf 2e       	mov	r11, r31
    182a:	09 c0       	rjmp	.+18     	; 0x183e <vfprintf+0x264>
    182c:	34 fe       	sbrs	r3, 4
    182e:	0a c0       	rjmp	.+20     	; 0x1844 <vfprintf+0x26a>
    1830:	29 2f       	mov	r18, r25
    1832:	26 60       	ori	r18, 0x06	; 6
    1834:	b2 2e       	mov	r11, r18
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <vfprintf+0x26a>
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <vfprintf+0x26e>
    183e:	20 e1       	ldi	r18, 0x10	; 16
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x26e>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	32 e0       	ldi	r19, 0x02	; 2
    1848:	f8 01       	movw	r30, r16
    184a:	b7 fe       	sbrs	r11, 7
    184c:	07 c0       	rjmp	.+14     	; 0x185c <vfprintf+0x282>
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0c 5f       	subi	r16, 0xFC	; 252
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x28e>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	a3 01       	movw	r20, r6
    186a:	de d0       	rcall	.+444    	; 0x1a28 <__ultoa_invert>
    186c:	88 2e       	mov	r8, r24
    186e:	86 18       	sub	r8, r6
    1870:	fb 2d       	mov	r31, r11
    1872:	ff 77       	andi	r31, 0x7F	; 127
    1874:	3f 2e       	mov	r3, r31
    1876:	36 fe       	sbrs	r3, 6
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <vfprintf+0x2ba>
    187a:	23 2d       	mov	r18, r3
    187c:	2e 7f       	andi	r18, 0xFE	; 254
    187e:	a2 2e       	mov	r10, r18
    1880:	89 14       	cp	r8, r9
    1882:	58 f4       	brcc	.+22     	; 0x189a <vfprintf+0x2c0>
    1884:	34 fe       	sbrs	r3, 4
    1886:	0b c0       	rjmp	.+22     	; 0x189e <vfprintf+0x2c4>
    1888:	32 fc       	sbrc	r3, 2
    188a:	09 c0       	rjmp	.+18     	; 0x189e <vfprintf+0x2c4>
    188c:	83 2d       	mov	r24, r3
    188e:	8e 7e       	andi	r24, 0xEE	; 238
    1890:	a8 2e       	mov	r10, r24
    1892:	05 c0       	rjmp	.+10     	; 0x189e <vfprintf+0x2c4>
    1894:	b8 2c       	mov	r11, r8
    1896:	a3 2c       	mov	r10, r3
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x2c6>
    189a:	b8 2c       	mov	r11, r8
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x2c6>
    189e:	b9 2c       	mov	r11, r9
    18a0:	a4 fe       	sbrs	r10, 4
    18a2:	0f c0       	rjmp	.+30     	; 0x18c2 <vfprintf+0x2e8>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e8 0d       	add	r30, r8
    18a8:	f1 1d       	adc	r31, r1
    18aa:	80 81       	ld	r24, Z
    18ac:	80 33       	cpi	r24, 0x30	; 48
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <vfprintf+0x2de>
    18b0:	9a 2d       	mov	r25, r10
    18b2:	99 7e       	andi	r25, 0xE9	; 233
    18b4:	a9 2e       	mov	r10, r25
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x2f0>
    18b8:	a2 fe       	sbrs	r10, 2
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x2ee>
    18bc:	b3 94       	inc	r11
    18be:	b3 94       	inc	r11
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <vfprintf+0x2f0>
    18c2:	8a 2d       	mov	r24, r10
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x2f0>
    18c8:	b3 94       	inc	r11
    18ca:	a3 fc       	sbrc	r10, 3
    18cc:	10 c0       	rjmp	.+32     	; 0x18ee <vfprintf+0x314>
    18ce:	a0 fe       	sbrs	r10, 0
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x304>
    18d2:	b2 14       	cp	r11, r2
    18d4:	80 f4       	brcc	.+32     	; 0x18f6 <vfprintf+0x31c>
    18d6:	28 0c       	add	r2, r8
    18d8:	92 2c       	mov	r9, r2
    18da:	9b 18       	sub	r9, r11
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <vfprintf+0x31e>
    18de:	b2 14       	cp	r11, r2
    18e0:	58 f4       	brcc	.+22     	; 0x18f8 <vfprintf+0x31e>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	63 d0       	rcall	.+198    	; 0x19b0 <fputc>
    18ea:	b3 94       	inc	r11
    18ec:	f8 cf       	rjmp	.-16     	; 0x18de <vfprintf+0x304>
    18ee:	b2 14       	cp	r11, r2
    18f0:	18 f4       	brcc	.+6      	; 0x18f8 <vfprintf+0x31e>
    18f2:	2b 18       	sub	r2, r11
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x320>
    18f6:	98 2c       	mov	r9, r8
    18f8:	21 2c       	mov	r2, r1
    18fa:	a4 fe       	sbrs	r10, 4
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <vfprintf+0x342>
    18fe:	b6 01       	movw	r22, r12
    1900:	80 e3       	ldi	r24, 0x30	; 48
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	55 d0       	rcall	.+170    	; 0x19b0 <fputc>
    1906:	a2 fe       	sbrs	r10, 2
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <vfprintf+0x35c>
    190a:	a1 fc       	sbrc	r10, 1
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <vfprintf+0x33a>
    190e:	88 e7       	ldi	r24, 0x78	; 120
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <vfprintf+0x33e>
    1914:	88 e5       	ldi	r24, 0x58	; 88
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	b6 01       	movw	r22, r12
    191a:	0c c0       	rjmp	.+24     	; 0x1934 <vfprintf+0x35a>
    191c:	8a 2d       	mov	r24, r10
    191e:	86 78       	andi	r24, 0x86	; 134
    1920:	51 f0       	breq	.+20     	; 0x1936 <vfprintf+0x35c>
    1922:	a1 fe       	sbrs	r10, 1
    1924:	02 c0       	rjmp	.+4      	; 0x192a <vfprintf+0x350>
    1926:	8b e2       	ldi	r24, 0x2B	; 43
    1928:	01 c0       	rjmp	.+2      	; 0x192c <vfprintf+0x352>
    192a:	80 e2       	ldi	r24, 0x20	; 32
    192c:	a7 fc       	sbrc	r10, 7
    192e:	8d e2       	ldi	r24, 0x2D	; 45
    1930:	b6 01       	movw	r22, r12
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	3d d0       	rcall	.+122    	; 0x19b0 <fputc>
    1936:	89 14       	cp	r8, r9
    1938:	30 f4       	brcc	.+12     	; 0x1946 <vfprintf+0x36c>
    193a:	b6 01       	movw	r22, r12
    193c:	80 e3       	ldi	r24, 0x30	; 48
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	37 d0       	rcall	.+110    	; 0x19b0 <fputc>
    1942:	9a 94       	dec	r9
    1944:	f8 cf       	rjmp	.-16     	; 0x1936 <vfprintf+0x35c>
    1946:	8a 94       	dec	r8
    1948:	f3 01       	movw	r30, r6
    194a:	e8 0d       	add	r30, r8
    194c:	f1 1d       	adc	r31, r1
    194e:	80 81       	ld	r24, Z
    1950:	b6 01       	movw	r22, r12
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	2d d0       	rcall	.+90     	; 0x19b0 <fputc>
    1956:	81 10       	cpse	r8, r1
    1958:	f6 cf       	rjmp	.-20     	; 0x1946 <vfprintf+0x36c>
    195a:	22 20       	and	r2, r2
    195c:	09 f4       	brne	.+2      	; 0x1960 <vfprintf+0x386>
    195e:	4e ce       	rjmp	.-868    	; 0x15fc <vfprintf+0x22>
    1960:	b6 01       	movw	r22, r12
    1962:	80 e2       	ldi	r24, 0x20	; 32
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	24 d0       	rcall	.+72     	; 0x19b0 <fputc>
    1968:	2a 94       	dec	r2
    196a:	f7 cf       	rjmp	.-18     	; 0x195a <vfprintf+0x380>
    196c:	f6 01       	movw	r30, r12
    196e:	86 81       	ldd	r24, Z+6	; 0x06
    1970:	97 81       	ldd	r25, Z+7	; 0x07
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x39e>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	9f ef       	ldi	r25, 0xFF	; 255
    1978:	2b 96       	adiw	r28, 0x0b	; 11
    197a:	e2 e1       	ldi	r30, 0x12	; 18
    197c:	e8 c0       	rjmp	.+464    	; 0x1b4e <__epilogue_restores__>

0000197e <__ctype_isfalse>:
    197e:	99 27       	eor	r25, r25
    1980:	88 27       	eor	r24, r24

00001982 <__ctype_istrue>:
    1982:	08 95       	ret

00001984 <strnlen_P>:
    1984:	fc 01       	movw	r30, r24
    1986:	05 90       	lpm	r0, Z+
    1988:	61 50       	subi	r22, 0x01	; 1
    198a:	70 40       	sbci	r23, 0x00	; 0
    198c:	01 10       	cpse	r0, r1
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <strnlen_P+0x2>
    1990:	80 95       	com	r24
    1992:	90 95       	com	r25
    1994:	8e 0f       	add	r24, r30
    1996:	9f 1f       	adc	r25, r31
    1998:	08 95       	ret

0000199a <strnlen>:
    199a:	fc 01       	movw	r30, r24
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
    19a0:	01 90       	ld	r0, Z+
    19a2:	01 10       	cpse	r0, r1
    19a4:	d8 f7       	brcc	.-10     	; 0x199c <strnlen+0x2>
    19a6:	80 95       	com	r24
    19a8:	90 95       	com	r25
    19aa:	8e 0f       	add	r24, r30
    19ac:	9f 1f       	adc	r25, r31
    19ae:	08 95       	ret

000019b0 <fputc>:
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	fb 01       	movw	r30, r22
    19ba:	23 81       	ldd	r18, Z+3	; 0x03
    19bc:	21 fd       	sbrc	r18, 1
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <fputc+0x16>
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
    19c4:	2c c0       	rjmp	.+88     	; 0x1a1e <fputc+0x6e>
    19c6:	22 ff       	sbrs	r18, 2
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <fputc+0x46>
    19ca:	46 81       	ldd	r20, Z+6	; 0x06
    19cc:	57 81       	ldd	r21, Z+7	; 0x07
    19ce:	24 81       	ldd	r18, Z+4	; 0x04
    19d0:	35 81       	ldd	r19, Z+5	; 0x05
    19d2:	42 17       	cp	r20, r18
    19d4:	53 07       	cpc	r21, r19
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <fputc+0x38>
    19d8:	a0 81       	ld	r26, Z
    19da:	b1 81       	ldd	r27, Z+1	; 0x01
    19dc:	9d 01       	movw	r18, r26
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
    19e6:	8c 93       	st	X, r24
    19e8:	26 81       	ldd	r18, Z+6	; 0x06
    19ea:	37 81       	ldd	r19, Z+7	; 0x07
    19ec:	2f 5f       	subi	r18, 0xFF	; 255
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	37 83       	std	Z+7, r19	; 0x07
    19f2:	26 83       	std	Z+6, r18	; 0x06
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <fputc+0x6e>
    19f6:	8b 01       	movw	r16, r22
    19f8:	ec 01       	movw	r28, r24
    19fa:	fb 01       	movw	r30, r22
    19fc:	00 84       	ldd	r0, Z+8	; 0x08
    19fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1a00:	e0 2d       	mov	r30, r0
    1a02:	09 95       	icall
    1a04:	89 2b       	or	r24, r25
    1a06:	e1 f6       	brne	.-72     	; 0x19c0 <fputc+0x10>
    1a08:	d8 01       	movw	r26, r16
    1a0a:	16 96       	adiw	r26, 0x06	; 6
    1a0c:	8d 91       	ld	r24, X+
    1a0e:	9c 91       	ld	r25, X
    1a10:	17 97       	sbiw	r26, 0x07	; 7
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	17 96       	adiw	r26, 0x07	; 7
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	16 97       	sbiw	r26, 0x06	; 6
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <__ultoa_invert>:
    1a28:	fa 01       	movw	r30, r20
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	28 30       	cpi	r18, 0x08	; 8
    1a2e:	51 f1       	breq	.+84     	; 0x1a84 <__ultoa_invert+0x5c>
    1a30:	20 31       	cpi	r18, 0x10	; 16
    1a32:	81 f1       	breq	.+96     	; 0x1a94 <__ultoa_invert+0x6c>
    1a34:	e8 94       	clt
    1a36:	6f 93       	push	r22
    1a38:	6e 7f       	andi	r22, 0xFE	; 254
    1a3a:	6e 5f       	subi	r22, 0xFE	; 254
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	af 4f       	sbci	r26, 0xFF	; 255
    1a44:	b1 e0       	ldi	r27, 0x01	; 1
    1a46:	3e d0       	rcall	.+124    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	3c d0       	rcall	.+120    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a4c:	67 0f       	add	r22, r23
    1a4e:	78 1f       	adc	r23, r24
    1a50:	89 1f       	adc	r24, r25
    1a52:	9a 1f       	adc	r25, r26
    1a54:	a1 1d       	adc	r26, r1
    1a56:	68 0f       	add	r22, r24
    1a58:	79 1f       	adc	r23, r25
    1a5a:	8a 1f       	adc	r24, r26
    1a5c:	91 1d       	adc	r25, r1
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	6a 0f       	add	r22, r26
    1a62:	71 1d       	adc	r23, r1
    1a64:	81 1d       	adc	r24, r1
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	20 d0       	rcall	.+64     	; 0x1aac <__ultoa_invert+0x84>
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <__ultoa_invert+0x48>
    1a6e:	68 94       	set
    1a70:	3f 91       	pop	r19
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	26 9f       	mul	r18, r22
    1a76:	11 24       	eor	r1, r1
    1a78:	30 19       	sub	r19, r0
    1a7a:	30 5d       	subi	r19, 0xD0	; 208
    1a7c:	31 93       	st	Z+, r19
    1a7e:	de f6       	brtc	.-74     	; 0x1a36 <__ultoa_invert+0xe>
    1a80:	cf 01       	movw	r24, r30
    1a82:	08 95       	ret
    1a84:	46 2f       	mov	r20, r22
    1a86:	47 70       	andi	r20, 0x07	; 7
    1a88:	40 5d       	subi	r20, 0xD0	; 208
    1a8a:	41 93       	st	Z+, r20
    1a8c:	b3 e0       	ldi	r27, 0x03	; 3
    1a8e:	0f d0       	rcall	.+30     	; 0x1aae <__ultoa_invert+0x86>
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <__ultoa_invert+0x5c>
    1a92:	f6 cf       	rjmp	.-20     	; 0x1a80 <__ultoa_invert+0x58>
    1a94:	46 2f       	mov	r20, r22
    1a96:	4f 70       	andi	r20, 0x0F	; 15
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	4a 33       	cpi	r20, 0x3A	; 58
    1a9c:	18 f0       	brcs	.+6      	; 0x1aa4 <__ultoa_invert+0x7c>
    1a9e:	49 5d       	subi	r20, 0xD9	; 217
    1aa0:	31 fd       	sbrc	r19, 1
    1aa2:	40 52       	subi	r20, 0x20	; 32
    1aa4:	41 93       	st	Z+, r20
    1aa6:	02 d0       	rcall	.+4      	; 0x1aac <__ultoa_invert+0x84>
    1aa8:	a9 f7       	brne	.-22     	; 0x1a94 <__ultoa_invert+0x6c>
    1aaa:	ea cf       	rjmp	.-44     	; 0x1a80 <__ultoa_invert+0x58>
    1aac:	b4 e0       	ldi	r27, 0x04	; 4
    1aae:	a6 95       	lsr	r26
    1ab0:	97 95       	ror	r25
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	ba 95       	dec	r27
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <__ultoa_invert+0x86>
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 05       	cpc	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	08 95       	ret
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	0a 2e       	mov	r0, r26
    1aca:	06 94       	lsr	r0
    1acc:	57 95       	ror	r21
    1ace:	47 95       	ror	r20
    1ad0:	37 95       	ror	r19
    1ad2:	27 95       	ror	r18
    1ad4:	ba 95       	dec	r27
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__ultoa_invert+0xa2>
    1ad8:	62 0f       	add	r22, r18
    1ada:	73 1f       	adc	r23, r19
    1adc:	84 1f       	adc	r24, r20
    1ade:	95 1f       	adc	r25, r21
    1ae0:	a0 1d       	adc	r26, r0
    1ae2:	08 95       	ret

00001ae4 <__mulsi3>:
    1ae4:	db 01       	movw	r26, r22
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	0b d0       	rcall	.+22     	; 0x1b02 <__muluhisi3>
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	a2 9f       	mul	r26, r18
    1af2:	80 0d       	add	r24, r0
    1af4:	91 1d       	adc	r25, r1
    1af6:	a3 9f       	mul	r26, r19
    1af8:	90 0d       	add	r25, r0
    1afa:	b2 9f       	mul	r27, r18
    1afc:	90 0d       	add	r25, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	08 95       	ret

00001b02 <__muluhisi3>:
    1b02:	40 d0       	rcall	.+128    	; 0x1b84 <__umulhisi3>
    1b04:	a5 9f       	mul	r26, r21
    1b06:	90 0d       	add	r25, r0
    1b08:	b4 9f       	mul	r27, r20
    1b0a:	90 0d       	add	r25, r0
    1b0c:	a4 9f       	mul	r26, r20
    1b0e:	80 0d       	add	r24, r0
    1b10:	91 1d       	adc	r25, r1
    1b12:	11 24       	eor	r1, r1
    1b14:	08 95       	ret

00001b16 <__prologue_saves__>:
    1b16:	2f 92       	push	r2
    1b18:	3f 92       	push	r3
    1b1a:	4f 92       	push	r4
    1b1c:	5f 92       	push	r5
    1b1e:	6f 92       	push	r6
    1b20:	7f 92       	push	r7
    1b22:	8f 92       	push	r8
    1b24:	9f 92       	push	r9
    1b26:	af 92       	push	r10
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	ca 1b       	sub	r28, r26
    1b40:	db 0b       	sbc	r29, r27
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	09 94       	ijmp

00001b4e <__epilogue_restores__>:
    1b4e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b50:	39 88       	ldd	r3, Y+17	; 0x11
    1b52:	48 88       	ldd	r4, Y+16	; 0x10
    1b54:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b56:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b58:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b60:	b9 84       	ldd	r11, Y+9	; 0x09
    1b62:	c8 84       	ldd	r12, Y+8	; 0x08
    1b64:	df 80       	ldd	r13, Y+7	; 0x07
    1b66:	ee 80       	ldd	r14, Y+6	; 0x06
    1b68:	fd 80       	ldd	r15, Y+5	; 0x05
    1b6a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b6c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b6e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b70:	b9 81       	ldd	r27, Y+1	; 0x01
    1b72:	ce 0f       	add	r28, r30
    1b74:	d1 1d       	adc	r29, r1
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	ed 01       	movw	r28, r26
    1b82:	08 95       	ret

00001b84 <__umulhisi3>:
    1b84:	a2 9f       	mul	r26, r18
    1b86:	b0 01       	movw	r22, r0
    1b88:	b3 9f       	mul	r27, r19
    1b8a:	c0 01       	movw	r24, r0
    1b8c:	a3 9f       	mul	r26, r19
    1b8e:	01 d0       	rcall	.+2      	; 0x1b92 <__umulhisi3+0xe>
    1b90:	b2 9f       	mul	r27, r18
    1b92:	70 0d       	add	r23, r0
    1b94:	81 1d       	adc	r24, r1
    1b96:	11 24       	eor	r1, r1
    1b98:	91 1d       	adc	r25, r1
    1b9a:	08 95       	ret

00001b9c <_exit>:
    1b9c:	f8 94       	cli

00001b9e <__stop_program>:
    1b9e:	ff cf       	rjmp	.-2      	; 0x1b9e <__stop_program>
