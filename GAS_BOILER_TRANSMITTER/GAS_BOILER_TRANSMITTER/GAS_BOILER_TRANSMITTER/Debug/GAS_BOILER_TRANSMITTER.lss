
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001832  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001832  000018c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  0080008c  0080008c  000018f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028fa  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e20  00000000  00000000  000044b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001932  00000000  00000000  000052d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006dc  00000000  00000000  00006c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000992  00000000  00000000  000072e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eb5  00000000  00000000  00007c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	f9 c7       	rjmp	.+4082   	; 0xff6 <__vector_1>
       4:	fe c1       	rjmp	.+1020   	; 0x402 <__vector_2>
       6:	47 c1       	rjmp	.+654    	; 0x296 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	d5 c1       	rjmp	.+938    	; 0x3b8 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	26 c2       	rjmp	.+1100   	; 0x464 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e3       	ldi	r30, 0x32	; 50
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 38       	cpi	r26, 0x8C	; 140
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	ac e8       	ldi	r26, 0x8C	; 140
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a4 35       	cpi	r26, 0x54	; 84
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	32 d2       	rcall	.+1124   	; 0x4be <main>
      5a:	e9 cb       	rjmp	.-2094   	; 0xfffff82e <__eeprom_end+0xff7ef82e>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
void gas_boiler_controller(void)
{
	uint16_t home_temp = home_temp_rx_integer*10+home_temp_rx_fraction;
	uint16_t setpoint = temp_setpoint_integer*10+temp_setpoint_fraction;
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	2c c0       	rjmp	.+88     	; 0xbe <gas_boiler_controller+0x60>

#define DELTA_TEMP 20 //диапазон температур когда котел еще не работает (T*10)

void gas_boiler_controller(void)
{
	uint16_t home_temp = home_temp_rx_integer*10+home_temp_rx_fraction;
      66:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <home_temp_rx_integer>
      6a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <home_temp_rx_fraction>
      6e:	30 e0       	ldi	r19, 0x00	; 0
      70:	5a e0       	ldi	r21, 0x0A	; 10
      72:	85 9f       	mul	r24, r21
      74:	20 0d       	add	r18, r0
      76:	31 1d       	adc	r19, r1
      78:	11 24       	eor	r1, r1
	uint16_t setpoint = temp_setpoint_integer*10+temp_setpoint_fraction;
      7a:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <temp_setpoint_integer>
      7e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_setpoint_fraction>
      82:	90 e0       	ldi	r25, 0x00	; 0
      84:	5a e0       	ldi	r21, 0x0A	; 10
      86:	45 9f       	mul	r20, r21
      88:	80 0d       	add	r24, r0
      8a:	91 1d       	adc	r25, r1
      8c:	11 24       	eor	r1, r1
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
	{
		//если температура уставка больше температуры на 2 градуса, то включаем котел
		if ((home_temp + DELTA_TEMP) <= setpoint)
      8e:	a9 01       	movw	r20, r18
      90:	4c 5e       	subi	r20, 0xEC	; 236
      92:	5f 4f       	sbci	r21, 0xFF	; 255
      94:	84 17       	cp	r24, r20
      96:	95 07       	cpc	r25, r21
      98:	30 f0       	brcs	.+12     	; 0xa6 <gas_boiler_controller+0x48>
		{
			gas_boiler_enable_flag = 1;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      a0:	c0 98       	cbi	0x18, 0	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      a2:	94 9a       	sbi	0x12, 4	; 18
      a4:	07 c0       	rjmp	.+14     	; 0xb4 <gas_boiler_controller+0x56>
			EEPROM_write(5, gas_boiler_enable_flag);
		}
		//если температура больше уставки, то выключаем
		else if (home_temp > setpoint)
      a6:	82 17       	cp	r24, r18
      a8:	93 07       	cpc	r25, r19
      aa:	48 f4       	brcc	.+18     	; 0xbe <gas_boiler_controller+0x60>
		{
			gas_boiler_enable_flag = 0;
      ac:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      b0:	c0 9a       	sbi	0x18, 0	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      b2:	94 98       	cbi	0x12, 4	; 18
			EEPROM_write(5, gas_boiler_enable_flag);
      b4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
      b8:	85 e0       	ldi	r24, 0x05	; 5
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	d1 c0       	rjmp	.+418    	; 0x260 <EEPROM_write>
      be:	08 95       	ret

000000c0 <dt_testdevice>:
  return tt;
}
//функция определения датчика на шине
char dt_testdevice(void) //dt — digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      c0:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывания
      c2:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
      c4:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c6:	e3 e9       	ldi	r30, 0x93	; 147
      c8:	f7 e0       	ldi	r31, 0x07	; 7
      ca:	31 97       	sbiw	r30, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <dt_testdevice+0xa>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <dt_testdevice+0x10>
      d0:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      d2:	8f 98       	cbi	0x11, 7	; 17
      d4:	e3 e0       	ldi	r30, 0x03	; 3
      d6:	f1 e0       	ldi	r31, 0x01	; 1
      d8:	31 97       	sbiw	r30, 0x01	; 1
      da:	f1 f7       	brne	.-4      	; 0xd8 <dt_testdevice+0x18>
      dc:	00 c0       	rjmp	.+0      	; 0xde <dt_testdevice+0x1e>
      de:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
      e0:	80 b3       	in	r24, 0x10	; 16
  {
	  dt=1;//устройство есть
  }
  else dt=0;//устройства нет
  SREG = stektemp;// вернем значение стека
      e2:	9f bf       	out	0x3f, r25	; 63
      e4:	ef e8       	ldi	r30, 0x8F	; 143
      e6:	f6 e0       	ldi	r31, 0x06	; 6
      e8:	31 97       	sbiw	r30, 0x01	; 1
      ea:	f1 f7       	brne	.-4      	; 0xe8 <dt_testdevice+0x28>
      ec:	00 c0       	rjmp	.+0      	; 0xee <dt_testdevice+0x2e>
      ee:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
      f0:	80 95       	com	r24
}
      f2:	88 1f       	adc	r24, r24
      f4:	88 27       	eor	r24, r24
      f6:	88 1f       	adc	r24, r24
      f8:	08 95       	ret

000000fa <dt_readbit>:
	return c;
}
//функция чтения бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
      fa:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
      fc:	f8 94       	cli
  char bt; //переменная хранения бита
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
      fe:	8f 9a       	sbi	0x11, 7	; 17
     100:	2a e0       	ldi	r18, 0x0A	; 10
     102:	2a 95       	dec	r18
     104:	f1 f7       	brne	.-4      	; 0x102 <dt_readbit+0x8>
     106:	00 c0       	rjmp	.+0      	; 0x108 <dt_readbit+0xe>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     108:	8f 98       	cbi	0x11, 7	; 17
     10a:	85 e4       	ldi	r24, 0x45	; 69
     10c:	8a 95       	dec	r24
     10e:	f1 f7       	brne	.-4      	; 0x10c <dt_readbit+0x12>
     110:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     112:	80 b3       	in	r24, 0x10	; 16
     114:	20 ef       	ldi	r18, 0xF0	; 240
     116:	2a 95       	dec	r18
     118:	f1 f7       	brne	.-4      	; 0x116 <dt_readbit+0x1c>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     11a:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     11c:	88 1f       	adc	r24, r24
     11e:	88 27       	eor	r24, r24
     120:	88 1f       	adc	r24, r24
     122:	08 95       	ret

00000124 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	c0 e0       	ldi	r28, 0x00	; 0
     12c:	d0 e0       	ldi	r29, 0x00	; 0
	char c=0;
     12e:	10 e0       	ldi	r17, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
	{
	  c|=dt_readbit()<<i; //читаем бит
     130:	e4 df       	rcall	.-56     	; 0xfa <dt_readbit>
     132:	0c 2e       	mov	r0, r28
     134:	01 c0       	rjmp	.+2      	; 0x138 <dt_readbyte+0x14>
     136:	88 0f       	add	r24, r24
     138:	0a 94       	dec	r0
     13a:	ea f7       	brpl	.-6      	; 0x136 <dt_readbyte+0x12>
     13c:	18 2b       	or	r17, r24
     13e:	21 96       	adiw	r28, 0x01	; 1
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     140:	c8 30       	cpi	r28, 0x08	; 8
     142:	d1 05       	cpc	r29, r1
     144:	a9 f7       	brne	.-22     	; 0x130 <dt_readbyte+0xc>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     146:	81 2f       	mov	r24, r17
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	1f 91       	pop	r17
     14e:	08 95       	ret

00000150 <dt_sendbit>:
	}
}
//функция записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     150:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
     152:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     154:	8f 9a       	sbi	0x11, 7	; 17
     156:	2a e0       	ldi	r18, 0x0A	; 10
     158:	2a 95       	dec	r18
     15a:	f1 f7       	brne	.-4      	; 0x158 <dt_sendbit+0x8>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <dt_sendbit+0xe>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     15e:	81 11       	cpse	r24, r1
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     160:	8f 98       	cbi	0x11, 7	; 17
     162:	e3 e0       	ldi	r30, 0x03	; 3
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	31 97       	sbiw	r30, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <dt_sendbit+0x16>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <dt_sendbit+0x1c>
     16c:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     16e:	8f 98       	cbi	0x11, 7	; 17
	SREG = stektemp;// вернем значение стека
     170:	9f bf       	out	0x3f, r25	; 63
     172:	08 95       	ret

00000174 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     184:	ee 24       	eor	r14, r14
     186:	e3 94       	inc	r14
     188:	f1 2c       	mov	r15, r1
     18a:	08 2f       	mov	r16, r24
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	c7 01       	movw	r24, r14
     190:	0c 2e       	mov	r0, r28
     192:	02 c0       	rjmp	.+4      	; 0x198 <dt_sendbyte+0x24>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	0a 94       	dec	r0
     19a:	e2 f7       	brpl	.-8      	; 0x194 <dt_sendbyte+0x20>
     19c:	98 01       	movw	r18, r16
     19e:	28 23       	and	r18, r24
     1a0:	39 23       	and	r19, r25
     1a2:	82 17       	cp	r24, r18
     1a4:	93 07       	cpc	r25, r19
     1a6:	11 f4       	brne	.+4      	; 0x1ac <dt_sendbyte+0x38>
		dt_sendbit(1);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <dt_sendbyte+0x3a>
		else //посылаем 0
		dt_sendbit(0);
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	d0 df       	rcall	.-96     	; 0x150 <dt_sendbit>
     1b0:	21 96       	adiw	r28, 0x01	; 1
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1b2:	c8 30       	cpi	r28, 0x08	; 8
     1b4:	d1 05       	cpc	r29, r1
     1b6:	59 f7       	brne	.-42     	; 0x18e <dt_sendbyte+0x1a>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	08 95       	ret

000001c6 <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
     1c6:	cf 93       	push	r28
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     1c8:	7b df       	rcall	.-266    	; 0xc0 <dt_testdevice>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	d9 f4       	brne	.+54     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1ce:	8c ec       	ldi	r24, 0xCC	; 204
     1d0:	d1 df       	rcall	.-94     	; 0x174 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измеряем температуру
     1d2:	84 e4       	ldi	r24, 0x44	; 68
     1d4:	cf df       	rcall	.-98     	; 0x174 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d6:	2f ef       	ldi	r18, 0xFF	; 255
     1d8:	4d e2       	ldi	r20, 0x2D	; 45
     1da:	59 e0       	ldi	r21, 0x09	; 9
     1dc:	21 50       	subi	r18, 0x01	; 1
     1de:	40 40       	sbci	r20, 0x00	; 0
     1e0:	50 40       	sbci	r21, 0x00	; 0
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <dt_check+0x16>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <dt_check+0x20>
     1e6:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразования — 188 милисекунд
   dt_testdevice(); //снова используем те же манипуляции с шиной что и при проверке ее присутствия
     1e8:	6b df       	rcall	.-298    	; 0xc0 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1ea:	8c ec       	ldi	r24, 0xCC	; 204
     1ec:	c3 df       	rcall	.-122    	; 0x174 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     1ee:	8e eb       	ldi	r24, 0xBE	; 190
     1f0:	c1 df       	rcall	.-126    	; 0x174 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     1f2:	98 df       	rcall	.-208    	; 0x124 <dt_readbyte>
     1f4:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     1f6:	96 df       	rcall	.-212    	; 0x124 <dt_readbyte>
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     1f8:	2c 2f       	mov	r18, r28
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	a9 01       	movw	r20, r18
     1fe:	58 2b       	or	r21, r24
     200:	ca 01       	movw	r24, r20
     202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     20c:	dc df       	rcall	.-72     	; 0x1c6 <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//целая часть темп
	uint8_t temp_fraction;//дробная часть темп
	if (temp_sign == 0x00)
     20e:	29 2f       	mov	r18, r25
     210:	25 95       	asr	r18
     212:	25 95       	asr	r18
     214:	25 95       	asr	r18
	{
		home_temp_own_fraction = tt & 0xF;
     216:	38 2f       	mov	r19, r24
	int tt = 0;
	tt = dt_check();
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
	uint8_t temp_integer;//целая часть темп
	uint8_t temp_fraction;//дробная часть темп
	if (temp_sign == 0x00)
     218:	61 f4       	brne	.+24     	; 0x232 <DS18b0_find_temp+0x26>
	{
		home_temp_own_fraction = tt & 0xF;
     21a:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     21c:	23 2f       	mov	r18, r19
     21e:	22 0f       	add	r18, r18
     220:	48 e0       	ldi	r20, 0x08	; 8
     222:	34 9f       	mul	r19, r20
     224:	20 0d       	add	r18, r0
     226:	11 24       	eor	r1, r1
     228:	22 95       	swap	r18
     22a:	2f 70       	andi	r18, 0x0F	; 15
     22c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <home_temp_own_fraction>
     230:	0e c0       	rjmp	.+28     	; 0x24e <DS18b0_find_temp+0x42>
		home_temp_own_integer = (tt&0x07FF)>>4;
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     232:	30 95       	com	r19
     234:	3f 70       	andi	r19, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// ”множаем на 10
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     236:	23 2f       	mov	r18, r19
     238:	22 0f       	add	r18, r18
     23a:	48 e0       	ldi	r20, 0x08	; 8
     23c:	34 9f       	mul	r19, r20
     23e:	20 0d       	add	r18, r0
     240:	11 24       	eor	r1, r1
     242:	22 95       	swap	r18
     244:	2f 70       	andi	r18, 0x0F	; 15
     246:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     24a:	80 95       	com	r24
     24c:	90 95       	com	r25
     24e:	97 70       	andi	r25, 0x07	; 7
     250:	24 e0       	ldi	r18, 0x04	; 4
     252:	95 95       	asr	r25
     254:	87 95       	ror	r24
     256:	2a 95       	dec	r18
     258:	e1 f7       	brne	.-8      	; 0x252 <DS18b0_find_temp+0x46>
     25a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <home_temp_own_integer>
     25e:	08 95       	ret

00000260 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождения флага окончания последней операцией с памятью
     260:	e1 99       	sbic	0x1c, 1	; 28
     262:	fe cf       	rjmp	.-4      	; 0x260 <EEPROM_write>
	{}
	EEAR = uiAddress; //Устанавливаем адрес
     264:	9f bb       	out	0x1f, r25	; 31
     266:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //Пищем данные в регистр
     268:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //Разрешаем запись
     26a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //Пишем байт в память
     26c:	e1 9a       	sbi	0x1c, 1	; 28
     26e:	08 95       	ret

00000270 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     270:	e1 99       	sbic	0x1c, 1	; 28
     272:	fe cf       	rjmp	.-4      	; 0x270 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
     274:	9f bb       	out	0x1f, r25	; 31
     276:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
     278:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
     27a:	8d b3       	in	r24, 0x1d	; 29
}
     27c:	08 95       	ret

0000027e <timer2_ini>:
char esp_setpoint[10];

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
     27e:	85 b5       	in	r24, 0x25	; 37
     280:	88 60       	ori	r24, 0x08	; 8
     282:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     284:	89 b7       	in	r24, 0x39	; 57
     286:	80 68       	ori	r24, 0x80	; 128
     288:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число для сравнения 200
     28a:	88 ec       	ldi	r24, 0xC8	; 200
     28c:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     28e:	85 b5       	in	r24, 0x25	; 37
     290:	82 60       	ori	r24, 0x02	; 2
     292:	85 bd       	out	0x25, r24	; 37
     294:	08 95       	ret

00000296 <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	2f 93       	push	r18
     2a2:	3f 93       	push	r19
     2a4:	4f 93       	push	r20
     2a6:	5f 93       	push	r21
     2a8:	6f 93       	push	r22
     2aa:	7f 93       	push	r23
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
     2b0:	af 93       	push	r26
     2b2:	bf 93       	push	r27
     2b4:	cf 93       	push	r28
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
	if(OK_BUTTON_FLAG == 1)
     2ba:	c0 91 ae 00 	lds	r28, 0x00AE	; 0x8000ae <OK_BUTTON_FLAG>
     2be:	c1 30       	cpi	r28, 0x01	; 1
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <__vector_3+0x2e>
     2c2:	5a c0       	rjmp	.+180    	; 0x378 <__vector_3+0xe2>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     2c4:	9a 99       	sbic	0x13, 2	; 19
     2c6:	28 c0       	rjmp	.+80     	; 0x318 <__vector_3+0x82>
     2c8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <UP_BUTTON_FLAG>
     2cc:	81 11       	cpse	r24, r1
     2ce:	24 c0       	rjmp	.+72     	; 0x318 <__vector_3+0x82>
		{
			temp_setpoint += 5;
     2d0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <temp_setpoint>
     2d4:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <temp_setpoint+0x1>
     2d8:	05 96       	adiw	r24, 0x05	; 5
     2da:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <temp_setpoint+0x1>
     2de:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     2e2:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <home_temp_rx_integer>
     2e6:	6a e0       	ldi	r22, 0x0A	; 10
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	78 d7       	rcall	.+3824   	; 0x11dc <__udivmodhi4>
     2ec:	3a e0       	ldi	r19, 0x0A	; 10
     2ee:	36 9f       	mul	r19, r22
     2f0:	a0 01       	movw	r20, r0
     2f2:	37 9f       	mul	r19, r23
     2f4:	50 0d       	add	r21, r0
     2f6:	11 24       	eor	r1, r1
     2f8:	ba 01       	movw	r22, r20
     2fa:	68 0f       	add	r22, r24
     2fc:	79 1f       	adc	r23, r25
     2fe:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <home_temp_rx_fraction>
     302:	89 2f       	mov	r24, r25
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	3a e0       	ldi	r19, 0x0A	; 10
     308:	23 9f       	mul	r18, r19
     30a:	80 0d       	add	r24, r0
     30c:	91 1d       	adc	r25, r1
     30e:	11 24       	eor	r1, r1
     310:	53 d5       	rcall	.+2726   	; 0xdb8 <PrintTemp_MAX7219>
			UP_BUTTON_FLAG = 1;
     312:	c0 93 ad 00 	sts	0x00AD, r28	; 0x8000ad <UP_BUTTON_FLAG>
     316:	2a c0       	rjmp	.+84     	; 0x36c <__vector_3+0xd6>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     318:	9b 99       	sbic	0x13, 3	; 19
     31a:	28 c0       	rjmp	.+80     	; 0x36c <__vector_3+0xd6>
     31c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <DOWN_BUTTON_FLAG>
     320:	81 11       	cpse	r24, r1
     322:	24 c0       	rjmp	.+72     	; 0x36c <__vector_3+0xd6>
		{
			temp_setpoint -= 5;
     324:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <temp_setpoint>
     328:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <temp_setpoint+0x1>
     32c:	05 97       	sbiw	r24, 0x05	; 5
     32e:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <temp_setpoint+0x1>
     332:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <temp_setpoint>
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, (temp_setpoint/10)*10+(temp_setpoint%10));
     336:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <home_temp_rx_integer>
     33a:	6a e0       	ldi	r22, 0x0A	; 10
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	4e d7       	rcall	.+3740   	; 0x11dc <__udivmodhi4>
     340:	3a e0       	ldi	r19, 0x0A	; 10
     342:	36 9f       	mul	r19, r22
     344:	a0 01       	movw	r20, r0
     346:	37 9f       	mul	r19, r23
     348:	50 0d       	add	r21, r0
     34a:	11 24       	eor	r1, r1
     34c:	ba 01       	movw	r22, r20
     34e:	68 0f       	add	r22, r24
     350:	79 1f       	adc	r23, r25
     352:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <home_temp_rx_fraction>
     356:	89 2f       	mov	r24, r25
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	3a e0       	ldi	r19, 0x0A	; 10
     35c:	23 9f       	mul	r18, r19
     35e:	80 0d       	add	r24, r0
     360:	91 1d       	adc	r25, r1
     362:	11 24       	eor	r1, r1
     364:	29 d5       	rcall	.+2642   	; 0xdb8 <PrintTemp_MAX7219>
			DOWN_BUTTON_FLAG = 1;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <DOWN_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     36c:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     36e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     372:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     374:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <DOWN_BUTTON_FLAG>
		}
	}
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	cf 91       	pop	r28
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     39c:	8e b5       	in	r24, 0x2e	; 46
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     3a2:	89 b7       	in	r24, 0x39	; 57
     3a4:	80 61       	ori	r24, 0x10	; 16
     3a6:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число для сравнения 2000
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     3ac:	80 ed       	ldi	r24, 0xD0	; 208
     3ae:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     3b0:	8e b5       	in	r24, 0x2e	; 46
     3b2:	82 60       	ori	r24, 0x02	; 2
     3b4:	8e bd       	out	0x2e, r24	; 46
     3b6:	08 95       	ret

000003b8 <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
	millis++;
     3ca:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     3ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     3d2:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <millis+0x2>
     3d6:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <millis+0x3>
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	a1 1d       	adc	r26, r1
     3de:	b1 1d       	adc	r27, r1
     3e0:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <millis>
     3e4:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <millis+0x1>
     3e8:	a0 93 c1 00 	sts	0x00C1, r26	; 0x8000c1 <millis+0x2>
     3ec:	b0 93 c2 00 	sts	0x00C2, r27	; 0x8000c2 <millis+0x3>
		//отправляем в БД данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
		USART_Transmit(DATA_TO_UART);
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
	}*/
}
     3f0:	bf 91       	pop	r27
     3f2:	af 91       	pop	r26
     3f4:	9f 91       	pop	r25
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
	interrupt_1_flag = 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <interrupt_1_flag>
	else 
	{
		temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
		OK_BUTTON_FLAG = 1;
	}*/
}
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     420:	87 b3       	in	r24, 0x17	; 23
     422:	8e 62       	ori	r24, 0x2E	; 46
     424:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     426:	88 b3       	in	r24, 0x18	; 24
     428:	83 7d       	andi	r24, 0xD3	; 211
     42a:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     42c:	c2 9a       	sbi	0x18, 2	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ¤вим ведущим
     42e:	8d b1       	in	r24, 0x0d	; 13
     430:	80 65       	ori	r24, 0x50	; 80
     432:	8d b9       	out	0x0d, r24	; 13
}
     434:	08 95       	ret

00000436 <port_init>:
port_init(void)
{
	//инициализация ножки IRQ для внеш прерывания
	DDRD &= ~(1<<IRQ);
     436:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<IRQ);
     438:	92 9a       	sbi	0x12, 2	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     43a:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<LED_TX);
     43c:	96 98       	cbi	0x12, 6	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     43e:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1<<LED_RX);
     440:	95 98       	cbi	0x12, 5	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     442:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     444:	94 98       	cbi	0x12, 4	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     446:	a1 9a       	sbi	0x14, 1	; 20
	PORTC &= ~(1<<LED_WIFI);
     448:	a9 98       	cbi	0x15, 1	; 21
	//инициализация мосфета
	DDRB |= (1<<MOSFET);
     44a:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1<<MOSFET);
     44c:	c0 98       	cbi	0x18, 0	; 24
	//инициализация индикатора
	DDRC |= (1<<MAX7219_SS);
     44e:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= (1<<MAX7219_SS);
     450:	a8 9a       	sbi	0x15, 0	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     452:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<BUTTON_OK);
     454:	93 9a       	sbi	0x12, 3	; 18
	DDRC &= ~(1<<BUTTON_UP);
     456:	a2 98       	cbi	0x14, 2	; 20
	PORTC |= (1<<BUTTON_UP);
     458:	aa 9a       	sbi	0x15, 2	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     45a:	a3 98       	cbi	0x14, 3	; 20
	PORTC |= (1<<BUTTON_DOWN);
     45c:	ab 9a       	sbi	0x15, 3	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     45e:	8f 98       	cbi	0x11, 7	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     460:	97 98       	cbi	0x12, 7	; 18
}
     462:	08 95       	ret

00000464 <__vector_11>:
//обработчик прерывания по UART
uint16_t uart_rx_count = 0;
char uart_rx_buffer[50];
char rx_esp_data[50];
ISR(USART_RXC_vect)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	2f 93       	push	r18
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	ef 93       	push	r30
     476:	ff 93       	push	r31
	uart_rx_buffer[uart_rx_count] = UDR;
     478:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     47c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
     480:	2c b1       	in	r18, 0x0c	; 12
     482:	fc 01       	movw	r30, r24
     484:	e5 5e       	subi	r30, 0xE5	; 229
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     48a:	2f 32       	cpi	r18, 0x2F	; 47
     48c:	21 f4       	brne	.+8      	; 0x496 <__vector_11+0x32>
	{
		uart_ready_flag = 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <uart_ready_flag>
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_11+0x3c>
	}
	else
	{
		uart_rx_count++;
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
     49c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	}
}
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     4b4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     4b6:	77 9b       	sbis	0x0e, 7	; 14
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <spi_send_recv+0x2>
	return SPDR;
     4ba:	8f b1       	in	r24, 0x0f	; 15
}
     4bc:	08 95       	ret

000004be <main>:
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	33 ed       	ldi	r19, 0xD3	; 211
     4c2:	40 e3       	ldi	r20, 0x30	; 48
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	30 40       	sbci	r19, 0x00	; 0
     4c8:	40 40       	sbci	r20, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0x6>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x10>
     4ce:	00 00       	nop
void main(void)
{
	_delay_ms(1000);
	port_init();
     4d0:	b2 df       	rcall	.-156    	; 0x436 <port_init>
	PORTD |= (1<<LED_TX);
     4d2:	96 9a       	sbi	0x12, 6	; 18
	PORTD |= (1<<LED_RX);
     4d4:	95 9a       	sbi	0x12, 5	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     4d6:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<LED_WIFI);
     4d8:	a9 9a       	sbi	0x15, 1	; 21
	SPI_init();
     4da:	a2 df       	rcall	.-188    	; 0x420 <SPI_init>
	USART_Init(16);    //Инициализация модуля USART скорость 115200	
     4dc:	80 e1       	ldi	r24, 0x10	; 16
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	5b d6       	rcall	.+3254   	; 0x1198 <USART_Init>
    NRF24_ini();
     4e2:	df d5       	rcall	.+3006   	; 0x10a2 <NRF24_ini>
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	91 ee       	ldi	r25, 0xE1	; 225
     4e8:	a4 e0       	ldi	r26, 0x04	; 4
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	a0 40       	sbci	r26, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x2c>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x36>
     4f4:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     4f6:	07 d4       	rcall	.+2062   	; 0xd06 <MAX7219_init>
     4f8:	bf ef       	ldi	r27, 0xFF	; 255
     4fa:	23 ed       	ldi	r18, 0xD3	; 211
     4fc:	30 e3       	ldi	r19, 0x30	; 48
     4fe:	b1 50       	subi	r27, 0x01	; 1
     500:	20 40       	sbci	r18, 0x00	; 0
     502:	30 40       	sbci	r19, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <main+0x40>
     506:	00 c0       	rjmp	.+0      	; 0x508 <main+0x4a>
     508:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывания
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     50a:	85 b7       	in	r24, 0x35	; 53
     50c:	8a 60       	ori	r24, 0x0A	; 10
     50e:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     510:	8b b7       	in	r24, 0x3b	; 59
     512:	80 6c       	ori	r24, 0xC0	; 192
     514:	8b bf       	out	0x3b, r24	; 59
     516:	4f ef       	ldi	r20, 0xFF	; 255
     518:	87 ea       	ldi	r24, 0xA7	; 167
     51a:	91 e6       	ldi	r25, 0x61	; 97
     51c:	41 50       	subi	r20, 0x01	; 1
     51e:	80 40       	sbci	r24, 0x00	; 0
     520:	90 40       	sbci	r25, 0x00	; 0
     522:	e1 f7       	brne	.-8      	; 0x51c <main+0x5e>
     524:	00 c0       	rjmp	.+0      	; 0x526 <main+0x68>
     526:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     528:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~(1<<LED_RX);
     52a:	95 98       	cbi	0x12, 5	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     52c:	94 98       	cbi	0x12, 4	; 18
	PORTC &= ~(1<<LED_WIFI);
     52e:	a9 98       	cbi	0x15, 1	; 21
	timer1_ini();
     530:	35 df       	rcall	.-406    	; 0x39c <timer1_ini>
	timer2_ini();
     532:	a5 de       	rcall	.-694    	; 0x27e <timer2_ini>
	gas_boiler_controller();
     534:	94 dd       	rcall	.-1240   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     536:	81 b5       	in	r24, 0x21	; 33
     538:	87 7f       	andi	r24, 0xF7	; 247
     53a:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     53c:	9f e0       	ldi	r25, 0x0F	; 15
     53e:	88 e1       	ldi	r24, 0x18	; 24
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	a8 95       	wdr
     546:	81 bd       	out	0x21, r24	; 33
     548:	0f be       	out	0x3f, r0	; 63
     54a:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     54c:	47 9a       	sbi	0x08, 7	; 8
     54e:	af ef       	ldi	r26, 0xFF	; 255
     550:	bd e3       	ldi	r27, 0x3D	; 61
     552:	29 e4       	ldi	r18, 0x49	; 73
     554:	a1 50       	subi	r26, 0x01	; 1
     556:	b0 40       	sbci	r27, 0x00	; 0
     558:	20 40       	sbci	r18, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <main+0x96>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0xa0>
     55e:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     560:	a8 95       	wdr
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	4d e3       	ldi	r20, 0x3D	; 61
     566:	89 e4       	ldi	r24, 0x49	; 73
     568:	31 50       	subi	r19, 0x01	; 1
     56a:	40 40       	sbci	r20, 0x00	; 0
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <main+0xaa>
     570:	00 c0       	rjmp	.+0      	; 0x572 <main+0xb4>
     572:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     574:	a8 95       	wdr
	3-температура целая
	4-температура дробь
	5-статус котла
	6-режим работы
	*/
	if(EEPROM_read(1) > 100) EEPROM_write(1,20);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	7a de       	rcall	.-780    	; 0x270 <EEPROM_read>
     57c:	85 36       	cpi	r24, 0x65	; 101
     57e:	20 f0       	brcs	.+8      	; 0x588 <main+0xca>
     580:	64 e1       	ldi	r22, 0x14	; 20
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	6c de       	rcall	.-808    	; 0x260 <EEPROM_write>
	if(EEPROM_read(2) > 100) EEPROM_write(2,0);
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	71 de       	rcall	.-798    	; 0x270 <EEPROM_read>
     58e:	85 36       	cpi	r24, 0x65	; 101
     590:	20 f0       	brcs	.+8      	; 0x59a <main+0xdc>
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	63 de       	rcall	.-826    	; 0x260 <EEPROM_write>
	if(EEPROM_read(3) > 100) EEPROM_write(3,20);
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	68 de       	rcall	.-816    	; 0x270 <EEPROM_read>
     5a0:	85 36       	cpi	r24, 0x65	; 101
     5a2:	20 f0       	brcs	.+8      	; 0x5ac <main+0xee>
     5a4:	64 e1       	ldi	r22, 0x14	; 20
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	5a de       	rcall	.-844    	; 0x260 <EEPROM_write>
	if(EEPROM_read(4) > 100) EEPROM_write(4,0);
     5ac:	84 e0       	ldi	r24, 0x04	; 4
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	5f de       	rcall	.-834    	; 0x270 <EEPROM_read>
     5b2:	85 36       	cpi	r24, 0x65	; 101
     5b4:	20 f0       	brcs	.+8      	; 0x5be <main+0x100>
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	84 e0       	ldi	r24, 0x04	; 4
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	51 de       	rcall	.-862    	; 0x260 <EEPROM_write>
	if(EEPROM_read(5) > 100) EEPROM_write(5,0);
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	56 de       	rcall	.-852    	; 0x270 <EEPROM_read>
     5c4:	85 36       	cpi	r24, 0x65	; 101
     5c6:	20 f0       	brcs	.+8      	; 0x5d0 <main+0x112>
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	48 de       	rcall	.-880    	; 0x260 <EEPROM_write>
	if(EEPROM_read(6) > 100) EEPROM_write(6,0);
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	4d de       	rcall	.-870    	; 0x270 <EEPROM_read>
     5d6:	85 36       	cpi	r24, 0x65	; 101
     5d8:	20 f0       	brcs	.+8      	; 0x5e2 <main+0x124>
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	86 e0       	ldi	r24, 0x06	; 6
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	3f de       	rcall	.-898    	; 0x260 <EEPROM_write>
	temp_setpoint_integer = EEPROM_read(1);
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	44 de       	rcall	.-888    	; 0x270 <EEPROM_read>
     5e8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <temp_setpoint_integer>
	temp_setpoint_fraction = EEPROM_read(2);
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	3f de       	rcall	.-898    	; 0x270 <EEPROM_read>
     5f2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_setpoint_fraction>
	home_temp_rx_integer = EEPROM_read(3);
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	3a de       	rcall	.-908    	; 0x270 <EEPROM_read>
     5fc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <home_temp_rx_integer>
	home_temp_rx_fraction = EEPROM_read(4);
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	35 de       	rcall	.-918    	; 0x270 <EEPROM_read>
     606:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <home_temp_rx_fraction>
	gas_boiler_enable_flag = EEPROM_read(5);
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	30 de       	rcall	.-928    	; 0x270 <EEPROM_read>
     610:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gas_boiler_enable_flag>
	work_mode = EEPROM_read(6);
     614:	86 e0       	ldi	r24, 0x06	; 6
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2b de       	rcall	.-938    	; 0x270 <EEPROM_read>
     61a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <work_mode>

	gas_boiler_controller();
     61e:	1f dd       	rcall	.-1474   	; 0x5e <gas_boiler_controller>
	//отправляем в БД первичные данные после включения
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     620:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <work_mode>
     624:	1f 92       	push	r1
     626:	8f 93       	push	r24
     628:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_setpoint_fraction>
     62c:	1f 92       	push	r1
     62e:	8f 93       	push	r24
     630:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_setpoint_integer>
     634:	1f 92       	push	r1
     636:	8f 93       	push	r24
     638:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <home_temp_rx_fraction>
     63c:	1f 92       	push	r1
     63e:	8f 93       	push	r24
     640:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <home_temp_rx_integer>
     644:	1f 92       	push	r1
     646:	8f 93       	push	r24
     648:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
     64c:	1f 92       	push	r1
     64e:	8f 93       	push	r24
     650:	86 e6       	ldi	r24, 0x66	; 102
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	ce e8       	ldi	r28, 0x8E	; 142
     65a:	d0 e0       	ldi	r29, 0x00	; 0
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	0e d6       	rcall	.+3100   	; 0x127e <sprintf>
	USART_Transmit(DATA_TO_UART);
     662:	ce 01       	movw	r24, r28
     664:	a4 d5       	rcall	.+2888   	; 0x11ae <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     666:	09 90       	ld	r0, Y+
     668:	00 20       	and	r0, r0
     66a:	e9 f7       	brne	.-6      	; 0x666 <main+0x1a8>
     66c:	21 97       	sbiw	r28, 0x01	; 1
     66e:	ae 01       	movw	r20, r28
     670:	4e 58       	subi	r20, 0x8E	; 142
     672:	50 40       	sbci	r21, 0x00	; 0
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	8e e8       	ldi	r24, 0x8E	; 142
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	df d5       	rcall	.+3006   	; 0x123c <memset>
	sei();
     67e:	78 94       	sei
     680:	2d b7       	in	r18, 0x3d	; 61
     682:	3e b7       	in	r19, 0x3e	; 62
     684:	20 5f       	subi	r18, 0xF0	; 240
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	3e bf       	out	0x3e, r19	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	2d bf       	out	0x3d, r18	; 61
				break;
				case 110:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
				{
					gas_boiler_enable_flag = 0;
					work_mode = 1;
     692:	99 24       	eor	r9, r9
     694:	93 94       	inc	r9
		if (interrupt_1_flag == 1)
		{
			if (OK_BUTTON_FLAG == 1) 
			{
				OK_BUTTON_FLAG = 0;
				temp_setpoint_integer = temp_setpoint/10;
     696:	9a e0       	ldi	r25, 0x0A	; 10
     698:	c9 2e       	mov	r12, r25
     69a:	d1 2c       	mov	r13, r1
				temp_setpoint_fraction = temp_setpoint%10;
				EEPROM_write(1, temp_setpoint_integer);
				EEPROM_write(2, temp_setpoint_fraction);
				gas_boiler_controller();
				//отправляем в БД данные с новой инфо
				sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     69c:	06 e6       	ldi	r16, 0x66	; 102
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	ce e8       	ldi	r28, 0x8E	; 142
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
			//если хотим поменять уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
			{
				buf1[0] += 100;
			}
			buf1[1] = temp_setpoint_integer;
     6a4:	29 ec       	ldi	r18, 0xC9	; 201
     6a6:	a2 2e       	mov	r10, r18
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	b2 2e       	mov	r11, r18
			millis_send_db = millis;
		}
		//если пришли данные по uart
		if (uart_ready_flag == 1)
		{
			memcpy(rx_esp_data,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     6ac:	3b e1       	ldi	r19, 0x1B	; 27
     6ae:	e3 2e       	mov	r14, r19
     6b0:	31 e0       	ldi	r19, 0x01	; 1
     6b2:	f3 2e       	mov	r15, r19
				{
					work_mode = work_mode_from_BD;
					EEPROM_write(6, work_mode);
				}*/
			}
			memset(rx_esp_data, 0, sizeof(rx_esp_data));
     6b4:	42 e3       	ldi	r20, 0x32	; 50
     6b6:	84 2e       	mov	r8, r20
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
	sei();
	while (1) 
    {
		//если пришли данные от управляющего устройства
		if (rx_flag == 1)
     6b8:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <rx_flag>
     6bc:	91 30       	cpi	r25, 0x01	; 1
     6be:	09 f0       	breq	.+2      	; 0x6c2 <main+0x204>
     6c0:	37 c1       	rjmp	.+622    	; 0x930 <main+0x472>
		{
			PORTD |= (1<<LED_RX);
     6c2:	95 9a       	sbi	0x12, 5	; 18
     6c4:	3f ef       	ldi	r19, 0xFF	; 255
     6c6:	41 ee       	ldi	r20, 0xE1	; 225
     6c8:	84 e0       	ldi	r24, 0x04	; 4
     6ca:	31 50       	subi	r19, 0x01	; 1
     6cc:	40 40       	sbci	r20, 0x00	; 0
     6ce:	80 40       	sbci	r24, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0x20c>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x216>
     6d4:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~(1<<LED_RX);
     6d6:	95 98       	cbi	0x12, 5	; 18
			millis_hometemp_update = millis;
     6d8:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <millis>
     6dc:	50 91 c0 00 	lds	r21, 0x00C0	; 0x8000c0 <millis+0x1>
     6e0:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <millis+0x2>
     6e4:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <millis+0x3>
     6e8:	40 93 bb 00 	sts	0x00BB, r20	; 0x8000bb <millis_hometemp_update>
     6ec:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <millis_hometemp_update+0x1>
     6f0:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <millis_hometemp_update+0x2>
     6f4:	70 93 be 00 	sts	0x00BE, r23	; 0x8000be <millis_hometemp_update+0x3>
			
			gas_boiler_enable_flag = RX_BUF[0];
     6f8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <RX_BUF>
     6fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <gas_boiler_enable_flag>
			switch (gas_boiler_enable_flag)
     700:	8b 30       	cpi	r24, 0x0B	; 11
     702:	09 f4       	brne	.+2      	; 0x706 <main+0x248>
     704:	57 c0       	rjmp	.+174    	; 0x7b4 <main+0x2f6>
     706:	30 f4       	brcc	.+12     	; 0x714 <main+0x256>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	99 f0       	breq	.+38     	; 0x732 <main+0x274>
     70c:	90 f0       	brcs	.+36     	; 0x732 <main+0x274>
     70e:	8a 30       	cpi	r24, 0x0A	; 10
     710:	91 f1       	breq	.+100    	; 0x776 <main+0x2b8>
     712:	0c c1       	rjmp	.+536    	; 0x92c <main+0x46e>
     714:	85 36       	cpi	r24, 0x65	; 101
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x25c>
     718:	89 c0       	rjmp	.+274    	; 0x82c <main+0x36e>
     71a:	20 f4       	brcc	.+8      	; 0x724 <main+0x266>
     71c:	84 36       	cpi	r24, 0x64	; 100
     71e:	09 f4       	brne	.+2      	; 0x722 <main+0x264>
     720:	68 c0       	rjmp	.+208    	; 0x7f2 <main+0x334>
     722:	04 c1       	rjmp	.+520    	; 0x92c <main+0x46e>
     724:	8e 36       	cpi	r24, 0x6E	; 110
     726:	09 f4       	brne	.+2      	; 0x72a <main+0x26c>
     728:	a2 c0       	rjmp	.+324    	; 0x86e <main+0x3b0>
     72a:	8f 36       	cpi	r24, 0x6F	; 111
     72c:	09 f4       	brne	.+2      	; 0x730 <main+0x272>
     72e:	c2 c0       	rjmp	.+388    	; 0x8b4 <main+0x3f6>
     730:	fd c0       	rjmp	.+506    	; 0x92c <main+0x46e>
					EEPROM_write(4, home_temp_rx_fraction);
					EEPROM_write(6, work_mode);
				}
				break;
				case 1:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     732:	60 91 d7 00 	lds	r22, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     736:	63 33       	cpi	r22, 0x33	; 51
     738:	08 f0       	brcs	.+2      	; 0x73c <main+0x27e>
     73a:	f8 c0       	rjmp	.+496    	; 0x92c <main+0x46e>
     73c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     740:	8a 30       	cpi	r24, 0x0A	; 10
     742:	08 f0       	brcs	.+2      	; 0x746 <main+0x288>
     744:	f3 c0       	rjmp	.+486    	; 0x92c <main+0x46e>
     746:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     74a:	93 33       	cpi	r25, 0x33	; 51
     74c:	08 f0       	brcs	.+2      	; 0x750 <main+0x292>
     74e:	ee c0       	rjmp	.+476    	; 0x92c <main+0x46e>
     750:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     754:	9a 30       	cpi	r25, 0x0A	; 10
     756:	08 f0       	brcs	.+2      	; 0x75a <main+0x29c>
     758:	e9 c0       	rjmp	.+466    	; 0x92c <main+0x46e>
				{
					work_mode = 0;
     75a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     75e:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     762:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <home_temp_rx_fraction>
					EEPROM_write(3, home_temp_rx_integer);
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	7a dd       	rcall	.-1292   	; 0x260 <EEPROM_write>
					EEPROM_write(4, home_temp_rx_fraction);
     76c:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <home_temp_rx_fraction>
     770:	84 e0       	ldi	r24, 0x04	; 4
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	d5 c0       	rjmp	.+426    	; 0x920 <main+0x462>
					EEPROM_write(6, work_mode);
				}
				break;
				case 10:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     776:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     77a:	93 33       	cpi	r25, 0x33	; 51
     77c:	08 f0       	brcs	.+2      	; 0x780 <main+0x2c2>
     77e:	d6 c0       	rjmp	.+428    	; 0x92c <main+0x46e>
     780:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     784:	8a 30       	cpi	r24, 0x0A	; 10
     786:	08 f0       	brcs	.+2      	; 0x78a <main+0x2cc>
     788:	d1 c0       	rjmp	.+418    	; 0x92c <main+0x46e>
     78a:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     78e:	23 33       	cpi	r18, 0x33	; 51
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x2d6>
     792:	cc c0       	rjmp	.+408    	; 0x92c <main+0x46e>
     794:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     798:	2a 30       	cpi	r18, 0x0A	; 10
     79a:	08 f0       	brcs	.+2      	; 0x79e <main+0x2e0>
     79c:	c7 c0       	rjmp	.+398    	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 0;
     79e:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 1;
     7a2:	90 92 c3 00 	sts	0x00C3, r9	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     7a6:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     7aa:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <home_temp_rx_fraction>
					PORTB |= (1<<MOSFET);
     7ae:	c0 9a       	sbi	0x18, 0	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
     7b0:	94 98       	cbi	0x12, 4	; 18
     7b2:	a8 c0       	rjmp	.+336    	; 0x904 <main+0x446>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 11:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     7b4:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     7b8:	23 33       	cpi	r18, 0x33	; 51
     7ba:	08 f0       	brcs	.+2      	; 0x7be <main+0x300>
     7bc:	b7 c0       	rjmp	.+366    	; 0x92c <main+0x46e>
     7be:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     7c2:	8a 30       	cpi	r24, 0x0A	; 10
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <main+0x30a>
     7c6:	b2 c0       	rjmp	.+356    	; 0x92c <main+0x46e>
     7c8:	30 91 d5 00 	lds	r19, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     7cc:	33 33       	cpi	r19, 0x33	; 51
     7ce:	08 f0       	brcs	.+2      	; 0x7d2 <main+0x314>
     7d0:	ad c0       	rjmp	.+346    	; 0x92c <main+0x46e>
     7d2:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     7d6:	3a 30       	cpi	r19, 0x0A	; 10
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <main+0x31e>
     7da:	a8 c0       	rjmp	.+336    	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 1;
     7dc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 1;
     7e0:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     7e4:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     7e8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <home_temp_rx_fraction>
					PORTB &= ~(1<<MOSFET);
     7ec:	c0 98       	cbi	0x18, 0	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
     7ee:	94 9a       	sbi	0x12, 4	; 18
     7f0:	89 c0       	rjmp	.+274    	; 0x904 <main+0x446>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 100:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     7f2:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     7f6:	23 33       	cpi	r18, 0x33	; 51
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <main+0x33e>
     7fa:	98 c0       	rjmp	.+304    	; 0x92c <main+0x46e>
     7fc:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     800:	9a 30       	cpi	r25, 0x0A	; 10
     802:	08 f0       	brcs	.+2      	; 0x806 <main+0x348>
     804:	93 c0       	rjmp	.+294    	; 0x92c <main+0x46e>
     806:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     80a:	63 33       	cpi	r22, 0x33	; 51
     80c:	08 f0       	brcs	.+2      	; 0x810 <main+0x352>
     80e:	8e c0       	rjmp	.+284    	; 0x92c <main+0x46e>
     810:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     814:	8a 30       	cpi	r24, 0x0A	; 10
     816:	08 f0       	brcs	.+2      	; 0x81a <main+0x35c>
     818:	89 c0       	rjmp	.+274    	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 0;
     81a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 0;
     81e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     822:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     826:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <home_temp_rx_fraction>
     82a:	1c c0       	rjmp	.+56     	; 0x864 <main+0x3a6>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 101:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     82c:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     830:	33 33       	cpi	r19, 0x33	; 51
     832:	08 f0       	brcs	.+2      	; 0x836 <main+0x378>
     834:	7b c0       	rjmp	.+246    	; 0x92c <main+0x46e>
     836:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     83a:	2a 30       	cpi	r18, 0x0A	; 10
     83c:	08 f0       	brcs	.+2      	; 0x840 <main+0x382>
     83e:	76 c0       	rjmp	.+236    	; 0x92c <main+0x46e>
     840:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     844:	63 33       	cpi	r22, 0x33	; 51
     846:	08 f0       	brcs	.+2      	; 0x84a <main+0x38c>
     848:	71 c0       	rjmp	.+226    	; 0x92c <main+0x46e>
     84a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     84e:	8a 30       	cpi	r24, 0x0A	; 10
     850:	08 f0       	brcs	.+2      	; 0x854 <main+0x396>
     852:	6c c0       	rjmp	.+216    	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 1;
     854:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 0;
     858:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     85c:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     860:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     864:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     868:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_setpoint_fraction>
     86c:	43 c0       	rjmp	.+134    	; 0x8f4 <main+0x436>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 110:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     86e:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     872:	33 33       	cpi	r19, 0x33	; 51
     874:	08 f0       	brcs	.+2      	; 0x878 <main+0x3ba>
     876:	5a c0       	rjmp	.+180    	; 0x92c <main+0x46e>
     878:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     87c:	2a 30       	cpi	r18, 0x0A	; 10
     87e:	08 f0       	brcs	.+2      	; 0x882 <main+0x3c4>
     880:	55 c0       	rjmp	.+170    	; 0x92c <main+0x46e>
     882:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     886:	93 33       	cpi	r25, 0x33	; 51
     888:	08 f0       	brcs	.+2      	; 0x88c <main+0x3ce>
     88a:	50 c0       	rjmp	.+160    	; 0x92c <main+0x46e>
     88c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     890:	8a 30       	cpi	r24, 0x0A	; 10
     892:	08 f0       	brcs	.+2      	; 0x896 <main+0x3d8>
     894:	4b c0       	rjmp	.+150    	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 0;
     896:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 1;
     89a:	90 92 c3 00 	sts	0x00C3, r9	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     89e:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     8a2:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     8a6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     8aa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_setpoint_fraction>
					PORTB |= (1<<MOSFET);
     8ae:	c0 9a       	sbi	0x18, 0	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
     8b0:	94 98       	cbi	0x12, 4	; 18
     8b2:	1e c0       	rjmp	.+60     	; 0x8f0 <main+0x432>
					EEPROM_write(5, gas_boiler_enable_flag);
					EEPROM_write(6, work_mode);
				}
				break;
				case 111:
				if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     8b4:	30 91 d7 00 	lds	r19, 0x00D7	; 0x8000d7 <RX_BUF+0x3>
     8b8:	33 33       	cpi	r19, 0x33	; 51
     8ba:	c0 f5       	brcc	.+112    	; 0x92c <main+0x46e>
     8bc:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <RX_BUF+0x4>
     8c0:	2a 30       	cpi	r18, 0x0A	; 10
     8c2:	a0 f5       	brcc	.+104    	; 0x92c <main+0x46e>
     8c4:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     8c8:	93 33       	cpi	r25, 0x33	; 51
     8ca:	80 f5       	brcc	.+96     	; 0x92c <main+0x46e>
     8cc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     8d0:	8a 30       	cpi	r24, 0x0A	; 10
     8d2:	60 f5       	brcc	.+88     	; 0x92c <main+0x46e>
				{
					gas_boiler_enable_flag = 1;
     8d4:	90 92 c6 00 	sts	0x00C6, r9	; 0x8000c6 <gas_boiler_enable_flag>
					work_mode = 1;
     8d8:	90 92 c3 00 	sts	0x00C3, r9	; 0x8000c3 <work_mode>
					home_temp_rx_integer = RX_BUF[3];
     8dc:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <home_temp_rx_integer>
					home_temp_rx_fraction = RX_BUF[4];
     8e0:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <home_temp_rx_fraction>
					temp_setpoint_integer = RX_BUF[1];
     8e4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
     8e8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_setpoint_fraction>
					PORTB &= ~(1<<MOSFET);
     8ec:	c0 98       	cbi	0x18, 0	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
     8ee:	94 9a       	sbi	0x12, 4	; 18
					EEPROM_write(1, temp_setpoint_integer);
     8f0:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <temp_setpoint_integer>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	b3 dc       	rcall	.-1690   	; 0x260 <EEPROM_write>
					EEPROM_write(2, temp_setpoint_fraction);
     8fa:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <temp_setpoint_fraction>
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	ae dc       	rcall	.-1700   	; 0x260 <EEPROM_write>
					EEPROM_write(3, home_temp_rx_integer);
     904:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <home_temp_rx_integer>
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a9 dc       	rcall	.-1710   	; 0x260 <EEPROM_write>
					EEPROM_write(4, home_temp_rx_fraction);
     90e:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <home_temp_rx_fraction>
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a4 dc       	rcall	.-1720   	; 0x260 <EEPROM_write>
					EEPROM_write(5, gas_boiler_enable_flag);
     918:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9f dc       	rcall	.-1730   	; 0x260 <EEPROM_write>
					EEPROM_write(6, work_mode);
     922:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <work_mode>
     926:	86 e0       	ldi	r24, 0x06	; 6
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9a dc       	rcall	.-1740   	; 0x260 <EEPROM_write>
				}
				break;
			}
			rx_flag = 0;
     92c:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <rx_flag>
		}
		if (interrupt_1_flag == 1)
     930:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <interrupt_1_flag>
     934:	21 30       	cpi	r18, 0x01	; 1
     936:	09 f0       	breq	.+2      	; 0x93a <main+0x47c>
     938:	63 c0       	rjmp	.+198    	; 0xa00 <main+0x542>
		{
			if (OK_BUTTON_FLAG == 1) 
     93a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <OK_BUTTON_FLAG>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	09 f0       	breq	.+2      	; 0x944 <main+0x486>
     942:	4c c0       	rjmp	.+152    	; 0x9dc <main+0x51e>
			{
				OK_BUTTON_FLAG = 0;
     944:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <OK_BUTTON_FLAG>
				temp_setpoint_integer = temp_setpoint/10;
     948:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <temp_setpoint>
     94c:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <temp_setpoint+0x1>
     950:	b6 01       	movw	r22, r12
     952:	44 d4       	rcall	.+2184   	; 0x11dc <__udivmodhi4>
     954:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <temp_setpoint_integer>
				temp_setpoint_fraction = temp_setpoint%10;
     958:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temp_setpoint_fraction>
				EEPROM_write(1, temp_setpoint_integer);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	7f dc       	rcall	.-1794   	; 0x260 <EEPROM_write>
				EEPROM_write(2, temp_setpoint_fraction);
     962:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <temp_setpoint_fraction>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	7a dc       	rcall	.-1804   	; 0x260 <EEPROM_write>
				gas_boiler_controller();
     96c:	78 db       	rcall	.-2320   	; 0x5e <gas_boiler_controller>
				//отправляем в БД данные с новой инфо
				sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     96e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <work_mode>
     972:	1f 92       	push	r1
     974:	8f 93       	push	r24
     976:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_setpoint_fraction>
     97a:	1f 92       	push	r1
     97c:	8f 93       	push	r24
     97e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_setpoint_integer>
     982:	1f 92       	push	r1
     984:	8f 93       	push	r24
     986:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <home_temp_rx_fraction>
     98a:	1f 92       	push	r1
     98c:	8f 93       	push	r24
     98e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <home_temp_rx_integer>
     992:	1f 92       	push	r1
     994:	8f 93       	push	r24
     996:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
     99a:	1f 92       	push	r1
     99c:	8f 93       	push	r24
     99e:	1f 93       	push	r17
     9a0:	0f 93       	push	r16
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	6b d4       	rcall	.+2262   	; 0x127e <sprintf>
				USART_Transmit(DATA_TO_UART);
     9a8:	8e e8       	ldi	r24, 0x8E	; 142
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	00 d4       	rcall	.+2048   	; 0x11ae <USART_Transmit>
				memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     9ae:	fe 01       	movw	r30, r28
     9b0:	01 90       	ld	r0, Z+
     9b2:	00 20       	and	r0, r0
     9b4:	e9 f7       	brne	.-6      	; 0x9b0 <main+0x4f2>
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	af 01       	movw	r20, r30
     9ba:	4e 58       	subi	r20, 0x8E	; 142
     9bc:	50 40       	sbci	r21, 0x00	; 0
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	8e e8       	ldi	r24, 0x8E	; 142
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	3a d4       	rcall	.+2164   	; 0x123c <memset>
     9c8:	2d b7       	in	r18, 0x3d	; 61
     9ca:	3e b7       	in	r19, 0x3e	; 62
     9cc:	20 5f       	subi	r18, 0xF0	; 240
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	3e bf       	out	0x3e, r19	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	2d bf       	out	0x3d, r18	; 61
     9da:	10 c0       	rjmp	.+32     	; 0x9fc <main+0x53e>
			}
			else 
			{
				temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     9dc:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <temp_setpoint_integer>
     9e0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_setpoint_fraction>
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	4a e0       	ldi	r20, 0x0A	; 10
     9e8:	34 9f       	mul	r19, r20
     9ea:	80 0d       	add	r24, r0
     9ec:	91 1d       	adc	r25, r1
     9ee:	11 24       	eor	r1, r1
     9f0:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <temp_setpoint+0x1>
     9f4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <temp_setpoint>
				OK_BUTTON_FLAG = 1;
     9f8:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <OK_BUTTON_FLAG>
			}
			interrupt_1_flag = 0;
     9fc:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <interrupt_1_flag>
		}
		//если нет связи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     a00:	40 90 bf 00 	lds	r4, 0x00BF	; 0x8000bf <millis>
     a04:	50 90 c0 00 	lds	r5, 0x00C0	; 0x8000c0 <millis+0x1>
     a08:	60 90 c1 00 	lds	r6, 0x00C1	; 0x8000c1 <millis+0x2>
     a0c:	70 90 c2 00 	lds	r7, 0x00C2	; 0x8000c2 <millis+0x3>
     a10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <millis_hometemp_update>
     a14:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <millis_hometemp_update+0x1>
     a18:	d2 01       	movw	r26, r4
     a1a:	a8 1b       	sub	r26, r24
     a1c:	b9 0b       	sbc	r27, r25
     a1e:	cd 01       	movw	r24, r26
     a20:	b7 ff       	sbrs	r27, 7
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <main+0x56c>
     a24:	91 95       	neg	r25
     a26:	81 95       	neg	r24
     a28:	91 09       	sbc	r25, r1
     a2a:	89 39       	cpi	r24, 0x99	; 153
     a2c:	9a 43       	sbci	r25, 0x3A	; 58
     a2e:	fc f0       	brlt	.+62     	; 0xa6e <main+0x5b0>
		{
			work_mode = 0;
     a30:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     a34:	60 91 c5 00 	lds	r22, 0x00C5	; 0x8000c5 <home_temp_own_integer>
     a38:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <home_temp_rx_integer>
			home_temp_rx_fraction = home_temp_own_fraction;
     a3c:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <home_temp_own_fraction>
     a40:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     a44:	40 92 bb 00 	sts	0x00BB, r4	; 0x8000bb <millis_hometemp_update>
     a48:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <millis_hometemp_update+0x1>
     a4c:	60 92 bd 00 	sts	0x00BD, r6	; 0x8000bd <millis_hometemp_update+0x2>
     a50:	70 92 be 00 	sts	0x00BE, r7	; 0x8000be <millis_hometemp_update+0x3>
			EEPROM_write(3, home_temp_rx_integer);
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	03 dc       	rcall	.-2042   	; 0x260 <EEPROM_write>
			EEPROM_write(4, home_temp_rx_fraction);
     a5a:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <home_temp_rx_fraction>
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fe db       	rcall	.-2052   	; 0x260 <EEPROM_write>
			EEPROM_write(6, work_mode);
     a64:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <work_mode>
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	f9 db       	rcall	.-2062   	; 0x260 <EEPROM_write>
		}
		wdt_reset();
     a6e:	a8 95       	wdr
		//каждые 3сек отправляем данные и измеряем температуру и работает контроллер
		if (abs(millis - millis_send_nrf) > 3000)
     a70:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     a74:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     a78:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <millis_send_nrf>
     a7c:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <millis_send_nrf+0x1>
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	97 ff       	sbrs	r25, 7
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <main+0x5d0>
     a88:	91 95       	neg	r25
     a8a:	81 95       	neg	r24
     a8c:	91 09       	sbc	r25, r1
     a8e:	89 3b       	cpi	r24, 0xB9	; 185
     a90:	9b 40       	sbci	r25, 0x0B	; 11
     a92:	0c f4       	brge	.+2      	; 0xa96 <main+0x5d8>
     a94:	45 c0       	rjmp	.+138    	; 0xb20 <main+0x662>
		{
			buf1[0] = gas_boiler_enable_flag;
     a96:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
     a9a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <buf1>
			//если хотим поменять уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     a9e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <temp_setpoint_integer>
     aa2:	30 91 d5 00 	lds	r19, 0x00D5	; 0x8000d5 <RX_BUF+0x1>
     aa6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <temp_setpoint_fraction>
     aaa:	32 13       	cpse	r19, r18
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <main+0x5f8>
     aae:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <RX_BUF+0x2>
     ab2:	39 17       	cp	r19, r25
     ab4:	19 f0       	breq	.+6      	; 0xabc <main+0x5fe>
			{
				buf1[0] += 100;
     ab6:	8c 59       	subi	r24, 0x9C	; 156
     ab8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     abc:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <buf1+0x1>
			buf1[2] = temp_setpoint_fraction;
     ac0:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <buf1+0x2>
			buf1[3] = home_temp_rx_integer;
     ac4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <home_temp_rx_integer>
     ac8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <buf1+0x3>
			buf1[4] = home_temp_rx_fraction;
     acc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <home_temp_rx_fraction>
     ad0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <buf1+0x4>
			dt = NRF24L01_Send(buf1);
     ad4:	89 ec       	ldi	r24, 0xC9	; 201
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	1e d3       	rcall	.+1596   	; 0x1116 <NRF24L01_Send>
     ada:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     ade:	f5 01       	movw	r30, r10
     ae0:	01 90       	ld	r0, Z+
     ae2:	00 20       	and	r0, r0
     ae4:	e9 f7       	brne	.-6      	; 0xae0 <main+0x622>
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	af 01       	movw	r20, r30
     aea:	49 5c       	subi	r20, 0xC9	; 201
     aec:	50 40       	sbci	r21, 0x00	; 0
     aee:	44 0f       	add	r20, r20
     af0:	55 1f       	adc	r21, r21
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	89 ec       	ldi	r24, 0xC9	; 201
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 d3       	rcall	.+1856   	; 0x123c <memset>
			DS18b0_find_temp();
     afc:	87 db       	rcall	.-2290   	; 0x20c <DS18b0_find_temp>
			gas_boiler_controller();
     afe:	af da       	rcall	.-2722   	; 0x5e <gas_boiler_controller>
			millis_send_nrf = millis;
     b00:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     b04:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     b08:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <millis+0x2>
     b0c:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <millis+0x3>
     b10:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <millis_send_nrf>
     b14:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <millis_send_nrf+0x1>
     b18:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <millis_send_nrf+0x2>
     b1c:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <millis_send_nrf+0x3>
		}
		wdt_reset();
     b20:	a8 95       	wdr
		//вывод инфы на индикатор
		if ((abs(millis - millis_print) > 500) && (OK_BUTTON_FLAG != 1))
     b22:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     b26:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     b2a:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <millis_print>
     b2e:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <millis_print+0x1>
     b32:	82 1b       	sub	r24, r18
     b34:	93 0b       	sbc	r25, r19
     b36:	97 ff       	sbrs	r25, 7
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <main+0x682>
     b3a:	91 95       	neg	r25
     b3c:	81 95       	neg	r24
     b3e:	91 09       	sbc	r25, r1
     b40:	85 3f       	cpi	r24, 0xF5	; 245
     b42:	91 40       	sbci	r25, 0x01	; 1
     b44:	4c f1       	brlt	.+82     	; 0xb98 <main+0x6da>
     b46:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <OK_BUTTON_FLAG>
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	29 f1       	breq	.+74     	; 0xb98 <main+0x6da>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     b4e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_setpoint_integer>
     b52:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <home_temp_rx_integer>
     b56:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <temp_setpoint_fraction>
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a e0       	ldi	r20, 0x0A	; 10
     b5e:	84 9f       	mul	r24, r20
     b60:	60 0d       	add	r22, r0
     b62:	71 1d       	adc	r23, r1
     b64:	11 24       	eor	r1, r1
     b66:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <home_temp_rx_fraction>
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	aa e0       	ldi	r26, 0x0A	; 10
     b6e:	2a 9f       	mul	r18, r26
     b70:	80 0d       	add	r24, r0
     b72:	91 1d       	adc	r25, r1
     b74:	11 24       	eor	r1, r1
     b76:	20 d1       	rcall	.+576    	; 0xdb8 <PrintTemp_MAX7219>
			millis_print = millis;
     b78:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     b7c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     b80:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <millis+0x2>
     b84:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <millis+0x3>
     b88:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <millis_print>
     b8c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <millis_print+0x1>
     b90:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <millis_print+0x2>
     b94:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <millis_print+0x3>
		}
		wdt_reset();
     b98:	a8 95       	wdr
		//каждые 10 сек отправка актуальных данных в БД
		if (abs(millis - millis_send_db) > 10000)
     b9a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     b9e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     ba2:	20 91 b3 00 	lds	r18, 0x00B3	; 0x8000b3 <millis_send_db>
     ba6:	30 91 b4 00 	lds	r19, 0x00B4	; 0x8000b4 <millis_send_db+0x1>
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	97 ff       	sbrs	r25, 7
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <main+0x6fa>
     bb2:	91 95       	neg	r25
     bb4:	81 95       	neg	r24
     bb6:	91 09       	sbc	r25, r1
     bb8:	81 31       	cpi	r24, 0x11	; 17
     bba:	97 42       	sbci	r25, 0x27	; 39
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <main+0x702>
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <main+0x78c>
		{
			//отправляем в БД данные с новой инфо
			sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     bc0:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <work_mode>
     bc4:	1f 92       	push	r1
     bc6:	8f 93       	push	r24
     bc8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <temp_setpoint_fraction>
     bcc:	1f 92       	push	r1
     bce:	8f 93       	push	r24
     bd0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <temp_setpoint_integer>
     bd4:	1f 92       	push	r1
     bd6:	8f 93       	push	r24
     bd8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <home_temp_rx_fraction>
     bdc:	1f 92       	push	r1
     bde:	8f 93       	push	r24
     be0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <home_temp_rx_integer>
     be4:	1f 92       	push	r1
     be6:	8f 93       	push	r24
     be8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <gas_boiler_enable_flag>
     bec:	1f 92       	push	r1
     bee:	8f 93       	push	r24
     bf0:	1f 93       	push	r17
     bf2:	0f 93       	push	r16
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	42 d3       	rcall	.+1668   	; 0x127e <sprintf>
			USART_Transmit(DATA_TO_UART);
     bfa:	8e e8       	ldi	r24, 0x8E	; 142
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	d7 d2       	rcall	.+1454   	; 0x11ae <USART_Transmit>
			memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     c00:	fe 01       	movw	r30, r28
     c02:	01 90       	ld	r0, Z+
     c04:	00 20       	and	r0, r0
     c06:	e9 f7       	brne	.-6      	; 0xc02 <main+0x744>
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	af 01       	movw	r20, r30
     c0c:	4e 58       	subi	r20, 0x8E	; 142
     c0e:	50 40       	sbci	r21, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	8e e8       	ldi	r24, 0x8E	; 142
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	11 d3       	rcall	.+1570   	; 0x123c <memset>
			millis_send_db = millis;
     c1a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <millis>
     c1e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <millis+0x1>
     c22:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <millis+0x2>
     c26:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <millis+0x3>
     c2a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <millis_send_db>
     c2e:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <millis_send_db+0x1>
     c32:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <millis_send_db+0x2>
     c36:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <millis_send_db+0x3>
     c3a:	8d b7       	in	r24, 0x3d	; 61
     c3c:	9e b7       	in	r25, 0x3e	; 62
     c3e:	40 96       	adiw	r24, 0x10	; 16
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	9e bf       	out	0x3e, r25	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	8d bf       	out	0x3d, r24	; 61
		}
		//если пришли данные по uart
		if (uart_ready_flag == 1)
     c4a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <uart_ready_flag>
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	b1 f5       	brne	.+108    	; 0xcbe <main+0x800>
		{
			memcpy(rx_esp_data,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     c52:	f7 01       	movw	r30, r14
     c54:	01 90       	ld	r0, Z+
     c56:	00 20       	and	r0, r0
     c58:	e9 f7       	brne	.-6      	; 0xc54 <main+0x796>
     c5a:	af 01       	movw	r20, r30
     c5c:	4d 51       	subi	r20, 0x1D	; 29
     c5e:	51 40       	sbci	r21, 0x01	; 1
     c60:	6b e1       	ldi	r22, 0x1B	; 27
     c62:	71 e0       	ldi	r23, 0x01	; 1
     c64:	89 ee       	ldi	r24, 0xE9	; 233
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	e0 d2       	rcall	.+1472   	; 0x122a <memcpy>
			memset(uart_rx_buffer,0,strlen(uart_rx_buffer));
     c6a:	f7 01       	movw	r30, r14
     c6c:	01 90       	ld	r0, Z+
     c6e:	00 20       	and	r0, r0
     c70:	e9 f7       	brne	.-6      	; 0xc6c <main+0x7ae>
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	af 01       	movw	r20, r30
     c76:	4b 51       	subi	r20, 0x1B	; 27
     c78:	51 40       	sbci	r21, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	8b e1       	ldi	r24, 0x1B	; 27
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	dc d2       	rcall	.+1464   	; 0x123c <memset>
			uart_rx_count = 0;
     c84:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__data_end+0x1>
     c88:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
			//Получение данные о wifi по uart
			if (strstr(rx_esp_data,"WiFi-OK")!=0)
     c8c:	69 e7       	ldi	r22, 0x79	; 121
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	89 ee       	ldi	r24, 0xE9	; 233
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	da d2       	rcall	.+1460   	; 0x124a <strstr>
     c96:	89 2b       	or	r24, r25
     c98:	09 f0       	breq	.+2      	; 0xc9c <main+0x7de>
			{
				PORTC |= (1<<LED_WIFI);
     c9a:	a9 9a       	sbi	0x15, 1	; 21
			}
			if (strstr(rx_esp_data,"WiFi-ERROR")!=0)
     c9c:	61 e8       	ldi	r22, 0x81	; 129
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	89 ee       	ldi	r24, 0xE9	; 233
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	d2 d2       	rcall	.+1444   	; 0x124a <strstr>
     ca6:	89 2b       	or	r24, r25
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0x7ee>
			{
				PORTC &= ~(1<<LED_WIFI);
     caa:	a9 98       	cbi	0x15, 1	; 21
				{
					work_mode = work_mode_from_BD;
					EEPROM_write(6, work_mode);
				}*/
			}
			memset(rx_esp_data, 0, sizeof(rx_esp_data));
     cac:	e9 ee       	ldi	r30, 0xE9	; 233
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	df 01       	movw	r26, r30
     cb2:	28 2d       	mov	r18, r8
     cb4:	1d 92       	st	X+, r1
     cb6:	2a 95       	dec	r18
     cb8:	e9 f7       	brne	.-6      	; 0xcb4 <main+0x7f6>
			uart_ready_flag = 0;
     cba:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <uart_ready_flag>
		}
		wdt_reset();
     cbe:	a8 95       	wdr
    }
     cc0:	fb cc       	rjmp	.-1546   	; 0x6b8 <main+0x1fa>

00000cc2 <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
     cc2:	cf 93       	push	r28
     cc4:	c6 2f       	mov	r28, r22
     cc6:	a8 98       	cbi	0x15, 0	; 21
     cc8:	00 00       	nop
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	f3 db       	rcall	.-2074   	; 0x4b4 <spi_send_recv>
     cce:	8c 2f       	mov	r24, r28
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	f0 db       	rcall	.-2080   	; 0x4b4 <spi_send_recv>
     cd4:	a8 9a       	sbi	0x15, 0	; 21
     cd6:	00 00       	nop
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <MAX7219_clear>:
     cdc:	cf 93       	push	r28
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	8f e0       	ldi	r24, 0x0F	; 15
     ce2:	ef df       	rcall	.-34     	; 0xcc2 <Send_MAX7219>
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	ec df       	rcall	.-40     	; 0xcc2 <Send_MAX7219>
     cea:	67 e0       	ldi	r22, 0x07	; 7
     cec:	8b e0       	ldi	r24, 0x0B	; 11
     cee:	e9 df       	rcall	.-46     	; 0xcc2 <Send_MAX7219>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	e6 df       	rcall	.-52     	; 0xcc2 <Send_MAX7219>
     cf6:	c8 e0       	ldi	r28, 0x08	; 8
     cf8:	6f e0       	ldi	r22, 0x0F	; 15
     cfa:	8c 2f       	mov	r24, r28
     cfc:	e2 df       	rcall	.-60     	; 0xcc2 <Send_MAX7219>
     cfe:	c1 50       	subi	r28, 0x01	; 1
     d00:	d9 f7       	brne	.-10     	; 0xcf8 <MAX7219_clear+0x1c>
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <MAX7219_init>:
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	8f e0       	ldi	r24, 0x0F	; 15
     d0a:	db df       	rcall	.-74     	; 0xcc2 <Send_MAX7219>
     d0c:	8f e3       	ldi	r24, 0x3F	; 63
     d0e:	9c e9       	ldi	r25, 0x9C	; 156
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <MAX7219_init+0xa>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <MAX7219_init+0x10>
     d16:	00 00       	nop
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	8c e0       	ldi	r24, 0x0C	; 12
     d1c:	d2 df       	rcall	.-92     	; 0xcc2 <Send_MAX7219>
     d1e:	8f e3       	ldi	r24, 0x3F	; 63
     d20:	9c e9       	ldi	r25, 0x9C	; 156
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <MAX7219_init+0x1c>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <MAX7219_init+0x22>
     d28:	00 00       	nop
     d2a:	67 e0       	ldi	r22, 0x07	; 7
     d2c:	8b e0       	ldi	r24, 0x0B	; 11
     d2e:	c9 df       	rcall	.-110    	; 0xcc2 <Send_MAX7219>
     d30:	8f e3       	ldi	r24, 0x3F	; 63
     d32:	9c e9       	ldi	r25, 0x9C	; 156
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <MAX7219_init+0x2e>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <MAX7219_init+0x34>
     d3a:	00 00       	nop
     d3c:	6f ef       	ldi	r22, 0xFF	; 255
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	c0 df       	rcall	.-128    	; 0xcc2 <Send_MAX7219>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	9c e9       	ldi	r25, 0x9C	; 156
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <MAX7219_init+0x40>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <MAX7219_init+0x46>
     d4c:	00 00       	nop
     d4e:	64 e0       	ldi	r22, 0x04	; 4
     d50:	8a e0       	ldi	r24, 0x0A	; 10
     d52:	b7 df       	rcall	.-146    	; 0xcc2 <Send_MAX7219>
     d54:	8f e3       	ldi	r24, 0x3F	; 63
     d56:	9c e9       	ldi	r25, 0x9C	; 156
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <MAX7219_init+0x52>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <MAX7219_init+0x58>
     d5e:	00 00       	nop
     d60:	bd df       	rcall	.-134    	; 0xcdc <MAX7219_clear>
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	89 e0       	ldi	r24, 0x09	; 9
     d66:	ad df       	rcall	.-166    	; 0xcc2 <Send_MAX7219>
     d68:	8f e3       	ldi	r24, 0x3F	; 63
     d6a:	9c e9       	ldi	r25, 0x9C	; 156
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <MAX7219_init+0x66>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <MAX7219_init+0x6c>
     d72:	00 00       	nop
     d74:	6f ef       	ldi	r22, 0xFF	; 255
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	a4 df       	rcall	.-184    	; 0xcc2 <Send_MAX7219>
     d7a:	6f ef       	ldi	r22, 0xFF	; 255
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	a1 df       	rcall	.-190    	; 0xcc2 <Send_MAX7219>
     d80:	6f ef       	ldi	r22, 0xFF	; 255
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	9e df       	rcall	.-196    	; 0xcc2 <Send_MAX7219>
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	9b df       	rcall	.-202    	; 0xcc2 <Send_MAX7219>
     d8c:	6f ef       	ldi	r22, 0xFF	; 255
     d8e:	85 e0       	ldi	r24, 0x05	; 5
     d90:	98 df       	rcall	.-208    	; 0xcc2 <Send_MAX7219>
     d92:	6f ef       	ldi	r22, 0xFF	; 255
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	95 df       	rcall	.-214    	; 0xcc2 <Send_MAX7219>
     d98:	6f ef       	ldi	r22, 0xFF	; 255
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	92 df       	rcall	.-220    	; 0xcc2 <Send_MAX7219>
     d9e:	6f ef       	ldi	r22, 0xFF	; 255
     da0:	88 e0       	ldi	r24, 0x08	; 8
     da2:	8f df       	rcall	.-226    	; 0xcc2 <Send_MAX7219>
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	23 ed       	ldi	r18, 0xD3	; 211
     da8:	80 e3       	ldi	r24, 0x30	; 48
     daa:	91 50       	subi	r25, 0x01	; 1
     dac:	20 40       	sbci	r18, 0x00	; 0
     dae:	80 40       	sbci	r24, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <MAX7219_init+0xa4>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <MAX7219_init+0xae>
     db4:	00 00       	nop
     db6:	08 95       	ret

00000db8 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	8c 01       	movw	r16, r24
     dca:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     dcc:	08 3e       	cpi	r16, 0xE8	; 232
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	18 07       	cpc	r17, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <PrintTemp_MAX7219+0x1e>
     dd4:	5c c0       	rjmp	.+184    	; 0xe8e <PrintTemp_MAX7219+0xd6>
     dd6:	68 3e       	cpi	r22, 0xE8	; 232
     dd8:	73 40       	sbci	r23, 0x03	; 3
     dda:	0c f0       	brlt	.+2      	; 0xdde <PrintTemp_MAX7219+0x26>
     ddc:	58 c0       	rjmp	.+176    	; 0xe8e <PrintTemp_MAX7219+0xd6>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     dde:	7e df       	rcall	.-260    	; 0xcdc <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодирования для всех разрядов кроме позиций 2 и 6
     de0:	6e ee       	ldi	r22, 0xEE	; 238
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	6e df       	rcall	.-292    	; 0xcc2 <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв С
     de6:	6e e4       	ldi	r22, 0x4E	; 78
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	6b df       	rcall	.-298    	; 0xcc2 <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв С
     dec:	6e e4       	ldi	r22, 0x4E	; 78
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	68 df       	rcall	.-304    	; 0xcc2 <Send_MAX7219>
	if (current_temp == 0)
     df2:	01 15       	cp	r16, r1
     df4:	11 05       	cpc	r17, r1
     df6:	39 f4       	brne	.+14     	; 0xe06 <PrintTemp_MAX7219+0x4e>
	{
		Send_MAX7219(start_pos, 0);
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	62 df       	rcall	.-316    	; 0xcc2 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     dfe:	60 e8       	ldi	r22, 0x80	; 128
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	5f df       	rcall	.-322    	; 0xcc2 <Send_MAX7219>
     e04:	1d c0       	rjmp	.+58     	; 0xe40 <PrintTemp_MAX7219+0x88>
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	f9 2e       	mov	r15, r25
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	c2 2e       	mov	r12, r18
     e0e:	d1 2c       	mov	r13, r1
     e10:	c8 01       	movw	r24, r16
     e12:	b6 01       	movw	r22, r12
     e14:	f7 d1       	rcall	.+1006   	; 0x1204 <__divmodhi4>
     e16:	68 2f       	mov	r22, r24
     e18:	8f 2d       	mov	r24, r15
     e1a:	53 df       	rcall	.-346    	; 0xcc2 <Send_MAX7219>
     e1c:	2f 2d       	mov	r18, r15
			}
			start_pos++;
     e1e:	f3 94       	inc	r15
			current_temp /= 10;
     e20:	c8 01       	movw	r24, r16
     e22:	b6 01       	movw	r22, r12
     e24:	ef d1       	rcall	.+990    	; 0x1204 <__divmodhi4>
     e26:	8b 01       	movw	r16, r22
			asm("nop");
     e28:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     e2a:	67 2b       	or	r22, r23
     e2c:	49 f0       	breq	.+18     	; 0xe40 <PrintTemp_MAX7219+0x88>
		{
			if((start_pos == 3)||(start_pos == 7))
     e2e:	2b 7f       	andi	r18, 0xFB	; 251
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	71 f7       	brne	.-36     	; 0xe10 <PrintTemp_MAX7219+0x58>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     e34:	c8 01       	movw	r24, r16
     e36:	b6 01       	movw	r22, r12
     e38:	e5 d1       	rcall	.+970    	; 0x1204 <__divmodhi4>
     e3a:	68 2f       	mov	r22, r24
     e3c:	60 68       	ori	r22, 0x80	; 128
     e3e:	ec cf       	rjmp	.-40     	; 0xe18 <PrintTemp_MAX7219+0x60>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     e40:	20 97       	sbiw	r28, 0x00	; 0
     e42:	39 f4       	brne	.+14     	; 0xe52 <PrintTemp_MAX7219+0x9a>
	{
		Send_MAX7219(start_pos, 0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	3c df       	rcall	.-392    	; 0xcc2 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     e4a:	60 e8       	ldi	r22, 0x80	; 128
     e4c:	87 e0       	ldi	r24, 0x07	; 7
     e4e:	39 df       	rcall	.-398    	; 0xcc2 <Send_MAX7219>
     e50:	1c c0       	rjmp	.+56     	; 0xe8a <PrintTemp_MAX7219+0xd2>
     e52:	16 e0       	ldi	r17, 0x06	; 6
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	e8 2e       	mov	r14, r24
     e58:	f1 2c       	mov	r15, r1
     e5a:	ce 01       	movw	r24, r28
     e5c:	b7 01       	movw	r22, r14
     e5e:	d2 d1       	rcall	.+932    	; 0x1204 <__divmodhi4>
     e60:	68 2f       	mov	r22, r24
     e62:	81 2f       	mov	r24, r17
     e64:	2e df       	rcall	.-420    	; 0xcc2 <Send_MAX7219>
     e66:	21 2f       	mov	r18, r17
			}
			start_pos++;
     e68:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     e6a:	ce 01       	movw	r24, r28
     e6c:	b7 01       	movw	r22, r14
     e6e:	ca d1       	rcall	.+916    	; 0x1204 <__divmodhi4>
     e70:	eb 01       	movw	r28, r22
			asm("nop");
     e72:	00 00       	nop
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     e74:	20 97       	sbiw	r28, 0x00	; 0
     e76:	49 f0       	breq	.+18     	; 0xe8a <PrintTemp_MAX7219+0xd2>
		{
			if((start_pos == 3)||(start_pos == 7))
     e78:	2b 7f       	andi	r18, 0xFB	; 251
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	71 f7       	brne	.-36     	; 0xe5a <PrintTemp_MAX7219+0xa2>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     e7e:	ce 01       	movw	r24, r28
     e80:	b7 01       	movw	r22, r14
     e82:	c0 d1       	rcall	.+896    	; 0x1204 <__divmodhi4>
     e84:	68 2f       	mov	r22, r24
     e86:	60 68       	ori	r22, 0x80	; 128
     e88:	ec cf       	rjmp	.-40     	; 0xe62 <PrintTemp_MAX7219+0xaa>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <PrintTemp_MAX7219+0xd8>
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	08 95       	ret

00000ea2 <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	f6 2e       	mov	r15, r22
     eae:	d7 2f       	mov	r29, r23
     eb0:	c4 2f       	mov	r28, r20
     eb2:	c1 98       	cbi	0x18, 1	; 24
     eb4:	c2 98       	cbi	0x18, 2	; 24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	fd da       	rcall	.-2566   	; 0x4b4 <spi_send_recv>
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	8a 95       	dec	r24
     ebe:	f1 f7       	brne	.-4      	; 0xebc <NRF24_Transmit+0x1a>
     ec0:	00 00       	nop
     ec2:	0f 2d       	mov	r16, r15
     ec4:	1d 2f       	mov	r17, r29
     ec6:	cc 23       	and	r28, r28
     ec8:	39 f0       	breq	.+14     	; 0xed8 <NRF24_Transmit+0x36>
     eca:	f8 01       	movw	r30, r16
     ecc:	81 91       	ld	r24, Z+
     ece:	8f 01       	movw	r16, r30
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	f0 da       	rcall	.-2592   	; 0x4b4 <spi_send_recv>
     ed4:	c1 50       	subi	r28, 0x01	; 1
     ed6:	f7 cf       	rjmp	.-18     	; 0xec6 <NRF24_Transmit+0x24>
     ed8:	c2 9a       	sbi	0x18, 2	; 24
     eda:	c1 9a       	sbi	0x18, 1	; 24
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	08 95       	ret

00000ee8 <NRF24_FlushRX>:
     ee8:	c2 98       	cbi	0x18, 2	; 24
     eea:	82 ee       	ldi	r24, 0xE2	; 226
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	e2 da       	rcall	.-2620   	; 0x4b4 <spi_send_recv>
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	8a 95       	dec	r24
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <NRF24_FlushRX+0xa>
     ef6:	00 00       	nop
     ef8:	c2 9a       	sbi	0x18, 2	; 24
     efa:	08 95       	ret

00000efc <NRF24_FlushTX>:
     efc:	c2 98       	cbi	0x18, 2	; 24
     efe:	81 ee       	ldi	r24, 0xE1	; 225
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	d8 da       	rcall	.-2640   	; 0x4b4 <spi_send_recv>
     f04:	85 e0       	ldi	r24, 0x05	; 5
     f06:	8a 95       	dec	r24
     f08:	f1 f7       	brne	.-4      	; 0xf06 <NRF24_FlushTX+0xa>
     f0a:	00 00       	nop
     f0c:	c2 9a       	sbi	0x18, 2	; 24
     f0e:	08 95       	ret

00000f10 <NRF24_ToggleFeatures>:
     f10:	c2 98       	cbi	0x18, 2	; 24
     f12:	80 e5       	ldi	r24, 0x50	; 80
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	ce da       	rcall	.-2660   	; 0x4b4 <spi_send_recv>
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	8a 95       	dec	r24
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <NRF24_ToggleFeatures+0xa>
     f1e:	00 00       	nop
     f20:	83 e7       	ldi	r24, 0x73	; 115
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	c7 da       	rcall	.-2674   	; 0x4b4 <spi_send_recv>
     f26:	c2 9a       	sbi	0x18, 2	; 24
     f28:	08 95       	ret

00000f2a <NRF24_Read_Buf>:
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	f6 2e       	mov	r15, r22
     f36:	d7 2f       	mov	r29, r23
     f38:	c4 2f       	mov	r28, r20
     f3a:	c2 98       	cbi	0x18, 2	; 24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	ba da       	rcall	.-2700   	; 0x4b4 <spi_send_recv>
     f40:	0f 2d       	mov	r16, r15
     f42:	1d 2f       	mov	r17, r29
     f44:	cc 23       	and	r28, r28
     f46:	41 f0       	breq	.+16     	; 0xf58 <NRF24_Read_Buf+0x2e>
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	b3 da       	rcall	.-2714   	; 0x4b4 <spi_send_recv>
     f4e:	f8 01       	movw	r30, r16
     f50:	81 93       	st	Z+, r24
     f52:	8f 01       	movw	r16, r30
     f54:	c1 50       	subi	r28, 0x01	; 1
     f56:	f6 cf       	rjmp	.-20     	; 0xf44 <NRF24_Read_Buf+0x1a>
     f58:	c2 9a       	sbi	0x18, 2	; 24
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	08 95       	ret

00000f66 <NRF24_Write_Buf>:
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	f6 2e       	mov	r15, r22
     f72:	d7 2f       	mov	r29, r23
     f74:	c4 2f       	mov	r28, r20
     f76:	c2 98       	cbi	0x18, 2	; 24
     f78:	80 62       	ori	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9b da       	rcall	.-2762   	; 0x4b4 <spi_send_recv>
     f7e:	85 e0       	ldi	r24, 0x05	; 5
     f80:	8a 95       	dec	r24
     f82:	f1 f7       	brne	.-4      	; 0xf80 <NRF24_Write_Buf+0x1a>
     f84:	00 00       	nop
     f86:	0f 2d       	mov	r16, r15
     f88:	1d 2f       	mov	r17, r29
     f8a:	cc 23       	and	r28, r28
     f8c:	39 f0       	breq	.+14     	; 0xf9c <NRF24_Write_Buf+0x36>
     f8e:	f8 01       	movw	r30, r16
     f90:	81 91       	ld	r24, Z+
     f92:	8f 01       	movw	r16, r30
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	8e da       	rcall	.-2788   	; 0x4b4 <spi_send_recv>
     f98:	c1 50       	subi	r28, 0x01	; 1
     f9a:	f7 cf       	rjmp	.-18     	; 0xf8a <NRF24_Write_Buf+0x24>
     f9c:	c2 9a       	sbi	0x18, 2	; 24
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	08 95       	ret

00000faa <NRF24L01_TX_Mode>:
     faa:	43 e0       	ldi	r20, 0x03	; 3
     fac:	63 e6       	ldi	r22, 0x63	; 99
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e1       	ldi	r24, 0x10	; 16
     fb2:	d9 df       	rcall	.-78     	; 0xf66 <NRF24_Write_Buf>
     fb4:	43 e0       	ldi	r20, 0x03	; 3
     fb6:	63 e6       	ldi	r22, 0x63	; 99
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	8b e0       	ldi	r24, 0x0B	; 11
     fbc:	d4 df       	rcall	.-88     	; 0xf66 <NRF24_Write_Buf>
     fbe:	c1 98       	cbi	0x18, 1	; 24
     fc0:	93 df       	rcall	.-218    	; 0xee8 <NRF24_FlushRX>
     fc2:	9c cf       	rjmp	.-200    	; 0xefc <NRF24_FlushTX>

00000fc4 <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
     fc4:	cf 93       	push	r28
     fc6:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
	LOW_CSN;
     fc8:	c2 98       	cbi	0x18, 2	; 24
	spi_send_recv(reg);
     fca:	80 62       	ori	r24, 0x20	; 32
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	72 da       	rcall	.-2844   	; 0x4b4 <spi_send_recv>
	spi_send_recv(data_out);
     fd0:	8c 2f       	mov	r24, r28
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	6f da       	rcall	.-2850   	; 0x4b4 <spi_send_recv>
	HIGH_CSN;
     fd6:	c2 9a       	sbi	0x18, 2	; 24
}
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
     fdc:	cf 93       	push	r28
     fde:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
     fe0:	c2 98       	cbi	0x18, 2	; 24
	data_in = spi_send_recv(reg);
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	67 da       	rcall	.-2866   	; 0x4b4 <spi_send_recv>
	if(reg != STATUS)
     fe6:	c7 30       	cpi	r28, 0x07	; 7
     fe8:	19 f0       	breq	.+6      	; 0xff0 <nRF_read_register+0x14>
	{
		data_in = spi_send_recv(NOP);
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	62 da       	rcall	.-2876   	; 0x4b4 <spi_send_recv>
	}
	HIGH_CSN;
     ff0:	c2 9a       	sbi	0x18, 2	; 24
	return data_in;
}
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	cf 93       	push	r28
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
    101a:	87 e0       	ldi	r24, 0x07	; 7
    101c:	df df       	rcall	.-66     	; 0xfdc <nRF_read_register>
    101e:	c8 2f       	mov	r28, r24
	if(status & 0x40)
    1020:	86 ff       	sbrs	r24, 6
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <__vector_1+0x4c>
	{
		pipe = (status>>1)&0x07;
    1024:	86 95       	lsr	r24
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
    102c:	45 e0       	ldi	r20, 0x05	; 5
    102e:	64 ed       	ldi	r22, 0xD4	; 212
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	81 e6       	ldi	r24, 0x61	; 97
    1034:	7a df       	rcall	.-268    	; 0xf2a <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
    1036:	60 e4       	ldi	r22, 0x40	; 64
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	c4 df       	rcall	.-120    	; 0xfc4 <nRF_write_register>
		rx_flag = 1;	
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <rx_flag>
	}
	if(status&TX_DS) //tx_ds == 0x20
    1042:	c5 70       	andi	r28, 0x05	; 5
    1044:	19 f0       	breq	.+6      	; 0x104c <__vector_1+0x56>
	{
		nRF_write_register(STATUS, 0x20);
    1046:	60 e2       	ldi	r22, 0x20	; 32
    1048:	87 e0       	ldi	r24, 0x07	; 7
    104a:	bc df       	rcall	.-136    	; 0xfc4 <nRF_write_register>
	}
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	cf 91       	pop	r28
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	b4 df       	rcall	.-152    	; 0xfdc <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    1074:	68 2f       	mov	r22, r24
    1076:	63 60       	ori	r22, 0x03	; 3
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	a4 df       	rcall	.-184    	; 0xfc4 <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    107c:	43 e0       	ldi	r20, 0x03	; 3
    107e:	60 e6       	ldi	r22, 0x60	; 96
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	80 e1       	ldi	r24, 0x10	; 16
    1084:	70 df       	rcall	.-288    	; 0xf66 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    1086:	43 e0       	ldi	r20, 0x03	; 3
    1088:	60 e6       	ldi	r22, 0x60	; 96
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	8b e0       	ldi	r24, 0x0B	; 11
    108e:	6b df       	rcall	.-298    	; 0xf66 <NRF24_Write_Buf>
	HIGH_CE;
    1090:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1092:	87 e5       	ldi	r24, 0x57	; 87
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <NRF24L01_RX_Mode+0x26>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <NRF24L01_RX_Mode+0x2c>
    109c:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    109e:	24 df       	rcall	.-440    	; 0xee8 <NRF24_FlushRX>
	NRF24_FlushTX();
    10a0:	2d cf       	rjmp	.-422    	; 0xefc <NRF24_FlushTX>

000010a2 <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    10a2:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a4:	8f e1       	ldi	r24, 0x1F	; 31
    10a6:	9e e4       	ldi	r25, 0x4E	; 78
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <NRF24_ini+0x6>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <NRF24_ini+0xc>
    10ae:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    10b0:	6a e0       	ldi	r22, 0x0A	; 10
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	87 df       	rcall	.-242    	; 0xfc4 <nRF_write_register>
    10b6:	8f e1       	ldi	r24, 0x1F	; 31
    10b8:	9e e4       	ldi	r25, 0x4E	; 78
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <NRF24_ini+0x18>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <NRF24_ini+0x1e>
    10c0:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    10c2:	63 e0       	ldi	r22, 0x03	; 3
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	7e df       	rcall	.-260    	; 0xfc4 <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	7b df       	rcall	.-266    	; 0xfc4 <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	78 df       	rcall	.-272    	; 0xfc4 <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    10d4:	6f e6       	ldi	r22, 0x6F	; 111
    10d6:	84 e0       	ldi	r24, 0x04	; 4
    10d8:	75 df       	rcall	.-278    	; 0xfc4 <nRF_write_register>
	NRF24_ToggleFeatures();
    10da:	1a df       	rcall	.-460    	; 0xf10 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	8d e1       	ldi	r24, 0x1D	; 29
    10e0:	71 df       	rcall	.-286    	; 0xfc4 <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	8c e1       	ldi	r24, 0x1C	; 28
    10e6:	6e df       	rcall	.-292    	; 0xfc4 <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    10e8:	60 e7       	ldi	r22, 0x70	; 112
    10ea:	87 e0       	ldi	r24, 0x07	; 7
    10ec:	6b df       	rcall	.-298    	; 0xfc4 <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    10ee:	6c e4       	ldi	r22, 0x4C	; 76
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	68 df       	rcall	.-304    	; 0xfc4 <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    10f4:	66 e0       	ldi	r22, 0x06	; 6
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	65 df       	rcall	.-310    	; 0xfc4 <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    10fa:	43 e0       	ldi	r20, 0x03	; 3
    10fc:	60 e6       	ldi	r22, 0x60	; 96
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	80 e1       	ldi	r24, 0x10	; 16
    1102:	31 df       	rcall	.-414    	; 0xf66 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    1104:	43 e0       	ldi	r20, 0x03	; 3
    1106:	60 e6       	ldi	r22, 0x60	; 96
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	8b e0       	ldi	r24, 0x0B	; 11
    110c:	2c df       	rcall	.-424    	; 0xf66 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    110e:	65 e0       	ldi	r22, 0x05	; 5
    1110:	82 e1       	ldi	r24, 0x12	; 18
    1112:	58 df       	rcall	.-336    	; 0xfc4 <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
    1114:	ad cf       	rjmp	.-166    	; 0x1070 <NRF24L01_RX_Mode>

00001116 <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    111c:	46 df       	rcall	.-372    	; 0xfaa <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	5d df       	rcall	.-326    	; 0xfdc <nRF_read_register>
    1122:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
	nRF_write_register(CONFIG,regval);
    1124:	68 2f       	mov	r22, r24
    1126:	62 60       	ori	r22, 0x02	; 2
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	4c df       	rcall	.-360    	; 0xfc4 <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    112c:	87 e5       	ldi	r24, 0x57	; 87
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <NRF24L01_Send+0x1a>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <NRF24L01_Send+0x20>
    1136:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    1138:	45 e0       	ldi	r20, 0x05	; 5
    113a:	be 01       	movw	r22, r28
    113c:	80 ea       	ldi	r24, 0xA0	; 160
    113e:	b1 de       	rcall	.-670    	; 0xea2 <NRF24_Transmit>
	HIGH_CE;
    1140:	c1 9a       	sbi	0x18, 1	; 24
    1142:	90 e5       	ldi	r25, 0x50	; 80
    1144:	9a 95       	dec	r25
    1146:	f1 f7       	brne	.-4      	; 0x1144 <NRF24L01_Send+0x2e>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    1148:	c1 98       	cbi	0x18, 1	; 24
	while( (PIND&(1<<IRQ)) != 0);
    114a:	82 99       	sbic	0x10, 2	; 16
    114c:	fe cf       	rjmp	.-4      	; 0x114a <NRF24L01_Send+0x34>
	status = nRF_read_register(STATUS);
    114e:	87 e0       	ldi	r24, 0x07	; 7
    1150:	45 df       	rcall	.-374    	; 0xfdc <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    1152:	98 2f       	mov	r25, r24
    1154:	95 70       	andi	r25, 0x05	; 5
    1156:	79 f0       	breq	.+30     	; 0x1176 <NRF24L01_Send+0x60>
	{
		PORTD |= (1<<LED_TX);
    1158:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115a:	2f ef       	ldi	r18, 0xFF	; 255
    115c:	81 ee       	ldi	r24, 0xE1	; 225
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	21 50       	subi	r18, 0x01	; 1
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <NRF24L01_Send+0x4a>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <NRF24L01_Send+0x54>
    116a:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    116c:	96 98       	cbi	0x12, 6	; 18
		nRF_write_register(STATUS, 0x20);
    116e:	60 e2       	ldi	r22, 0x20	; 32
    1170:	87 e0       	ldi	r24, 0x07	; 7
    1172:	28 df       	rcall	.-432    	; 0xfc4 <nRF_write_register>
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <NRF24L01_Send+0x6c>
	}
	else if(status&MAX_RT)
    1176:	82 ff       	sbrs	r24, 2
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <NRF24L01_Send+0x6c>
	{
		nRF_write_register(STATUS, 0x10);
    117a:	60 e1       	ldi	r22, 0x10	; 16
    117c:	87 e0       	ldi	r24, 0x07	; 7
    117e:	22 df       	rcall	.-444    	; 0xfc4 <nRF_write_register>
		NRF24_FlushTX();
    1180:	bd de       	rcall	.-646    	; 0xefc <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    1182:	88 e0       	ldi	r24, 0x08	; 8
    1184:	2b df       	rcall	.-426    	; 0xfdc <nRF_read_register>
    1186:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
    1188:	73 df       	rcall	.-282    	; 0x1070 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    118a:	60 e7       	ldi	r22, 0x70	; 112
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	1a df       	rcall	.-460    	; 0xfc4 <nRF_write_register>
	return regval;
}
    1190:	8c 2f       	mov	r24, r28
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <USART_Init>:
#include "usart.h"


void USART_Init( unsigned int speed)//Инициализация модуля USART
{	
  UBRRH = (unsigned char)(speed>>8);
    1198:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    119a:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
    119c:	8a b1       	in	r24, 0x0a	; 10
    119e:	88 61       	ori	r24, 0x18	; 24
    11a0:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //Разрешаем прерывание при приеме
    11a2:	57 9a       	sbi	0x0a, 7	; 10
  UCSRA |= (1<<U2X); // Для 8 мгц, удвоение скорости
    11a4:	59 9a       	sbi	0x0b, 1	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
    11a6:	80 b5       	in	r24, 0x20	; 32
    11a8:	8e 68       	ori	r24, 0x8E	; 142
    11aa:	80 bd       	out	0x20, r24	; 32
    11ac:	08 95       	ret

000011ae <USART_Transmit>:
}
void USART_Transmit( char* data ) //Функция отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	24 2f       	mov	r18, r20
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	01 90       	ld	r0, Z+
    11b8:	00 20       	and	r0, r0
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <USART_Transmit+0x8>
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	e8 1b       	sub	r30, r24
    11c0:	f9 0b       	sbc	r31, r25
    11c2:	2e 17       	cp	r18, r30
    11c4:	3f 07       	cpc	r19, r31
    11c6:	48 f4       	brcc	.+18     	; 0x11da <USART_Transmit+0x2c>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//Ожидание опустошения буфера приема
    11c8:	5d 9b       	sbis	0x0b, 5	; 11
    11ca:	fe cf       	rjmp	.-4      	; 0x11c8 <USART_Transmit+0x1a>
	  UDR = data[i]; //Начало передачи данных
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	20 81       	ld	r18, Z
    11d4:	2c b9       	out	0x0c, r18	; 12
}
void USART_Transmit( char* data ) //Функция отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	eb cf       	rjmp	.-42     	; 0x11b0 <USART_Transmit+0x2>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//Ожидание опустошения буфера приема
	  UDR = data[i]; //Начало передачи данных
  }
}
    11da:	08 95       	ret

000011dc <__udivmodhi4>:
    11dc:	aa 1b       	sub	r26, r26
    11de:	bb 1b       	sub	r27, r27
    11e0:	51 e1       	ldi	r21, 0x11	; 17
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <__udivmodhi4_ep>

000011e4 <__udivmodhi4_loop>:
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	a6 17       	cp	r26, r22
    11ea:	b7 07       	cpc	r27, r23
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <__udivmodhi4_ep>
    11ee:	a6 1b       	sub	r26, r22
    11f0:	b7 0b       	sbc	r27, r23

000011f2 <__udivmodhi4_ep>:
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	5a 95       	dec	r21
    11f8:	a9 f7       	brne	.-22     	; 0x11e4 <__udivmodhi4_loop>
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	08 95       	ret

00001204 <__divmodhi4>:
    1204:	97 fb       	bst	r25, 7
    1206:	07 2e       	mov	r0, r23
    1208:	16 f4       	brtc	.+4      	; 0x120e <__divmodhi4+0xa>
    120a:	00 94       	com	r0
    120c:	06 d0       	rcall	.+12     	; 0x121a <__divmodhi4_neg1>
    120e:	77 fd       	sbrc	r23, 7
    1210:	08 d0       	rcall	.+16     	; 0x1222 <__divmodhi4_neg2>
    1212:	e4 df       	rcall	.-56     	; 0x11dc <__udivmodhi4>
    1214:	07 fc       	sbrc	r0, 7
    1216:	05 d0       	rcall	.+10     	; 0x1222 <__divmodhi4_neg2>
    1218:	3e f4       	brtc	.+14     	; 0x1228 <__divmodhi4_exit>

0000121a <__divmodhi4_neg1>:
    121a:	90 95       	com	r25
    121c:	81 95       	neg	r24
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__divmodhi4_neg2>:
    1222:	70 95       	com	r23
    1224:	61 95       	neg	r22
    1226:	7f 4f       	sbci	r23, 0xFF	; 255

00001228 <__divmodhi4_exit>:
    1228:	08 95       	ret

0000122a <memcpy>:
    122a:	fb 01       	movw	r30, r22
    122c:	dc 01       	movw	r26, r24
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <memcpy+0xa>
    1230:	01 90       	ld	r0, Z+
    1232:	0d 92       	st	X+, r0
    1234:	41 50       	subi	r20, 0x01	; 1
    1236:	50 40       	sbci	r21, 0x00	; 0
    1238:	d8 f7       	brcc	.-10     	; 0x1230 <memcpy+0x6>
    123a:	08 95       	ret

0000123c <memset>:
    123c:	dc 01       	movw	r26, r24
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <memset+0x6>
    1240:	6d 93       	st	X+, r22
    1242:	41 50       	subi	r20, 0x01	; 1
    1244:	50 40       	sbci	r21, 0x00	; 0
    1246:	e0 f7       	brcc	.-8      	; 0x1240 <memset+0x4>
    1248:	08 95       	ret

0000124a <strstr>:
    124a:	fb 01       	movw	r30, r22
    124c:	51 91       	ld	r21, Z+
    124e:	55 23       	and	r21, r21
    1250:	a9 f0       	breq	.+42     	; 0x127c <strstr+0x32>
    1252:	bf 01       	movw	r22, r30
    1254:	dc 01       	movw	r26, r24
    1256:	4d 91       	ld	r20, X+
    1258:	45 17       	cp	r20, r21
    125a:	41 11       	cpse	r20, r1
    125c:	e1 f7       	brne	.-8      	; 0x1256 <strstr+0xc>
    125e:	59 f4       	brne	.+22     	; 0x1276 <strstr+0x2c>
    1260:	cd 01       	movw	r24, r26
    1262:	01 90       	ld	r0, Z+
    1264:	00 20       	and	r0, r0
    1266:	49 f0       	breq	.+18     	; 0x127a <strstr+0x30>
    1268:	4d 91       	ld	r20, X+
    126a:	40 15       	cp	r20, r0
    126c:	41 11       	cpse	r20, r1
    126e:	c9 f3       	breq	.-14     	; 0x1262 <strstr+0x18>
    1270:	fb 01       	movw	r30, r22
    1272:	41 11       	cpse	r20, r1
    1274:	ef cf       	rjmp	.-34     	; 0x1254 <strstr+0xa>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	08 95       	ret

0000127e <sprintf>:
    127e:	ae e0       	ldi	r26, 0x0E	; 14
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e4 e4       	ldi	r30, 0x44	; 68
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	aa c2       	rjmp	.+1364   	; 0x17dc <__prologue_saves__+0x1c>
    1288:	0d 89       	ldd	r16, Y+21	; 0x15
    128a:	1e 89       	ldd	r17, Y+22	; 0x16
    128c:	86 e0       	ldi	r24, 0x06	; 6
    128e:	8c 83       	std	Y+4, r24	; 0x04
    1290:	1a 83       	std	Y+2, r17	; 0x02
    1292:	09 83       	std	Y+1, r16	; 0x01
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	9f e7       	ldi	r25, 0x7F	; 127
    1298:	9e 83       	std	Y+6, r25	; 0x06
    129a:	8d 83       	std	Y+5, r24	; 0x05
    129c:	ae 01       	movw	r20, r28
    129e:	47 5e       	subi	r20, 0xE7	; 231
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	6f 89       	ldd	r22, Y+23	; 0x17
    12a4:	78 8d       	ldd	r23, Y+24	; 0x18
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	08 d0       	rcall	.+16     	; 0x12bc <vfprintf>
    12ac:	ef 81       	ldd	r30, Y+7	; 0x07
    12ae:	f8 85       	ldd	r31, Y+8	; 0x08
    12b0:	e0 0f       	add	r30, r16
    12b2:	f1 1f       	adc	r31, r17
    12b4:	10 82       	st	Z, r1
    12b6:	2e 96       	adiw	r28, 0x0e	; 14
    12b8:	e4 e0       	ldi	r30, 0x04	; 4
    12ba:	ac c2       	rjmp	.+1368   	; 0x1814 <__epilogue_restores__+0x1c>

000012bc <vfprintf>:
    12bc:	ab e0       	ldi	r26, 0x0B	; 11
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e3 e6       	ldi	r30, 0x63	; 99
    12c2:	f9 e0       	ldi	r31, 0x09	; 9
    12c4:	7d c2       	rjmp	.+1274   	; 0x17c0 <__prologue_saves__>
    12c6:	6c 01       	movw	r12, r24
    12c8:	7b 01       	movw	r14, r22
    12ca:	8a 01       	movw	r16, r20
    12cc:	fc 01       	movw	r30, r24
    12ce:	17 82       	std	Z+7, r1	; 0x07
    12d0:	16 82       	std	Z+6, r1	; 0x06
    12d2:	83 81       	ldd	r24, Z+3	; 0x03
    12d4:	81 ff       	sbrs	r24, 1
    12d6:	bf c1       	rjmp	.+894    	; 0x1656 <vfprintf+0x39a>
    12d8:	ce 01       	movw	r24, r28
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	3c 01       	movw	r6, r24
    12de:	f6 01       	movw	r30, r12
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	f7 01       	movw	r30, r14
    12e4:	93 fd       	sbrc	r25, 3
    12e6:	85 91       	lpm	r24, Z+
    12e8:	93 ff       	sbrs	r25, 3
    12ea:	81 91       	ld	r24, Z+
    12ec:	7f 01       	movw	r14, r30
    12ee:	88 23       	and	r24, r24
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <vfprintf+0x38>
    12f2:	ad c1       	rjmp	.+858    	; 0x164e <vfprintf+0x392>
    12f4:	85 32       	cpi	r24, 0x25	; 37
    12f6:	39 f4       	brne	.+14     	; 0x1306 <vfprintf+0x4a>
    12f8:	93 fd       	sbrc	r25, 3
    12fa:	85 91       	lpm	r24, Z+
    12fc:	93 ff       	sbrs	r25, 3
    12fe:	81 91       	ld	r24, Z+
    1300:	7f 01       	movw	r14, r30
    1302:	85 32       	cpi	r24, 0x25	; 37
    1304:	21 f4       	brne	.+8      	; 0x130e <vfprintf+0x52>
    1306:	b6 01       	movw	r22, r12
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	c0 d1       	rcall	.+896    	; 0x168c <fputc>
    130c:	e8 cf       	rjmp	.-48     	; 0x12de <vfprintf+0x22>
    130e:	91 2c       	mov	r9, r1
    1310:	21 2c       	mov	r2, r1
    1312:	31 2c       	mov	r3, r1
    1314:	ff e1       	ldi	r31, 0x1F	; 31
    1316:	f3 15       	cp	r31, r3
    1318:	d8 f0       	brcs	.+54     	; 0x1350 <vfprintf+0x94>
    131a:	8b 32       	cpi	r24, 0x2B	; 43
    131c:	79 f0       	breq	.+30     	; 0x133c <vfprintf+0x80>
    131e:	38 f4       	brcc	.+14     	; 0x132e <vfprintf+0x72>
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	79 f0       	breq	.+30     	; 0x1342 <vfprintf+0x86>
    1324:	83 32       	cpi	r24, 0x23	; 35
    1326:	a1 f4       	brne	.+40     	; 0x1350 <vfprintf+0x94>
    1328:	23 2d       	mov	r18, r3
    132a:	20 61       	ori	r18, 0x10	; 16
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <vfprintf+0xac>
    132e:	8d 32       	cpi	r24, 0x2D	; 45
    1330:	61 f0       	breq	.+24     	; 0x134a <vfprintf+0x8e>
    1332:	80 33       	cpi	r24, 0x30	; 48
    1334:	69 f4       	brne	.+26     	; 0x1350 <vfprintf+0x94>
    1336:	23 2d       	mov	r18, r3
    1338:	21 60       	ori	r18, 0x01	; 1
    133a:	16 c0       	rjmp	.+44     	; 0x1368 <vfprintf+0xac>
    133c:	83 2d       	mov	r24, r3
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	38 2e       	mov	r3, r24
    1342:	e3 2d       	mov	r30, r3
    1344:	e4 60       	ori	r30, 0x04	; 4
    1346:	3e 2e       	mov	r3, r30
    1348:	2a c0       	rjmp	.+84     	; 0x139e <vfprintf+0xe2>
    134a:	f3 2d       	mov	r31, r3
    134c:	f8 60       	ori	r31, 0x08	; 8
    134e:	1d c0       	rjmp	.+58     	; 0x138a <vfprintf+0xce>
    1350:	37 fc       	sbrc	r3, 7
    1352:	2d c0       	rjmp	.+90     	; 0x13ae <vfprintf+0xf2>
    1354:	20 ed       	ldi	r18, 0xD0	; 208
    1356:	28 0f       	add	r18, r24
    1358:	2a 30       	cpi	r18, 0x0A	; 10
    135a:	40 f0       	brcs	.+16     	; 0x136c <vfprintf+0xb0>
    135c:	8e 32       	cpi	r24, 0x2E	; 46
    135e:	b9 f4       	brne	.+46     	; 0x138e <vfprintf+0xd2>
    1360:	36 fc       	sbrc	r3, 6
    1362:	75 c1       	rjmp	.+746    	; 0x164e <vfprintf+0x392>
    1364:	23 2d       	mov	r18, r3
    1366:	20 64       	ori	r18, 0x40	; 64
    1368:	32 2e       	mov	r3, r18
    136a:	19 c0       	rjmp	.+50     	; 0x139e <vfprintf+0xe2>
    136c:	36 fe       	sbrs	r3, 6
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0xc0>
    1370:	8a e0       	ldi	r24, 0x0A	; 10
    1372:	98 9e       	mul	r9, r24
    1374:	20 0d       	add	r18, r0
    1376:	11 24       	eor	r1, r1
    1378:	92 2e       	mov	r9, r18
    137a:	11 c0       	rjmp	.+34     	; 0x139e <vfprintf+0xe2>
    137c:	ea e0       	ldi	r30, 0x0A	; 10
    137e:	2e 9e       	mul	r2, r30
    1380:	20 0d       	add	r18, r0
    1382:	11 24       	eor	r1, r1
    1384:	22 2e       	mov	r2, r18
    1386:	f3 2d       	mov	r31, r3
    1388:	f0 62       	ori	r31, 0x20	; 32
    138a:	3f 2e       	mov	r3, r31
    138c:	08 c0       	rjmp	.+16     	; 0x139e <vfprintf+0xe2>
    138e:	8c 36       	cpi	r24, 0x6C	; 108
    1390:	21 f4       	brne	.+8      	; 0x139a <vfprintf+0xde>
    1392:	83 2d       	mov	r24, r3
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	38 2e       	mov	r3, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0xe2>
    139a:	88 36       	cpi	r24, 0x68	; 104
    139c:	41 f4       	brne	.+16     	; 0x13ae <vfprintf+0xf2>
    139e:	f7 01       	movw	r30, r14
    13a0:	93 fd       	sbrc	r25, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	93 ff       	sbrs	r25, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	7f 01       	movw	r14, r30
    13aa:	81 11       	cpse	r24, r1
    13ac:	b3 cf       	rjmp	.-154    	; 0x1314 <vfprintf+0x58>
    13ae:	98 2f       	mov	r25, r24
    13b0:	9f 7d       	andi	r25, 0xDF	; 223
    13b2:	95 54       	subi	r25, 0x45	; 69
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0x106>
    13b8:	0c 5f       	subi	r16, 0xFC	; 252
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	9f e3       	ldi	r25, 0x3F	; 63
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <vfprintf+0x120>
    13c2:	83 36       	cpi	r24, 0x63	; 99
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <vfprintf+0x116>
    13c6:	83 37       	cpi	r24, 0x73	; 115
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <vfprintf+0x12a>
    13ca:	83 35       	cpi	r24, 0x53	; 83
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x114>
    13ce:	55 c0       	rjmp	.+170    	; 0x147a <vfprintf+0x1be>
    13d0:	20 c0       	rjmp	.+64     	; 0x1412 <vfprintf+0x156>
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	88 24       	eor	r8, r8
    13de:	83 94       	inc	r8
    13e0:	91 2c       	mov	r9, r1
    13e2:	53 01       	movw	r10, r6
    13e4:	12 c0       	rjmp	.+36     	; 0x140a <vfprintf+0x14e>
    13e6:	28 01       	movw	r4, r16
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	4f 0e       	add	r4, r31
    13ec:	51 1c       	adc	r5, r1
    13ee:	f8 01       	movw	r30, r16
    13f0:	a0 80       	ld	r10, Z
    13f2:	b1 80       	ldd	r11, Z+1	; 0x01
    13f4:	36 fe       	sbrs	r3, 6
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x142>
    13f8:	69 2d       	mov	r22, r9
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x146>
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	7f ef       	ldi	r23, 0xFF	; 255
    1402:	c5 01       	movw	r24, r10
    1404:	38 d1       	rcall	.+624    	; 0x1676 <strnlen>
    1406:	4c 01       	movw	r8, r24
    1408:	82 01       	movw	r16, r4
    140a:	f3 2d       	mov	r31, r3
    140c:	ff 77       	andi	r31, 0x7F	; 127
    140e:	3f 2e       	mov	r3, r31
    1410:	15 c0       	rjmp	.+42     	; 0x143c <vfprintf+0x180>
    1412:	28 01       	movw	r4, r16
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	42 0e       	add	r4, r18
    1418:	51 1c       	adc	r5, r1
    141a:	f8 01       	movw	r30, r16
    141c:	a0 80       	ld	r10, Z
    141e:	b1 80       	ldd	r11, Z+1	; 0x01
    1420:	36 fe       	sbrs	r3, 6
    1422:	03 c0       	rjmp	.+6      	; 0x142a <vfprintf+0x16e>
    1424:	69 2d       	mov	r22, r9
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vfprintf+0x172>
    142a:	6f ef       	ldi	r22, 0xFF	; 255
    142c:	7f ef       	ldi	r23, 0xFF	; 255
    142e:	c5 01       	movw	r24, r10
    1430:	17 d1       	rcall	.+558    	; 0x1660 <strnlen_P>
    1432:	4c 01       	movw	r8, r24
    1434:	f3 2d       	mov	r31, r3
    1436:	f0 68       	ori	r31, 0x80	; 128
    1438:	3f 2e       	mov	r3, r31
    143a:	82 01       	movw	r16, r4
    143c:	33 fc       	sbrc	r3, 3
    143e:	19 c0       	rjmp	.+50     	; 0x1472 <vfprintf+0x1b6>
    1440:	82 2d       	mov	r24, r2
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	88 16       	cp	r8, r24
    1446:	99 06       	cpc	r9, r25
    1448:	a0 f4       	brcc	.+40     	; 0x1472 <vfprintf+0x1b6>
    144a:	b6 01       	movw	r22, r12
    144c:	80 e2       	ldi	r24, 0x20	; 32
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	1d d1       	rcall	.+570    	; 0x168c <fputc>
    1452:	2a 94       	dec	r2
    1454:	f5 cf       	rjmp	.-22     	; 0x1440 <vfprintf+0x184>
    1456:	f5 01       	movw	r30, r10
    1458:	37 fc       	sbrc	r3, 7
    145a:	85 91       	lpm	r24, Z+
    145c:	37 fe       	sbrs	r3, 7
    145e:	81 91       	ld	r24, Z+
    1460:	5f 01       	movw	r10, r30
    1462:	b6 01       	movw	r22, r12
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	12 d1       	rcall	.+548    	; 0x168c <fputc>
    1468:	21 10       	cpse	r2, r1
    146a:	2a 94       	dec	r2
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	82 1a       	sub	r8, r18
    1470:	91 08       	sbc	r9, r1
    1472:	81 14       	cp	r8, r1
    1474:	91 04       	cpc	r9, r1
    1476:	79 f7       	brne	.-34     	; 0x1456 <vfprintf+0x19a>
    1478:	e1 c0       	rjmp	.+450    	; 0x163c <vfprintf+0x380>
    147a:	84 36       	cpi	r24, 0x64	; 100
    147c:	11 f0       	breq	.+4      	; 0x1482 <vfprintf+0x1c6>
    147e:	89 36       	cpi	r24, 0x69	; 105
    1480:	39 f5       	brne	.+78     	; 0x14d0 <vfprintf+0x214>
    1482:	f8 01       	movw	r30, r16
    1484:	37 fe       	sbrs	r3, 7
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <vfprintf+0x1da>
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	0c 5f       	subi	r16, 0xFC	; 252
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	08 c0       	rjmp	.+16     	; 0x14a6 <vfprintf+0x1ea>
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	07 2e       	mov	r0, r23
    149c:	00 0c       	add	r0, r0
    149e:	88 0b       	sbc	r24, r24
    14a0:	99 0b       	sbc	r25, r25
    14a2:	0e 5f       	subi	r16, 0xFE	; 254
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	f3 2d       	mov	r31, r3
    14a8:	ff 76       	andi	r31, 0x6F	; 111
    14aa:	3f 2e       	mov	r3, r31
    14ac:	97 ff       	sbrs	r25, 7
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <vfprintf+0x206>
    14b0:	90 95       	com	r25
    14b2:	80 95       	com	r24
    14b4:	70 95       	com	r23
    14b6:	61 95       	neg	r22
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	f0 68       	ori	r31, 0x80	; 128
    14c0:	3f 2e       	mov	r3, r31
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	a3 01       	movw	r20, r6
    14c8:	1d d1       	rcall	.+570    	; 0x1704 <__ultoa_invert>
    14ca:	88 2e       	mov	r8, r24
    14cc:	86 18       	sub	r8, r6
    14ce:	44 c0       	rjmp	.+136    	; 0x1558 <vfprintf+0x29c>
    14d0:	85 37       	cpi	r24, 0x75	; 117
    14d2:	31 f4       	brne	.+12     	; 0x14e0 <vfprintf+0x224>
    14d4:	23 2d       	mov	r18, r3
    14d6:	2f 7e       	andi	r18, 0xEF	; 239
    14d8:	b2 2e       	mov	r11, r18
    14da:	2a e0       	ldi	r18, 0x0A	; 10
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	25 c0       	rjmp	.+74     	; 0x152a <vfprintf+0x26e>
    14e0:	93 2d       	mov	r25, r3
    14e2:	99 7f       	andi	r25, 0xF9	; 249
    14e4:	b9 2e       	mov	r11, r25
    14e6:	8f 36       	cpi	r24, 0x6F	; 111
    14e8:	c1 f0       	breq	.+48     	; 0x151a <vfprintf+0x25e>
    14ea:	18 f4       	brcc	.+6      	; 0x14f2 <vfprintf+0x236>
    14ec:	88 35       	cpi	r24, 0x58	; 88
    14ee:	79 f0       	breq	.+30     	; 0x150e <vfprintf+0x252>
    14f0:	ae c0       	rjmp	.+348    	; 0x164e <vfprintf+0x392>
    14f2:	80 37       	cpi	r24, 0x70	; 112
    14f4:	19 f0       	breq	.+6      	; 0x14fc <vfprintf+0x240>
    14f6:	88 37       	cpi	r24, 0x78	; 120
    14f8:	21 f0       	breq	.+8      	; 0x1502 <vfprintf+0x246>
    14fa:	a9 c0       	rjmp	.+338    	; 0x164e <vfprintf+0x392>
    14fc:	e9 2f       	mov	r30, r25
    14fe:	e0 61       	ori	r30, 0x10	; 16
    1500:	be 2e       	mov	r11, r30
    1502:	b4 fe       	sbrs	r11, 4
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <vfprintf+0x264>
    1506:	fb 2d       	mov	r31, r11
    1508:	f4 60       	ori	r31, 0x04	; 4
    150a:	bf 2e       	mov	r11, r31
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <vfprintf+0x264>
    150e:	34 fe       	sbrs	r3, 4
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <vfprintf+0x26a>
    1512:	29 2f       	mov	r18, r25
    1514:	26 60       	ori	r18, 0x06	; 6
    1516:	b2 2e       	mov	r11, r18
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0x26a>
    151a:	28 e0       	ldi	r18, 0x08	; 8
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	05 c0       	rjmp	.+10     	; 0x152a <vfprintf+0x26e>
    1520:	20 e1       	ldi	r18, 0x10	; 16
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vfprintf+0x26e>
    1526:	20 e1       	ldi	r18, 0x10	; 16
    1528:	32 e0       	ldi	r19, 0x02	; 2
    152a:	f8 01       	movw	r30, r16
    152c:	b7 fe       	sbrs	r11, 7
    152e:	07 c0       	rjmp	.+14     	; 0x153e <vfprintf+0x282>
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	0c 5f       	subi	r16, 0xFC	; 252
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	06 c0       	rjmp	.+12     	; 0x154a <vfprintf+0x28e>
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 5f       	subi	r16, 0xFE	; 254
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	a3 01       	movw	r20, r6
    154c:	db d0       	rcall	.+438    	; 0x1704 <__ultoa_invert>
    154e:	88 2e       	mov	r8, r24
    1550:	86 18       	sub	r8, r6
    1552:	fb 2d       	mov	r31, r11
    1554:	ff 77       	andi	r31, 0x7F	; 127
    1556:	3f 2e       	mov	r3, r31
    1558:	36 fe       	sbrs	r3, 6
    155a:	0d c0       	rjmp	.+26     	; 0x1576 <vfprintf+0x2ba>
    155c:	23 2d       	mov	r18, r3
    155e:	2e 7f       	andi	r18, 0xFE	; 254
    1560:	a2 2e       	mov	r10, r18
    1562:	89 14       	cp	r8, r9
    1564:	58 f4       	brcc	.+22     	; 0x157c <vfprintf+0x2c0>
    1566:	34 fe       	sbrs	r3, 4
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <vfprintf+0x2c4>
    156a:	32 fc       	sbrc	r3, 2
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <vfprintf+0x2c4>
    156e:	83 2d       	mov	r24, r3
    1570:	8e 7e       	andi	r24, 0xEE	; 238
    1572:	a8 2e       	mov	r10, r24
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <vfprintf+0x2c4>
    1576:	b8 2c       	mov	r11, r8
    1578:	a3 2c       	mov	r10, r3
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <vfprintf+0x2c6>
    157c:	b8 2c       	mov	r11, r8
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <vfprintf+0x2c6>
    1580:	b9 2c       	mov	r11, r9
    1582:	a4 fe       	sbrs	r10, 4
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <vfprintf+0x2e8>
    1586:	fe 01       	movw	r30, r28
    1588:	e8 0d       	add	r30, r8
    158a:	f1 1d       	adc	r31, r1
    158c:	80 81       	ld	r24, Z
    158e:	80 33       	cpi	r24, 0x30	; 48
    1590:	21 f4       	brne	.+8      	; 0x159a <vfprintf+0x2de>
    1592:	9a 2d       	mov	r25, r10
    1594:	99 7e       	andi	r25, 0xE9	; 233
    1596:	a9 2e       	mov	r10, r25
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <vfprintf+0x2f0>
    159a:	a2 fe       	sbrs	r10, 2
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <vfprintf+0x2ee>
    159e:	b3 94       	inc	r11
    15a0:	b3 94       	inc	r11
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <vfprintf+0x2f0>
    15a4:	8a 2d       	mov	r24, r10
    15a6:	86 78       	andi	r24, 0x86	; 134
    15a8:	09 f0       	breq	.+2      	; 0x15ac <vfprintf+0x2f0>
    15aa:	b3 94       	inc	r11
    15ac:	a3 fc       	sbrc	r10, 3
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <vfprintf+0x314>
    15b0:	a0 fe       	sbrs	r10, 0
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0x304>
    15b4:	b2 14       	cp	r11, r2
    15b6:	80 f4       	brcc	.+32     	; 0x15d8 <vfprintf+0x31c>
    15b8:	28 0c       	add	r2, r8
    15ba:	92 2c       	mov	r9, r2
    15bc:	9b 18       	sub	r9, r11
    15be:	0d c0       	rjmp	.+26     	; 0x15da <vfprintf+0x31e>
    15c0:	b2 14       	cp	r11, r2
    15c2:	58 f4       	brcc	.+22     	; 0x15da <vfprintf+0x31e>
    15c4:	b6 01       	movw	r22, r12
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	60 d0       	rcall	.+192    	; 0x168c <fputc>
    15cc:	b3 94       	inc	r11
    15ce:	f8 cf       	rjmp	.-16     	; 0x15c0 <vfprintf+0x304>
    15d0:	b2 14       	cp	r11, r2
    15d2:	18 f4       	brcc	.+6      	; 0x15da <vfprintf+0x31e>
    15d4:	2b 18       	sub	r2, r11
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x320>
    15d8:	98 2c       	mov	r9, r8
    15da:	21 2c       	mov	r2, r1
    15dc:	a4 fe       	sbrs	r10, 4
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <vfprintf+0x342>
    15e0:	b6 01       	movw	r22, r12
    15e2:	80 e3       	ldi	r24, 0x30	; 48
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	52 d0       	rcall	.+164    	; 0x168c <fputc>
    15e8:	a2 fe       	sbrs	r10, 2
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <vfprintf+0x35c>
    15ec:	a1 fc       	sbrc	r10, 1
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <vfprintf+0x33a>
    15f0:	88 e7       	ldi	r24, 0x78	; 120
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x33e>
    15f6:	88 e5       	ldi	r24, 0x58	; 88
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	b6 01       	movw	r22, r12
    15fc:	0c c0       	rjmp	.+24     	; 0x1616 <vfprintf+0x35a>
    15fe:	8a 2d       	mov	r24, r10
    1600:	86 78       	andi	r24, 0x86	; 134
    1602:	51 f0       	breq	.+20     	; 0x1618 <vfprintf+0x35c>
    1604:	a1 fe       	sbrs	r10, 1
    1606:	02 c0       	rjmp	.+4      	; 0x160c <vfprintf+0x350>
    1608:	8b e2       	ldi	r24, 0x2B	; 43
    160a:	01 c0       	rjmp	.+2      	; 0x160e <vfprintf+0x352>
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	a7 fc       	sbrc	r10, 7
    1610:	8d e2       	ldi	r24, 0x2D	; 45
    1612:	b6 01       	movw	r22, r12
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	3a d0       	rcall	.+116    	; 0x168c <fputc>
    1618:	89 14       	cp	r8, r9
    161a:	30 f4       	brcc	.+12     	; 0x1628 <vfprintf+0x36c>
    161c:	b6 01       	movw	r22, r12
    161e:	80 e3       	ldi	r24, 0x30	; 48
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	34 d0       	rcall	.+104    	; 0x168c <fputc>
    1624:	9a 94       	dec	r9
    1626:	f8 cf       	rjmp	.-16     	; 0x1618 <vfprintf+0x35c>
    1628:	8a 94       	dec	r8
    162a:	f3 01       	movw	r30, r6
    162c:	e8 0d       	add	r30, r8
    162e:	f1 1d       	adc	r31, r1
    1630:	80 81       	ld	r24, Z
    1632:	b6 01       	movw	r22, r12
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	2a d0       	rcall	.+84     	; 0x168c <fputc>
    1638:	81 10       	cpse	r8, r1
    163a:	f6 cf       	rjmp	.-20     	; 0x1628 <vfprintf+0x36c>
    163c:	22 20       	and	r2, r2
    163e:	09 f4       	brne	.+2      	; 0x1642 <vfprintf+0x386>
    1640:	4e ce       	rjmp	.-868    	; 0x12de <vfprintf+0x22>
    1642:	b6 01       	movw	r22, r12
    1644:	80 e2       	ldi	r24, 0x20	; 32
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	21 d0       	rcall	.+66     	; 0x168c <fputc>
    164a:	2a 94       	dec	r2
    164c:	f7 cf       	rjmp	.-18     	; 0x163c <vfprintf+0x380>
    164e:	f6 01       	movw	r30, r12
    1650:	86 81       	ldd	r24, Z+6	; 0x06
    1652:	97 81       	ldd	r25, Z+7	; 0x07
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0x39e>
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	2b 96       	adiw	r28, 0x0b	; 11
    165c:	e2 e1       	ldi	r30, 0x12	; 18
    165e:	cc c0       	rjmp	.+408    	; 0x17f8 <__epilogue_restores__>

00001660 <strnlen_P>:
    1660:	fc 01       	movw	r30, r24
    1662:	05 90       	lpm	r0, Z+
    1664:	61 50       	subi	r22, 0x01	; 1
    1666:	70 40       	sbci	r23, 0x00	; 0
    1668:	01 10       	cpse	r0, r1
    166a:	d8 f7       	brcc	.-10     	; 0x1662 <strnlen_P+0x2>
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	8e 0f       	add	r24, r30
    1672:	9f 1f       	adc	r25, r31
    1674:	08 95       	ret

00001676 <strnlen>:
    1676:	fc 01       	movw	r30, r24
    1678:	61 50       	subi	r22, 0x01	; 1
    167a:	70 40       	sbci	r23, 0x00	; 0
    167c:	01 90       	ld	r0, Z+
    167e:	01 10       	cpse	r0, r1
    1680:	d8 f7       	brcc	.-10     	; 0x1678 <strnlen+0x2>
    1682:	80 95       	com	r24
    1684:	90 95       	com	r25
    1686:	8e 0f       	add	r24, r30
    1688:	9f 1f       	adc	r25, r31
    168a:	08 95       	ret

0000168c <fputc>:
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	fb 01       	movw	r30, r22
    1696:	23 81       	ldd	r18, Z+3	; 0x03
    1698:	21 fd       	sbrc	r18, 1
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <fputc+0x16>
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	2c c0       	rjmp	.+88     	; 0x16fa <fputc+0x6e>
    16a2:	22 ff       	sbrs	r18, 2
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <fputc+0x46>
    16a6:	46 81       	ldd	r20, Z+6	; 0x06
    16a8:	57 81       	ldd	r21, Z+7	; 0x07
    16aa:	24 81       	ldd	r18, Z+4	; 0x04
    16ac:	35 81       	ldd	r19, Z+5	; 0x05
    16ae:	42 17       	cp	r20, r18
    16b0:	53 07       	cpc	r21, r19
    16b2:	44 f4       	brge	.+16     	; 0x16c4 <fputc+0x38>
    16b4:	a0 81       	ld	r26, Z
    16b6:	b1 81       	ldd	r27, Z+1	; 0x01
    16b8:	9d 01       	movw	r18, r26
    16ba:	2f 5f       	subi	r18, 0xFF	; 255
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	31 83       	std	Z+1, r19	; 0x01
    16c0:	20 83       	st	Z, r18
    16c2:	8c 93       	st	X, r24
    16c4:	26 81       	ldd	r18, Z+6	; 0x06
    16c6:	37 81       	ldd	r19, Z+7	; 0x07
    16c8:	2f 5f       	subi	r18, 0xFF	; 255
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	37 83       	std	Z+7, r19	; 0x07
    16ce:	26 83       	std	Z+6, r18	; 0x06
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <fputc+0x6e>
    16d2:	8b 01       	movw	r16, r22
    16d4:	ec 01       	movw	r28, r24
    16d6:	fb 01       	movw	r30, r22
    16d8:	00 84       	ldd	r0, Z+8	; 0x08
    16da:	f1 85       	ldd	r31, Z+9	; 0x09
    16dc:	e0 2d       	mov	r30, r0
    16de:	09 95       	icall
    16e0:	89 2b       	or	r24, r25
    16e2:	e1 f6       	brne	.-72     	; 0x169c <fputc+0x10>
    16e4:	d8 01       	movw	r26, r16
    16e6:	16 96       	adiw	r26, 0x06	; 6
    16e8:	8d 91       	ld	r24, X+
    16ea:	9c 91       	ld	r25, X
    16ec:	17 97       	sbiw	r26, 0x07	; 7
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	17 96       	adiw	r26, 0x07	; 7
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
    16f6:	16 97       	sbiw	r26, 0x06	; 6
    16f8:	ce 01       	movw	r24, r28
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <__ultoa_invert>:
    1704:	fa 01       	movw	r30, r20
    1706:	aa 27       	eor	r26, r26
    1708:	28 30       	cpi	r18, 0x08	; 8
    170a:	51 f1       	breq	.+84     	; 0x1760 <__ultoa_invert+0x5c>
    170c:	20 31       	cpi	r18, 0x10	; 16
    170e:	81 f1       	breq	.+96     	; 0x1770 <__ultoa_invert+0x6c>
    1710:	e8 94       	clt
    1712:	6f 93       	push	r22
    1714:	6e 7f       	andi	r22, 0xFE	; 254
    1716:	6e 5f       	subi	r22, 0xFE	; 254
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	8f 4f       	sbci	r24, 0xFF	; 255
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	af 4f       	sbci	r26, 0xFF	; 255
    1720:	b1 e0       	ldi	r27, 0x01	; 1
    1722:	3e d0       	rcall	.+124    	; 0x17a0 <__ultoa_invert+0x9c>
    1724:	b4 e0       	ldi	r27, 0x04	; 4
    1726:	3c d0       	rcall	.+120    	; 0x17a0 <__ultoa_invert+0x9c>
    1728:	67 0f       	add	r22, r23
    172a:	78 1f       	adc	r23, r24
    172c:	89 1f       	adc	r24, r25
    172e:	9a 1f       	adc	r25, r26
    1730:	a1 1d       	adc	r26, r1
    1732:	68 0f       	add	r22, r24
    1734:	79 1f       	adc	r23, r25
    1736:	8a 1f       	adc	r24, r26
    1738:	91 1d       	adc	r25, r1
    173a:	a1 1d       	adc	r26, r1
    173c:	6a 0f       	add	r22, r26
    173e:	71 1d       	adc	r23, r1
    1740:	81 1d       	adc	r24, r1
    1742:	91 1d       	adc	r25, r1
    1744:	a1 1d       	adc	r26, r1
    1746:	20 d0       	rcall	.+64     	; 0x1788 <__ultoa_invert+0x84>
    1748:	09 f4       	brne	.+2      	; 0x174c <__ultoa_invert+0x48>
    174a:	68 94       	set
    174c:	3f 91       	pop	r19
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	26 9f       	mul	r18, r22
    1752:	11 24       	eor	r1, r1
    1754:	30 19       	sub	r19, r0
    1756:	30 5d       	subi	r19, 0xD0	; 208
    1758:	31 93       	st	Z+, r19
    175a:	de f6       	brtc	.-74     	; 0x1712 <__ultoa_invert+0xe>
    175c:	cf 01       	movw	r24, r30
    175e:	08 95       	ret
    1760:	46 2f       	mov	r20, r22
    1762:	47 70       	andi	r20, 0x07	; 7
    1764:	40 5d       	subi	r20, 0xD0	; 208
    1766:	41 93       	st	Z+, r20
    1768:	b3 e0       	ldi	r27, 0x03	; 3
    176a:	0f d0       	rcall	.+30     	; 0x178a <__ultoa_invert+0x86>
    176c:	c9 f7       	brne	.-14     	; 0x1760 <__ultoa_invert+0x5c>
    176e:	f6 cf       	rjmp	.-20     	; 0x175c <__ultoa_invert+0x58>
    1770:	46 2f       	mov	r20, r22
    1772:	4f 70       	andi	r20, 0x0F	; 15
    1774:	40 5d       	subi	r20, 0xD0	; 208
    1776:	4a 33       	cpi	r20, 0x3A	; 58
    1778:	18 f0       	brcs	.+6      	; 0x1780 <__ultoa_invert+0x7c>
    177a:	49 5d       	subi	r20, 0xD9	; 217
    177c:	31 fd       	sbrc	r19, 1
    177e:	40 52       	subi	r20, 0x20	; 32
    1780:	41 93       	st	Z+, r20
    1782:	02 d0       	rcall	.+4      	; 0x1788 <__ultoa_invert+0x84>
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__ultoa_invert+0x6c>
    1786:	ea cf       	rjmp	.-44     	; 0x175c <__ultoa_invert+0x58>
    1788:	b4 e0       	ldi	r27, 0x04	; 4
    178a:	a6 95       	lsr	r26
    178c:	97 95       	ror	r25
    178e:	87 95       	ror	r24
    1790:	77 95       	ror	r23
    1792:	67 95       	ror	r22
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__ultoa_invert+0x86>
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 05       	cpc	r22, r1
    179c:	71 05       	cpc	r23, r1
    179e:	08 95       	ret
    17a0:	9b 01       	movw	r18, r22
    17a2:	ac 01       	movw	r20, r24
    17a4:	0a 2e       	mov	r0, r26
    17a6:	06 94       	lsr	r0
    17a8:	57 95       	ror	r21
    17aa:	47 95       	ror	r20
    17ac:	37 95       	ror	r19
    17ae:	27 95       	ror	r18
    17b0:	ba 95       	dec	r27
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0xa2>
    17b4:	62 0f       	add	r22, r18
    17b6:	73 1f       	adc	r23, r19
    17b8:	84 1f       	adc	r24, r20
    17ba:	95 1f       	adc	r25, r21
    17bc:	a0 1d       	adc	r26, r0
    17be:	08 95       	ret

000017c0 <__prologue_saves__>:
    17c0:	2f 92       	push	r2
    17c2:	3f 92       	push	r3
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	ca 1b       	sub	r28, r26
    17ea:	db 0b       	sbc	r29, r27
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	09 94       	ijmp

000017f8 <__epilogue_restores__>:
    17f8:	2a 88       	ldd	r2, Y+18	; 0x12
    17fa:	39 88       	ldd	r3, Y+17	; 0x11
    17fc:	48 88       	ldd	r4, Y+16	; 0x10
    17fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1800:	6e 84       	ldd	r6, Y+14	; 0x0e
    1802:	7d 84       	ldd	r7, Y+13	; 0x0d
    1804:	8c 84       	ldd	r8, Y+12	; 0x0c
    1806:	9b 84       	ldd	r9, Y+11	; 0x0b
    1808:	aa 84       	ldd	r10, Y+10	; 0x0a
    180a:	b9 84       	ldd	r11, Y+9	; 0x09
    180c:	c8 84       	ldd	r12, Y+8	; 0x08
    180e:	df 80       	ldd	r13, Y+7	; 0x07
    1810:	ee 80       	ldd	r14, Y+6	; 0x06
    1812:	fd 80       	ldd	r15, Y+5	; 0x05
    1814:	0c 81       	ldd	r16, Y+4	; 0x04
    1816:	1b 81       	ldd	r17, Y+3	; 0x03
    1818:	aa 81       	ldd	r26, Y+2	; 0x02
    181a:	b9 81       	ldd	r27, Y+1	; 0x01
    181c:	ce 0f       	add	r28, r30
    181e:	d1 1d       	adc	r29, r1
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	ed 01       	movw	r28, r26
    182c:	08 95       	ret

0000182e <_exit>:
    182e:	f8 94       	cli

00001830 <__stop_program>:
    1830:	ff cf       	rjmp	.-2      	; 0x1830 <__stop_program>
