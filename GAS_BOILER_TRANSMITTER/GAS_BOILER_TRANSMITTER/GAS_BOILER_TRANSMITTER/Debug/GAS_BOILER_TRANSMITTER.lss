
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000eb2  00000f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800068  00800068  00000f4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002468  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129b  00000000  00000000  0000427b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d5  00000000  00000000  000059a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160f  00000000  00000000  0000617d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000778c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	8f c5       	rjmp	.+2846   	; 0xb22 <__vector_1>
   4:	4d c2       	rjmp	.+1178   	; 0x4a0 <__vector_2>
   6:	5a c1       	rjmp	.+692    	; 0x2bc <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	07 c2       	rjmp	.+1038   	; 0x41c <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 eb       	ldi	r30, 0xB2	; 178
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 39       	cpi	r26, 0x91	; 145
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8e d2       	rcall	.+1308   	; 0x576 <main>
  5a:	29 c7       	rjmp	.+3666   	; 0xeae <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t gas_boiler_enable_flag;

void gas_boiler_controller(void)
{
	//контроллер работает только в авто режиме
	if ((gas_boiler_enable_flag / 10) == 0)
  5e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gas_boiler_enable_flag>
  62:	8a 30       	cpi	r24, 0x0A	; 10
  64:	e0 f5       	brcc	.+120    	; 0xde <gas_boiler_controller+0x80>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
  66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	9c 01       	movw	r18, r24
  6e:	22 0f       	add	r18, r18
  70:	33 1f       	adc	r19, r19
  72:	88 0f       	add	r24, r24
  74:	99 1f       	adc	r25, r25
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	88 0f       	add	r24, r24
  7c:	99 1f       	adc	r25, r25
  7e:	28 0f       	add	r18, r24
  80:	39 1f       	adc	r19, r25
  82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <home_temp_rx_fraction>
  86:	28 0f       	add	r18, r24
  88:	31 1d       	adc	r19, r1
  8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	ac 01       	movw	r20, r24
  92:	44 0f       	add	r20, r20
  94:	55 1f       	adc	r21, r21
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	84 0f       	add	r24, r20
  a4:	95 1f       	adc	r25, r21
  a6:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <temp_setpoint_fraction>
  aa:	84 0f       	add	r24, r20
  ac:	91 1d       	adc	r25, r1
  ae:	28 17       	cp	r18, r24
  b0:	39 07       	cpc	r19, r25
  b2:	54 f4       	brge	.+20     	; 0xc8 <gas_boiler_controller+0x6a>
		{
			gas_boiler_enable_flag = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 bb       	out	0x18, r24	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	08 95       	ret
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	44 f0       	brlt	.+16     	; 0xde <gas_boiler_controller+0x80>
		{
			gas_boiler_enable_flag = 0;
  ce:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	88 bb       	out	0x18, r24	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret

000000e0 <dt_testdevice>:
  return tt;
}
//функция определения датчика на шине
char dt_testdevice(void) //dt — digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
  e0:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывания
  e2:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
  e4:	81 b3       	in	r24, 0x11	; 17
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	e3 e9       	ldi	r30, 0x93	; 147
  ec:	f7 e0       	ldi	r31, 0x07	; 7
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <dt_testdevice+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <dt_testdevice+0x14>
  f4:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	e3 e0       	ldi	r30, 0x03	; 3
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <dt_testdevice+0x20>
 104:	00 c0       	rjmp	.+0      	; 0x106 <dt_testdevice+0x26>
 106:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
 108:	87 99       	sbic	0x10, 7	; 16
 10a:	02 c0       	rjmp	.+4      	; 0x110 <dt_testdevice+0x30>
  {
	  dt=1;//устройство есть
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <dt_testdevice+0x32>
  }
  else dt=0;//устройства нет
 110:	80 e0       	ldi	r24, 0x00	; 0
  SREG = stektemp;// вернем значение стека
 112:	9f bf       	out	0x3f, r25	; 63
 114:	ef e8       	ldi	r30, 0x8F	; 143
 116:	f6 e0       	ldi	r31, 0x06	; 6
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <dt_testdevice+0x38>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <dt_testdevice+0x3e>
 11e:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
 120:	08 95       	ret

00000122 <dt_readbit>:
	return c;
}
//функция чтения бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
 122:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
 124:	f8 94       	cli
  char bt; //переменная хранения бита
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
 126:	81 b3       	in	r24, 0x11	; 17
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	2a e0       	ldi	r18, 0x0A	; 10
 12e:	2a 95       	dec	r18
 130:	f1 f7       	brne	.-4      	; 0x12e <dt_readbit+0xc>
 132:	00 c0       	rjmp	.+0      	; 0x134 <dt_readbit+0x12>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 134:	81 b3       	in	r24, 0x11	; 17
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	81 bb       	out	0x11, r24	; 17
 13a:	85 e4       	ldi	r24, 0x45	; 69
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <dt_readbit+0x1a>
 140:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
 142:	80 b3       	in	r24, 0x10	; 16
 144:	88 1f       	adc	r24, r24
 146:	88 27       	eor	r24, r24
 148:	88 1f       	adc	r24, r24
 14a:	20 ef       	ldi	r18, 0xF0	; 240
 14c:	2a 95       	dec	r18
 14e:	f1 f7       	brne	.-4      	; 0x14c <dt_readbit+0x2a>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
 150:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
 152:	08 95       	ret

00000154 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
 158:	c0 e0       	ldi	r28, 0x00	; 0
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
 15a:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
 15c:	0a c0       	rjmp	.+20     	; 0x172 <dt_readbyte+0x1e>
	{
	  c|=dt_readbit()<<i; //читаем бит
 15e:	e1 df       	rcall	.-62     	; 0x122 <dt_readbit>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0c 2e       	mov	r0, r28
 164:	02 c0       	rjmp	.+4      	; 0x16a <dt_readbyte+0x16>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <dt_readbyte+0x12>
 16e:	d8 2b       	or	r29, r24
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	c8 30       	cpi	r28, 0x08	; 8
 174:	a0 f3       	brcs	.-24     	; 0x15e <dt_readbyte+0xa>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
 176:	8d 2f       	mov	r24, r29
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <dt_sendbit>:
	}
}
//функция записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
 17e:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
 180:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
 182:	91 b3       	in	r25, 0x11	; 17
 184:	90 68       	ori	r25, 0x80	; 128
 186:	91 bb       	out	0x11, r25	; 17
 188:	9a e0       	ldi	r25, 0x0A	; 10
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <dt_sendbit+0xc>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <dt_sendbit+0x1c>
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 194:	81 b3       	in	r24, 0x11	; 17
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	81 bb       	out	0x11, r24	; 17
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <dt_sendbit+0x20>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <dt_sendbit+0x26>
 1a4:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 1a6:	81 b3       	in	r24, 0x11	; 17
 1a8:	8f 77       	andi	r24, 0x7F	; 127
 1aa:	81 bb       	out	0x11, r24	; 17
	SREG = stektemp;// вернем значение стека
 1ac:	2f bf       	out	0x3f, r18	; 63
 1ae:	08 95       	ret

000001b0 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <dt_sendbyte+0x34>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0c 2e       	mov	r0, r28
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <dt_sendbyte+0x16>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <dt_sendbyte+0x12>
 1ca:	2d 2f       	mov	r18, r29
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	28 23       	and	r18, r24
 1d0:	39 23       	and	r19, r25
 1d2:	82 17       	cp	r24, r18
 1d4:	93 07       	cpc	r25, r19
 1d6:	19 f4       	brne	.+6      	; 0x1de <dt_sendbyte+0x2e>
		dt_sendbit(1);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	d1 df       	rcall	.-94     	; 0x17e <dt_sendbit>
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <dt_sendbyte+0x32>
		else //посылаем 0
		dt_sendbit(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	ce df       	rcall	.-100    	; 0x17e <dt_sendbit>
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 1e2:	cf 5f       	subi	r28, 0xFF	; 255
 1e4:	c8 30       	cpi	r28, 0x08	; 8
 1e6:	48 f3       	brcs	.-46     	; 0x1ba <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
 1ee:	cf 93       	push	r28
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
 1f0:	77 df       	rcall	.-274    	; 0xe0 <dt_testdevice>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	d1 f4       	brne	.+52     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 1f6:	8c ec       	ldi	r24, 0xCC	; 204
 1f8:	db df       	rcall	.-74     	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измеряем температуру
 1fa:	84 e4       	ldi	r24, 0x44	; 68
 1fc:	d9 df       	rcall	.-78     	; 0x1b0 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	8d e2       	ldi	r24, 0x2D	; 45
 202:	99 e0       	ldi	r25, 0x09	; 9
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 20e:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразования — 188 милисекунд
   dt_testdevice(); //снова используем те же манипуляции с шиной что и при проверке ее присутствия
 210:	67 df       	rcall	.-306    	; 0xe0 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 212:	8c ec       	ldi	r24, 0xCC	; 204
 214:	cd df       	rcall	.-102    	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 216:	8e eb       	ldi	r24, 0xBE	; 190
 218:	cb df       	rcall	.-106    	; 0x1b0 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
 21a:	9c df       	rcall	.-200    	; 0x154 <dt_readbyte>
 21c:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
 21e:	9a df       	rcall	.-204    	; 0x154 <dt_readbyte>
 220:	90 e0       	ldi	r25, 0x00	; 0
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
 222:	98 2f       	mov	r25, r24
 224:	88 27       	eor	r24, r24
 226:	8c 2b       	or	r24, r28
 228:	02 c0       	rjmp	.+4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
 232:	dd df       	rcall	.-70     	; 0x1ee <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
 234:	29 2f       	mov	r18, r25
 236:	25 95       	asr	r18
 238:	25 95       	asr	r18
 23a:	25 95       	asr	r18
	uint8_t temp_integer;//целая часть темп
	uint8_t temp_fraction;//дробная часть темп
	if (temp_sign == 0x00)
 23c:	c1 f4       	brne	.+48     	; 0x26e <DS18b0_find_temp+0x3c>
	{
		home_temp_own_fraction = tt & 0xF;
 23e:	28 2f       	mov	r18, r24
 240:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
 242:	32 2f       	mov	r19, r18
 244:	33 0f       	add	r19, r19
 246:	22 0f       	add	r18, r18
 248:	22 0f       	add	r18, r18
 24a:	22 0f       	add	r18, r18
 24c:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
 24e:	22 95       	swap	r18
 250:	2f 70       	andi	r18, 0x0F	; 15
 252:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <home_temp_own_fraction>
		home_temp_own_integer = (tt&0x07FF)>>4;
 256:	97 70       	andi	r25, 0x07	; 7
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	95 95       	asr	r25
 25e:	87 95       	ror	r24
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <home_temp_own_integer>
 26c:	08 95       	ret
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
 26e:	28 2f       	mov	r18, r24
 270:	20 95       	com	r18
 272:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// ”множаем на 10
 274:	32 2f       	mov	r19, r18
 276:	33 0f       	add	r19, r19
 278:	22 0f       	add	r18, r18
 27a:	22 0f       	add	r18, r18
 27c:	22 0f       	add	r18, r18
 27e:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
 280:	22 95       	swap	r18
 282:	2f 70       	andi	r18, 0x0F	; 15
 284:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	97 70       	andi	r25, 0x07	; 7
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	95 95       	asr	r25
 29c:	87 95       	ror	r24
 29e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <home_temp_own_integer>
 2a2:	08 95       	ret

000002a4 <timer2_ini>:
uint8_t DOWN_BUTTON_FLAG = 0;

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
 2a4:	85 b5       	in	r24, 0x25	; 37
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 2aa:	89 b7       	in	r24, 0x39	; 57
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число для сравнения 200
 2b0:	88 ec       	ldi	r24, 0xC8	; 200
 2b2:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
 2b4:	85 b5       	in	r24, 0x25	; 37
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	85 bd       	out	0x25, r24	; 37
 2ba:	08 95       	ret

000002bc <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
	if(OK_BUTTON_FLAG == 1)
 2da:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <OK_BUTTON_FLAG>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_3+0x28>
 2e2:	7f c0       	rjmp	.+254    	; 0x3e2 <__vector_3+0x126>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
 2e4:	9a 99       	sbic	0x13, 2	; 19
 2e6:	3b c0       	rjmp	.+118    	; 0x35e <__vector_3+0xa2>
 2e8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <UP_BUTTON_FLAG>
 2ec:	81 11       	cpse	r24, r1
 2ee:	37 c0       	rjmp	.+110    	; 0x35e <__vector_3+0xa2>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
 2f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	48 0f       	add	r20, r24
 30a:	59 1f       	adc	r21, r25
 30c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <temp_setpoint_fraction>
 310:	48 0f       	add	r20, r24
 312:	51 1d       	adc	r21, r1
			temp_setpoint += 5;
 314:	4b 5f       	subi	r20, 0xFB	; 251
 316:	5f 4f       	sbci	r21, 0xFF	; 255
 318:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <temp_setpoint+0x1>
 31c:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
 320:	9a 01       	movw	r18, r20
 322:	ad ec       	ldi	r26, 0xCD	; 205
 324:	bc ec       	ldi	r27, 0xCC	; 204
 326:	7a d5       	rcall	.+2804   	; 0xe1c <__umulhisi3>
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
 338:	9c 01       	movw	r18, r24
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	82 0f       	add	r24, r18
 34c:	93 1f       	adc	r25, r19
 34e:	48 1b       	sub	r20, r24
 350:	59 0b       	sbc	r21, r25
 352:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <temp_setpoint_fraction>
			UP_BUTTON_FLAG = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <UP_BUTTON_FLAG>
 35c:	3c c0       	rjmp	.+120    	; 0x3d6 <__vector_3+0x11a>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
 35e:	9b 99       	sbic	0x13, 3	; 19
 360:	3a c0       	rjmp	.+116    	; 0x3d6 <__vector_3+0x11a>
 362:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 366:	81 11       	cpse	r24, r1
 368:	36 c0       	rjmp	.+108    	; 0x3d6 <__vector_3+0x11a>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
 36a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	48 0f       	add	r20, r24
 384:	59 1f       	adc	r21, r25
 386:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <temp_setpoint_fraction>
 38a:	48 0f       	add	r20, r24
 38c:	51 1d       	adc	r21, r1
			temp_setpoint -= 5;
 38e:	45 50       	subi	r20, 0x05	; 5
 390:	51 09       	sbc	r21, r1
 392:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <temp_setpoint+0x1>
 396:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
 39a:	9a 01       	movw	r18, r20
 39c:	ad ec       	ldi	r26, 0xCD	; 205
 39e:	bc ec       	ldi	r27, 0xCC	; 204
 3a0:	3d d5       	rcall	.+2682   	; 0xe1c <__umulhisi3>
 3a2:	96 95       	lsr	r25
 3a4:	87 95       	ror	r24
 3a6:	96 95       	lsr	r25
 3a8:	87 95       	ror	r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
 3b2:	9c 01       	movw	r18, r24
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	82 0f       	add	r24, r18
 3c6:	93 1f       	adc	r25, r19
 3c8:	48 1b       	sub	r20, r24
 3ca:	59 0b       	sbc	r21, r25
 3cc:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <temp_setpoint_fraction>
			DOWN_BUTTON_FLAG = 1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
 3d6:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
 3d8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
 3dc:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
 3de:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
		}
	}
}
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 400:	8e b5       	in	r24, 0x2e	; 46
 402:	88 60       	ori	r24, 0x08	; 8
 404:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 406:	89 b7       	in	r24, 0x39	; 57
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число для сравнения 2000
 40c:	87 e0       	ldi	r24, 0x07	; 7
 40e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
 410:	80 ed       	ldi	r24, 0xD0	; 208
 412:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
 414:	8e b5       	in	r24, 0x2e	; 46
 416:	82 60       	ori	r24, 0x02	; 2
 418:	8e bd       	out	0x2e, r24	; 46
 41a:	08 95       	ret

0000041c <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
	millis++;
 43e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <millis>
 442:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <millis+0x1>
 446:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <millis+0x2>
 44a:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <millis+0x3>
 44e:	bc 01       	movw	r22, r24
 450:	cd 01       	movw	r24, r26
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <millis>
 45e:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <millis+0x1>
 462:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <millis+0x2>
 466:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <millis+0x3>
	{
		millis = 0;
		millis_hometemp_update = 0;
	}
	//каждые 10 сек работает контроллер
	if ((millis % 10000)==0)
 46a:	20 e1       	ldi	r18, 0x10	; 16
 46c:	37 e2       	ldi	r19, 0x27	; 39
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	b8 d4       	rcall	.+2416   	; 0xde4 <__divmodsi4>
 474:	67 2b       	or	r22, r23
 476:	68 2b       	or	r22, r24
 478:	69 2b       	or	r22, r25
 47a:	09 f4       	brne	.+2      	; 0x47e <__stack+0x1f>
	{
		gas_boiler_controller();
 47c:	f0 dd       	rcall	.-1056   	; 0x5e <gas_boiler_controller>
	}
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	8f 93       	push	r24
	if (OK_BUTTON_FLAG == 1) OK_BUTTON_FLAG = 0;
 4ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <OK_BUTTON_FLAG>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	19 f4       	brne	.+6      	; 0x4ba <__vector_2+0x1a>
 4b4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <OK_BUTTON_FLAG>
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__vector_2+0x20>
	else OK_BUTTON_FLAG = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <OK_BUTTON_FLAG>
}
 4c0:	8f 91       	pop	r24
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
 4cc:	87 b3       	in	r24, 0x17	; 23
 4ce:	8e 62       	ori	r24, 0x2E	; 46
 4d0:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
 4d2:	88 b3       	in	r24, 0x18	; 24
 4d4:	83 7d       	andi	r24, 0xD3	; 211
 4d6:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
 4d8:	88 b3       	in	r24, 0x18	; 24
 4da:	84 60       	ori	r24, 0x04	; 4
 4dc:	88 bb       	out	0x18, r24	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ¤вим ведущим
 4de:	8d b1       	in	r24, 0x0d	; 13
 4e0:	80 65       	ori	r24, 0x50	; 80
 4e2:	8d b9       	out	0x0d, r24	; 13
}
 4e4:	08 95       	ret

000004e6 <port_init>:
port_init(void)
{
	//инициализация ножки IRQ для внеш прерывания
	DDRD &= ~(1<<IRQ);
 4e6:	81 b3       	in	r24, 0x11	; 17
 4e8:	8b 7f       	andi	r24, 0xFB	; 251
 4ea:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<IRQ);
 4ec:	82 b3       	in	r24, 0x12	; 18
 4ee:	84 60       	ori	r24, 0x04	; 4
 4f0:	82 bb       	out	0x12, r24	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	80 64       	ori	r24, 0x40	; 64
 4f6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_TX);
 4f8:	82 b3       	in	r24, 0x12	; 18
 4fa:	8f 7b       	andi	r24, 0xBF	; 191
 4fc:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
 4fe:	81 b3       	in	r24, 0x11	; 17
 500:	80 62       	ori	r24, 0x20	; 32
 502:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_RX);
 504:	82 b3       	in	r24, 0x12	; 18
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
 50a:	81 b3       	in	r24, 0x11	; 17
 50c:	80 61       	ori	r24, 0x10	; 16
 50e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
 510:	82 b3       	in	r24, 0x12	; 18
 512:	8f 7e       	andi	r24, 0xEF	; 239
 514:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
 516:	84 b3       	in	r24, 0x14	; 20
 518:	82 60       	ori	r24, 0x02	; 2
 51a:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<LED_WIFI);
 51c:	85 b3       	in	r24, 0x15	; 21
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	85 bb       	out	0x15, r24	; 21
	//инициализация мосфета
	DDRB |= (1<<MOSFET);
 522:	87 b3       	in	r24, 0x17	; 23
 524:	81 60       	ori	r24, 0x01	; 1
 526:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<MOSFET);
 528:	88 b3       	in	r24, 0x18	; 24
 52a:	8e 7f       	andi	r24, 0xFE	; 254
 52c:	88 bb       	out	0x18, r24	; 24
	//инициализация индикатора
	DDRC |= (1<<MAX7219_SS);
 52e:	84 b3       	in	r24, 0x14	; 20
 530:	81 60       	ori	r24, 0x01	; 1
 532:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<MAX7219_SS);
 534:	85 b3       	in	r24, 0x15	; 21
 536:	81 60       	ori	r24, 0x01	; 1
 538:	85 bb       	out	0x15, r24	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
 53a:	81 b3       	in	r24, 0x11	; 17
 53c:	87 7f       	andi	r24, 0xF7	; 247
 53e:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<BUTTON_OK);
 540:	82 b3       	in	r24, 0x12	; 18
 542:	88 60       	ori	r24, 0x08	; 8
 544:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~(1<<BUTTON_UP);
 546:	84 b3       	in	r24, 0x14	; 20
 548:	8b 7f       	andi	r24, 0xFB	; 251
 54a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_UP);
 54c:	85 b3       	in	r24, 0x15	; 21
 54e:	84 60       	ori	r24, 0x04	; 4
 550:	85 bb       	out	0x15, r24	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
 552:	84 b3       	in	r24, 0x14	; 20
 554:	87 7f       	andi	r24, 0xF7	; 247
 556:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_DOWN);
 558:	85 b3       	in	r24, 0x15	; 21
 55a:	88 60       	ori	r24, 0x08	; 8
 55c:	85 bb       	out	0x15, r24	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
 55e:	81 b3       	in	r24, 0x11	; 17
 560:	8f 77       	andi	r24, 0x7F	; 127
 562:	81 bb       	out	0x11, r24	; 17
	PORTTEMP &= ~(1<<BITTEMP);
 564:	82 b3       	in	r24, 0x12	; 18
 566:	8f 77       	andi	r24, 0x7F	; 127
 568:	82 bb       	out	0x12, r24	; 18
}
 56a:	08 95       	ret

0000056c <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
 56c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
 56e:	77 9b       	sbis	0x0e, 7	; 14
 570:	fe cf       	rjmp	.-4      	; 0x56e <spi_send_recv+0x2>
	return SPDR;
 572:	8f b1       	in	r24, 0x0f	; 15
}
 574:	08 95       	ret

00000576 <main>:
 576:	2f ef       	ldi	r18, 0xFF	; 255
 578:	43 ed       	ldi	r20, 0xD3	; 211
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	40 40       	sbci	r20, 0x00	; 0
 580:	80 40       	sbci	r24, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x6>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x10>
 586:	00 00       	nop
int main(void)
{
	_delay_ms(1000);
	int k = 0;
	uint8_t data[5] = {0};
	port_init();
 588:	ae df       	rcall	.-164    	; 0x4e6 <port_init>
	PORTD |= (1<<LED_TX);
 58a:	82 b3       	in	r24, 0x12	; 18
 58c:	80 64       	ori	r24, 0x40	; 64
 58e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_RX);
 590:	82 b3       	in	r24, 0x12	; 18
 592:	80 62       	ori	r24, 0x20	; 32
 594:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
 596:	82 b3       	in	r24, 0x12	; 18
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<LED_WIFI);
 59c:	85 b3       	in	r24, 0x15	; 21
 59e:	82 60       	ori	r24, 0x02	; 2
 5a0:	85 bb       	out	0x15, r24	; 21
	SPI_init();
 5a2:	94 df       	rcall	.-216    	; 0x4cc <SPI_init>
    NRF24_ini();
 5a4:	86 d3       	rcall	.+1804   	; 0xcb2 <NRF24_ini>
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	21 ee       	ldi	r18, 0xE1	; 225
 5aa:	44 e0       	ldi	r20, 0x04	; 4
 5ac:	91 50       	subi	r25, 0x01	; 1
 5ae:	20 40       	sbci	r18, 0x00	; 0
 5b0:	40 40       	sbci	r20, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x36>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x40>
 5b6:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
 5b8:	fe d0       	rcall	.+508    	; 0x7b6 <MAX7219_init>
 5ba:	8f ef       	ldi	r24, 0xFF	; 255
 5bc:	93 ed       	ldi	r25, 0xD3	; 211
 5be:	20 e3       	ldi	r18, 0x30	; 48
 5c0:	81 50       	subi	r24, 0x01	; 1
 5c2:	90 40       	sbci	r25, 0x00	; 0
 5c4:	20 40       	sbci	r18, 0x00	; 0
 5c6:	e1 f7       	brne	.-8      	; 0x5c0 <main+0x4a>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x54>
 5ca:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывания
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
 5cc:	85 b7       	in	r24, 0x35	; 53
 5ce:	8a 60       	ori	r24, 0x0A	; 10
 5d0:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
 5d2:	8b b7       	in	r24, 0x3b	; 59
 5d4:	80 6c       	ori	r24, 0xC0	; 192
 5d6:	8b bf       	out	0x3b, r24	; 59
 5d8:	4f ef       	ldi	r20, 0xFF	; 255
 5da:	83 ed       	ldi	r24, 0xD3	; 211
 5dc:	90 e3       	ldi	r25, 0x30	; 48
 5de:	41 50       	subi	r20, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0x68>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0x72>
 5e8:	00 00       	nop
	//----------------------
	_delay_ms(1000);
	PORTD &= ~(1<<LED_TX);
 5ea:	82 b3       	in	r24, 0x12	; 18
 5ec:	8f 7b       	andi	r24, 0xBF	; 191
 5ee:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_RX);
 5f0:	82 b3       	in	r24, 0x12	; 18
 5f2:	8f 7d       	andi	r24, 0xDF	; 223
 5f4:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
 5f6:	82 b3       	in	r24, 0x12	; 18
 5f8:	8f 7e       	andi	r24, 0xEF	; 239
 5fa:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<LED_WIFI);
 5fc:	85 b3       	in	r24, 0x15	; 21
 5fe:	8d 7f       	andi	r24, 0xFD	; 253
 600:	85 bb       	out	0x15, r24	; 21
	//настрока WDT
	WDTCR &= ~(1<<WDE);
 602:	81 b5       	in	r24, 0x21	; 33
 604:	87 7f       	andi	r24, 0xF7	; 247
 606:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 608:	9f e0       	ldi	r25, 0x0F	; 15
 60a:	88 e1       	ldi	r24, 0x18	; 24
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	a8 95       	wdr
 612:	81 bd       	out	0x21, r24	; 33
 614:	0f be       	out	0x3f, r0	; 63
 616:	91 bd       	out	0x21, r25	; 33
	//включаем Watchdog на 2 с
	wdt_enable(WDTO_2S);
	ACSR |= (1<<ACD);//откл компаратор
 618:	88 b1       	in	r24, 0x08	; 8
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	88 b9       	out	0x08, r24	; 8
	timer1_ini();
 61e:	f0 de       	rcall	.-544    	; 0x400 <timer1_ini>
	timer2_ini();
 620:	41 de       	rcall	.-894    	; 0x2a4 <timer2_ini>
	sei();
 622:	78 94       	sei
	wdt_reset();
 624:	a8 95       	wdr
    while (1) 
    {
		
		//если нет связи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
 626:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <millis>
 62a:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <millis+0x1>
 62e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <millis+0x2>
 632:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <millis+0x3>
 636:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <millis_hometemp_update>
 63a:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <millis_hometemp_update+0x1>
 63e:	ab 01       	movw	r20, r22
 640:	42 1b       	sub	r20, r18
 642:	53 0b       	sbc	r21, r19
 644:	9a 01       	movw	r18, r20
 646:	22 f4       	brpl	.+8      	; 0x650 <main+0xda>
 648:	22 27       	eor	r18, r18
 64a:	33 27       	eor	r19, r19
 64c:	24 1b       	sub	r18, r20
 64e:	35 0b       	sbc	r19, r21
 650:	29 39       	cpi	r18, 0x99	; 153
 652:	3a 43       	sbci	r19, 0x3A	; 58
 654:	bc f0       	brlt	.+46     	; 0x684 <main+0x10e>
		{
			if ((gas_boiler_enable_flag / 10) == 1)
 656:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <gas_boiler_enable_flag>
 65a:	2a 50       	subi	r18, 0x0A	; 10
 65c:	2a 30       	cpi	r18, 0x0A	; 10
 65e:	10 f4       	brcc	.+4      	; 0x664 <main+0xee>
			{
				gas_boiler_enable_flag -= 10;
 660:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <gas_boiler_enable_flag>
			}
			home_temp_rx_integer = home_temp_own_integer;
 664:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <home_temp_own_integer>
 668:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			home_temp_rx_fraction = home_temp_own_fraction;
 66c:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <home_temp_own_fraction>
 670:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
 674:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <millis_hometemp_update>
 678:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <millis_hometemp_update+0x1>
 67c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <millis_hometemp_update+0x2>
 680:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <millis_hometemp_update+0x3>
		}
		//каждые 3сек отправляем данные и измеряем температуру
		if ((millis%3000) == 0)
 684:	28 eb       	ldi	r18, 0xB8	; 184
 686:	3b e0       	ldi	r19, 0x0B	; 11
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	ab d3       	rcall	.+1878   	; 0xde4 <__divmodsi4>
 68e:	67 2b       	or	r22, r23
 690:	68 2b       	or	r22, r24
 692:	69 2b       	or	r22, r25
 694:	91 f5       	brne	.+100    	; 0x6fa <main+0x184>
		{
			buf1[0] = gas_boiler_enable_flag;
 696:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gas_boiler_enable_flag>
 69a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <buf1>
			//если хотим поменять уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
 69e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <RX_BUF+0x1>
 6a2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <temp_setpoint_integer>
 6a6:	29 13       	cpse	r18, r25
 6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <main+0x140>
 6aa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <RX_BUF+0x2>
 6ae:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <temp_setpoint_fraction>
 6b2:	32 17       	cp	r19, r18
 6b4:	19 f0       	breq	.+6      	; 0x6bc <main+0x146>
			{
				buf1[0] += 100;
 6b6:	8c 59       	subi	r24, 0x9C	; 156
 6b8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <buf1>
			}
			buf1[1] = temp_setpoint_integer;
 6bc:	c6 e7       	ldi	r28, 0x76	; 118
 6be:	d0 e0       	ldi	r29, 0x00	; 0
 6c0:	99 83       	std	Y+1, r25	; 0x01
			buf1[2] = temp_setpoint_fraction;
 6c2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <temp_setpoint_fraction>
 6c6:	8a 83       	std	Y+2, r24	; 0x02
			buf1[3] = home_temp_rx_integer;
 6c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6cc:	8b 83       	std	Y+3, r24	; 0x03
			buf1[4] = home_temp_rx_fraction;
 6ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <home_temp_rx_fraction>
 6d2:	8c 83       	std	Y+4, r24	; 0x04
			dt = NRF24L01_Send(buf1);
 6d4:	ce 01       	movw	r24, r28
 6d6:	2a d3       	rcall	.+1620   	; 0xd2c <NRF24L01_Send>
 6d8:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
 6dc:	09 90       	ld	r0, Y+
 6de:	00 20       	and	r0, r0
 6e0:	e9 f7       	brne	.-6      	; 0x6dc <main+0x166>
 6e2:	21 97       	sbiw	r28, 0x01	; 1
 6e4:	c6 57       	subi	r28, 0x76	; 118
 6e6:	d0 40       	sbci	r29, 0x00	; 0
 6e8:	ae 01       	movw	r20, r28
 6ea:	44 0f       	add	r20, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	86 e7       	ldi	r24, 0x76	; 118
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	d4 d3       	rcall	.+1960   	; 0xea0 <memset>
			DS18b0_find_temp();
 6f8:	9c dd       	rcall	.-1224   	; 0x232 <DS18b0_find_temp>
		}
		//вывод инфы на индикатор
		if ((millis%500) == 0)
 6fa:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <millis>
 6fe:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <millis+0x1>
 702:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <millis+0x2>
 706:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <millis+0x3>
 70a:	24 ef       	ldi	r18, 0xF4	; 244
 70c:	31 e0       	ldi	r19, 0x01	; 1
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	68 d3       	rcall	.+1744   	; 0xde4 <__divmodsi4>
 714:	67 2b       	or	r22, r23
 716:	68 2b       	or	r22, r24
 718:	69 2b       	or	r22, r25
 71a:	29 f5       	brne	.+74     	; 0x766 <main+0x1f0>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
 71c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	bc 01       	movw	r22, r24
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	68 0f       	add	r22, r24
 736:	79 1f       	adc	r23, r25
 738:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	c9 01       	movw	r24, r18
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	22 0f       	add	r18, r18
 74a:	33 1f       	adc	r19, r19
 74c:	22 0f       	add	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	82 0f       	add	r24, r18
 752:	93 1f       	adc	r25, r19
 754:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <temp_setpoint_fraction>
 758:	62 0f       	add	r22, r18
 75a:	71 1d       	adc	r23, r1
 75c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <home_temp_rx_fraction>
 760:	82 0f       	add	r24, r18
 762:	91 1d       	adc	r25, r1
 764:	81 d0       	rcall	.+258    	; 0x868 <PrintTemp_MAX7219>
		}
		wdt_reset();
 766:	a8 95       	wdr
    }
 768:	5e cf       	rjmp	.-324    	; 0x626 <main+0xb0>

0000076a <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
 76a:	cf 93       	push	r28
 76c:	c6 2f       	mov	r28, r22
 76e:	95 b3       	in	r25, 0x15	; 21
 770:	9e 7f       	andi	r25, 0xFE	; 254
 772:	95 bb       	out	0x15, r25	; 21
 774:	00 00       	nop
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	f9 de       	rcall	.-526    	; 0x56c <spi_send_recv>
 77a:	8c 2f       	mov	r24, r28
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	f6 de       	rcall	.-532    	; 0x56c <spi_send_recv>
 780:	85 b3       	in	r24, 0x15	; 21
 782:	81 60       	ori	r24, 0x01	; 1
 784:	85 bb       	out	0x15, r24	; 21
 786:	00 00       	nop
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <MAX7219_clear>:
 78c:	cf 93       	push	r28
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	8f e0       	ldi	r24, 0x0F	; 15
 792:	eb df       	rcall	.-42     	; 0x76a <Send_MAX7219>
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	e8 df       	rcall	.-48     	; 0x76a <Send_MAX7219>
 79a:	67 e0       	ldi	r22, 0x07	; 7
 79c:	8b e0       	ldi	r24, 0x0B	; 11
 79e:	e5 df       	rcall	.-54     	; 0x76a <Send_MAX7219>
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	89 e0       	ldi	r24, 0x09	; 9
 7a4:	e2 df       	rcall	.-60     	; 0x76a <Send_MAX7219>
 7a6:	c8 e0       	ldi	r28, 0x08	; 8
 7a8:	6f e0       	ldi	r22, 0x0F	; 15
 7aa:	8c 2f       	mov	r24, r28
 7ac:	de df       	rcall	.-68     	; 0x76a <Send_MAX7219>
 7ae:	c1 50       	subi	r28, 0x01	; 1
 7b0:	d9 f7       	brne	.-10     	; 0x7a8 <MAX7219_clear+0x1c>
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <MAX7219_init>:
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	8f e0       	ldi	r24, 0x0F	; 15
 7ba:	d7 df       	rcall	.-82     	; 0x76a <Send_MAX7219>
 7bc:	8f e3       	ldi	r24, 0x3F	; 63
 7be:	9c e9       	ldi	r25, 0x9C	; 156
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <MAX7219_init+0xa>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <MAX7219_init+0x10>
 7c6:	00 00       	nop
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	8c e0       	ldi	r24, 0x0C	; 12
 7cc:	ce df       	rcall	.-100    	; 0x76a <Send_MAX7219>
 7ce:	8f e3       	ldi	r24, 0x3F	; 63
 7d0:	9c e9       	ldi	r25, 0x9C	; 156
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <MAX7219_init+0x1c>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <MAX7219_init+0x22>
 7d8:	00 00       	nop
 7da:	67 e0       	ldi	r22, 0x07	; 7
 7dc:	8b e0       	ldi	r24, 0x0B	; 11
 7de:	c5 df       	rcall	.-118    	; 0x76a <Send_MAX7219>
 7e0:	8f e3       	ldi	r24, 0x3F	; 63
 7e2:	9c e9       	ldi	r25, 0x9C	; 156
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <MAX7219_init+0x2e>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <MAX7219_init+0x34>
 7ea:	00 00       	nop
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	89 e0       	ldi	r24, 0x09	; 9
 7f0:	bc df       	rcall	.-136    	; 0x76a <Send_MAX7219>
 7f2:	8f e3       	ldi	r24, 0x3F	; 63
 7f4:	9c e9       	ldi	r25, 0x9C	; 156
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <MAX7219_init+0x40>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <MAX7219_init+0x46>
 7fc:	00 00       	nop
 7fe:	62 e0       	ldi	r22, 0x02	; 2
 800:	8a e0       	ldi	r24, 0x0A	; 10
 802:	b3 df       	rcall	.-154    	; 0x76a <Send_MAX7219>
 804:	8f e3       	ldi	r24, 0x3F	; 63
 806:	9c e9       	ldi	r25, 0x9C	; 156
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <MAX7219_init+0x52>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <MAX7219_init+0x58>
 80e:	00 00       	nop
 810:	bd df       	rcall	.-134    	; 0x78c <MAX7219_clear>
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	89 e0       	ldi	r24, 0x09	; 9
 816:	a9 df       	rcall	.-174    	; 0x76a <Send_MAX7219>
 818:	8f e3       	ldi	r24, 0x3F	; 63
 81a:	9c e9       	ldi	r25, 0x9C	; 156
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <MAX7219_init+0x66>
 820:	00 c0       	rjmp	.+0      	; 0x822 <MAX7219_init+0x6c>
 822:	00 00       	nop
 824:	6f ef       	ldi	r22, 0xFF	; 255
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	a0 df       	rcall	.-192    	; 0x76a <Send_MAX7219>
 82a:	6f ef       	ldi	r22, 0xFF	; 255
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	9d df       	rcall	.-198    	; 0x76a <Send_MAX7219>
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	9a df       	rcall	.-204    	; 0x76a <Send_MAX7219>
 836:	6f ef       	ldi	r22, 0xFF	; 255
 838:	84 e0       	ldi	r24, 0x04	; 4
 83a:	97 df       	rcall	.-210    	; 0x76a <Send_MAX7219>
 83c:	6f ef       	ldi	r22, 0xFF	; 255
 83e:	85 e0       	ldi	r24, 0x05	; 5
 840:	94 df       	rcall	.-216    	; 0x76a <Send_MAX7219>
 842:	6f ef       	ldi	r22, 0xFF	; 255
 844:	86 e0       	ldi	r24, 0x06	; 6
 846:	91 df       	rcall	.-222    	; 0x76a <Send_MAX7219>
 848:	6f ef       	ldi	r22, 0xFF	; 255
 84a:	87 e0       	ldi	r24, 0x07	; 7
 84c:	8e df       	rcall	.-228    	; 0x76a <Send_MAX7219>
 84e:	6f ef       	ldi	r22, 0xFF	; 255
 850:	88 e0       	ldi	r24, 0x08	; 8
 852:	8b df       	rcall	.-234    	; 0x76a <Send_MAX7219>
 854:	9f ef       	ldi	r25, 0xFF	; 255
 856:	23 ed       	ldi	r18, 0xD3	; 211
 858:	80 e3       	ldi	r24, 0x30	; 48
 85a:	91 50       	subi	r25, 0x01	; 1
 85c:	20 40       	sbci	r18, 0x00	; 0
 85e:	80 40       	sbci	r24, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <MAX7219_init+0xa4>
 862:	00 c0       	rjmp	.+0      	; 0x864 <MAX7219_init+0xae>
 864:	00 00       	nop
 866:	08 95       	ret

00000868 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
 868:	ff 92       	push	r15
 86a:	0f 93       	push	r16
 86c:	1f 93       	push	r17
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	8c 01       	movw	r16, r24
 874:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
 876:	08 3e       	cpi	r16, 0xE8	; 232
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	18 07       	cpc	r17, r24
 87c:	0c f0       	brlt	.+2      	; 0x880 <PrintTemp_MAX7219+0x18>
 87e:	67 c0       	rjmp	.+206    	; 0x94e <PrintTemp_MAX7219+0xe6>
 880:	68 3e       	cpi	r22, 0xE8	; 232
 882:	73 40       	sbci	r23, 0x03	; 3
 884:	0c f0       	brlt	.+2      	; 0x888 <PrintTemp_MAX7219+0x20>
 886:	65 c0       	rjmp	.+202    	; 0x952 <PrintTemp_MAX7219+0xea>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
 888:	81 df       	rcall	.-254    	; 0x78c <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодирования для всех разрядов кроме позиций 2 и 6
 88a:	6e ee       	ldi	r22, 0xEE	; 238
 88c:	89 e0       	ldi	r24, 0x09	; 9
 88e:	6d df       	rcall	.-294    	; 0x76a <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв С
 890:	6e e4       	ldi	r22, 0x4E	; 78
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	6a df       	rcall	.-300    	; 0x76a <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв С
 896:	6e e4       	ldi	r22, 0x4E	; 78
 898:	85 e0       	ldi	r24, 0x05	; 5
 89a:	67 df       	rcall	.-306    	; 0x76a <Send_MAX7219>
	if (current_temp == 0)
 89c:	01 15       	cp	r16, r1
 89e:	11 05       	cpc	r17, r1
 8a0:	29 f5       	brne	.+74     	; 0x8ec <PrintTemp_MAX7219+0x84>
	{
		Send_MAX7219(start_pos, 0);
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	61 df       	rcall	.-318    	; 0x76a <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
 8a8:	60 e8       	ldi	r22, 0x80	; 128
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	5e df       	rcall	.-324    	; 0x76a <Send_MAX7219>
 8ae:	24 c0       	rjmp	.+72     	; 0x8f8 <PrintTemp_MAX7219+0x90>
	}
	else
	{
		while (current_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	f8 16       	cp	r15, r24
 8b4:	19 f0       	breq	.+6      	; 0x8bc <PrintTemp_MAX7219+0x54>
 8b6:	87 e0       	ldi	r24, 0x07	; 7
 8b8:	f8 12       	cpse	r15, r24
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <PrintTemp_MAX7219+0x66>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
 8bc:	c8 01       	movw	r24, r16
 8be:	6a e0       	ldi	r22, 0x0A	; 10
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	7d d2       	rcall	.+1274   	; 0xdbe <__divmodhi4>
 8c4:	68 2f       	mov	r22, r24
 8c6:	60 68       	ori	r22, 0x80	; 128
 8c8:	8f 2d       	mov	r24, r15
 8ca:	4f df       	rcall	.-354    	; 0x76a <Send_MAX7219>
 8cc:	07 c0       	rjmp	.+14     	; 0x8dc <PrintTemp_MAX7219+0x74>
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
 8ce:	c8 01       	movw	r24, r16
 8d0:	6a e0       	ldi	r22, 0x0A	; 10
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	74 d2       	rcall	.+1256   	; 0xdbe <__divmodhi4>
 8d6:	68 2f       	mov	r22, r24
 8d8:	8f 2d       	mov	r24, r15
 8da:	47 df       	rcall	.-370    	; 0x76a <Send_MAX7219>
			}
			start_pos++;
 8dc:	f3 94       	inc	r15
			current_temp /= 10;
 8de:	c8 01       	movw	r24, r16
 8e0:	6a e0       	ldi	r22, 0x0A	; 10
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	6c d2       	rcall	.+1240   	; 0xdbe <__divmodhi4>
 8e6:	8b 01       	movw	r16, r22
			asm("nop");
 8e8:	00 00       	nop
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <PrintTemp_MAX7219+0x8a>
 8ec:	68 94       	set
 8ee:	ff 24       	eor	r15, r15
 8f0:	f1 f8       	bld	r15, 1
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
 8f2:	01 15       	cp	r16, r1
 8f4:	11 05       	cpc	r17, r1
 8f6:	e1 f6       	brne	.-72     	; 0x8b0 <PrintTemp_MAX7219+0x48>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
 8f8:	20 97       	sbiw	r28, 0x00	; 0
 8fa:	21 f5       	brne	.+72     	; 0x944 <PrintTemp_MAX7219+0xdc>
	{
		Send_MAX7219(start_pos, 0);
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	86 e0       	ldi	r24, 0x06	; 6
 900:	34 df       	rcall	.-408    	; 0x76a <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
 902:	60 e8       	ldi	r22, 0x80	; 128
 904:	87 e0       	ldi	r24, 0x07	; 7
 906:	31 df       	rcall	.-414    	; 0x76a <Send_MAX7219>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	24 c0       	rjmp	.+72     	; 0x954 <PrintTemp_MAX7219+0xec>
	}
	else
	{
		while (setpoint_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
 90c:	13 30       	cpi	r17, 0x03	; 3
 90e:	11 f0       	breq	.+4      	; 0x914 <PrintTemp_MAX7219+0xac>
 910:	17 30       	cpi	r17, 0x07	; 7
 912:	49 f4       	brne	.+18     	; 0x926 <PrintTemp_MAX7219+0xbe>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
 914:	ce 01       	movw	r24, r28
 916:	6a e0       	ldi	r22, 0x0A	; 10
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	51 d2       	rcall	.+1186   	; 0xdbe <__divmodhi4>
 91c:	68 2f       	mov	r22, r24
 91e:	60 68       	ori	r22, 0x80	; 128
 920:	81 2f       	mov	r24, r17
 922:	23 df       	rcall	.-442    	; 0x76a <Send_MAX7219>
 924:	07 c0       	rjmp	.+14     	; 0x934 <PrintTemp_MAX7219+0xcc>
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
 926:	ce 01       	movw	r24, r28
 928:	6a e0       	ldi	r22, 0x0A	; 10
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	48 d2       	rcall	.+1168   	; 0xdbe <__divmodhi4>
 92e:	68 2f       	mov	r22, r24
 930:	81 2f       	mov	r24, r17
 932:	1b df       	rcall	.-458    	; 0x76a <Send_MAX7219>
			}
			start_pos++;
 934:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
 936:	ce 01       	movw	r24, r28
 938:	6a e0       	ldi	r22, 0x0A	; 10
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	40 d2       	rcall	.+1152   	; 0xdbe <__divmodhi4>
 93e:	eb 01       	movw	r28, r22
			asm("nop");
 940:	00 00       	nop
 942:	01 c0       	rjmp	.+2      	; 0x946 <PrintTemp_MAX7219+0xde>
 944:	16 e0       	ldi	r17, 0x06	; 6
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
 946:	20 97       	sbiw	r28, 0x00	; 0
 948:	09 f7       	brne	.-62     	; 0x90c <PrintTemp_MAX7219+0xa4>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	03 c0       	rjmp	.+6      	; 0x954 <PrintTemp_MAX7219+0xec>
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	01 c0       	rjmp	.+2      	; 0x954 <PrintTemp_MAX7219+0xec>
 952:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	08 95       	ret

00000960 <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
 960:	ef 92       	push	r14
 962:	ff 92       	push	r15
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	8b 01       	movw	r16, r22
 96e:	c4 2f       	mov	r28, r20
 970:	98 b3       	in	r25, 0x18	; 24
 972:	9d 7f       	andi	r25, 0xFD	; 253
 974:	98 bb       	out	0x18, r25	; 24
 976:	98 b3       	in	r25, 0x18	; 24
 978:	9b 7f       	andi	r25, 0xFB	; 251
 97a:	98 bb       	out	0x18, r25	; 24
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	f6 dd       	rcall	.-1044   	; 0x56c <spi_send_recv>
 980:	85 e0       	ldi	r24, 0x05	; 5
 982:	8a 95       	dec	r24
 984:	f1 f7       	brne	.-4      	; 0x982 <NRF24_Transmit+0x22>
 986:	00 00       	nop
 988:	0a c0       	rjmp	.+20     	; 0x99e <NRF24_Transmit+0x3e>
 98a:	78 01       	movw	r14, r16
 98c:	ef ef       	ldi	r30, 0xFF	; 255
 98e:	ee 1a       	sub	r14, r30
 990:	fe 0a       	sbc	r15, r30
 992:	f8 01       	movw	r30, r16
 994:	80 81       	ld	r24, Z
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	e9 dd       	rcall	.-1070   	; 0x56c <spi_send_recv>
 99a:	cd 2f       	mov	r28, r29
 99c:	87 01       	movw	r16, r14
 99e:	df ef       	ldi	r29, 0xFF	; 255
 9a0:	dc 0f       	add	r29, r28
 9a2:	c1 11       	cpse	r28, r1
 9a4:	f2 cf       	rjmp	.-28     	; 0x98a <NRF24_Transmit+0x2a>
 9a6:	88 b3       	in	r24, 0x18	; 24
 9a8:	84 60       	ori	r24, 0x04	; 4
 9aa:	88 bb       	out	0x18, r24	; 24
 9ac:	88 b3       	in	r24, 0x18	; 24
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	88 bb       	out	0x18, r24	; 24
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	1f 91       	pop	r17
 9b8:	0f 91       	pop	r16
 9ba:	ff 90       	pop	r15
 9bc:	ef 90       	pop	r14
 9be:	08 95       	ret

000009c0 <NRF24_FlushRX>:
 9c0:	88 b3       	in	r24, 0x18	; 24
 9c2:	8b 7f       	andi	r24, 0xFB	; 251
 9c4:	88 bb       	out	0x18, r24	; 24
 9c6:	82 ee       	ldi	r24, 0xE2	; 226
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	d0 dd       	rcall	.-1120   	; 0x56c <spi_send_recv>
 9cc:	85 e0       	ldi	r24, 0x05	; 5
 9ce:	8a 95       	dec	r24
 9d0:	f1 f7       	brne	.-4      	; 0x9ce <NRF24_FlushRX+0xe>
 9d2:	00 00       	nop
 9d4:	88 b3       	in	r24, 0x18	; 24
 9d6:	84 60       	ori	r24, 0x04	; 4
 9d8:	88 bb       	out	0x18, r24	; 24
 9da:	08 95       	ret

000009dc <NRF24_FlushTX>:
 9dc:	88 b3       	in	r24, 0x18	; 24
 9de:	8b 7f       	andi	r24, 0xFB	; 251
 9e0:	88 bb       	out	0x18, r24	; 24
 9e2:	81 ee       	ldi	r24, 0xE1	; 225
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	c2 dd       	rcall	.-1148   	; 0x56c <spi_send_recv>
 9e8:	85 e0       	ldi	r24, 0x05	; 5
 9ea:	8a 95       	dec	r24
 9ec:	f1 f7       	brne	.-4      	; 0x9ea <NRF24_FlushTX+0xe>
 9ee:	00 00       	nop
 9f0:	88 b3       	in	r24, 0x18	; 24
 9f2:	84 60       	ori	r24, 0x04	; 4
 9f4:	88 bb       	out	0x18, r24	; 24
 9f6:	08 95       	ret

000009f8 <NRF24_ToggleFeatures>:
 9f8:	88 b3       	in	r24, 0x18	; 24
 9fa:	8b 7f       	andi	r24, 0xFB	; 251
 9fc:	88 bb       	out	0x18, r24	; 24
 9fe:	80 e5       	ldi	r24, 0x50	; 80
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	b4 dd       	rcall	.-1176   	; 0x56c <spi_send_recv>
 a04:	85 e0       	ldi	r24, 0x05	; 5
 a06:	8a 95       	dec	r24
 a08:	f1 f7       	brne	.-4      	; 0xa06 <NRF24_ToggleFeatures+0xe>
 a0a:	00 00       	nop
 a0c:	83 e7       	ldi	r24, 0x73	; 115
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	ad dd       	rcall	.-1190   	; 0x56c <spi_send_recv>
 a12:	88 b3       	in	r24, 0x18	; 24
 a14:	84 60       	ori	r24, 0x04	; 4
 a16:	88 bb       	out	0x18, r24	; 24
 a18:	08 95       	ret

00000a1a <NRF24_Read_Buf>:
 a1a:	ef 92       	push	r14
 a1c:	ff 92       	push	r15
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
 a26:	8b 01       	movw	r16, r22
 a28:	c4 2f       	mov	r28, r20
 a2a:	98 b3       	in	r25, 0x18	; 24
 a2c:	9b 7f       	andi	r25, 0xFB	; 251
 a2e:	98 bb       	out	0x18, r25	; 24
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	9c dd       	rcall	.-1224   	; 0x56c <spi_send_recv>
 a34:	0b c0       	rjmp	.+22     	; 0xa4c <NRF24_Read_Buf+0x32>
 a36:	78 01       	movw	r14, r16
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	e8 1a       	sub	r14, r24
 a3c:	f8 0a       	sbc	r15, r24
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	94 dd       	rcall	.-1240   	; 0x56c <spi_send_recv>
 a44:	f8 01       	movw	r30, r16
 a46:	80 83       	st	Z, r24
 a48:	cd 2f       	mov	r28, r29
 a4a:	87 01       	movw	r16, r14
 a4c:	df ef       	ldi	r29, 0xFF	; 255
 a4e:	dc 0f       	add	r29, r28
 a50:	c1 11       	cpse	r28, r1
 a52:	f1 cf       	rjmp	.-30     	; 0xa36 <NRF24_Read_Buf+0x1c>
 a54:	88 b3       	in	r24, 0x18	; 24
 a56:	84 60       	ori	r24, 0x04	; 4
 a58:	88 bb       	out	0x18, r24	; 24
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	ff 90       	pop	r15
 a64:	ef 90       	pop	r14
 a66:	08 95       	ret

00000a68 <NRF24_Write_Buf>:
 a68:	ef 92       	push	r14
 a6a:	ff 92       	push	r15
 a6c:	0f 93       	push	r16
 a6e:	1f 93       	push	r17
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	8b 01       	movw	r16, r22
 a76:	c4 2f       	mov	r28, r20
 a78:	80 62       	ori	r24, 0x20	; 32
 a7a:	98 b3       	in	r25, 0x18	; 24
 a7c:	9b 7f       	andi	r25, 0xFB	; 251
 a7e:	98 bb       	out	0x18, r25	; 24
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	74 dd       	rcall	.-1304   	; 0x56c <spi_send_recv>
 a84:	85 e0       	ldi	r24, 0x05	; 5
 a86:	8a 95       	dec	r24
 a88:	f1 f7       	brne	.-4      	; 0xa86 <NRF24_Write_Buf+0x1e>
 a8a:	00 00       	nop
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <NRF24_Write_Buf+0x3a>
 a8e:	78 01       	movw	r14, r16
 a90:	ef ef       	ldi	r30, 0xFF	; 255
 a92:	ee 1a       	sub	r14, r30
 a94:	fe 0a       	sbc	r15, r30
 a96:	f8 01       	movw	r30, r16
 a98:	80 81       	ld	r24, Z
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	67 dd       	rcall	.-1330   	; 0x56c <spi_send_recv>
 a9e:	cd 2f       	mov	r28, r29
 aa0:	87 01       	movw	r16, r14
 aa2:	df ef       	ldi	r29, 0xFF	; 255
 aa4:	dc 0f       	add	r29, r28
 aa6:	c1 11       	cpse	r28, r1
 aa8:	f2 cf       	rjmp	.-28     	; 0xa8e <NRF24_Write_Buf+0x26>
 aaa:	88 b3       	in	r24, 0x18	; 24
 aac:	84 60       	ori	r24, 0x04	; 4
 aae:	88 bb       	out	0x18, r24	; 24
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	ff 90       	pop	r15
 aba:	ef 90       	pop	r14
 abc:	08 95       	ret

00000abe <NRF24L01_TX_Mode>:
 abe:	43 e0       	ldi	r20, 0x03	; 3
 ac0:	65 e6       	ldi	r22, 0x65	; 101
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	80 e1       	ldi	r24, 0x10	; 16
 ac6:	d0 df       	rcall	.-96     	; 0xa68 <NRF24_Write_Buf>
 ac8:	43 e0       	ldi	r20, 0x03	; 3
 aca:	65 e6       	ldi	r22, 0x65	; 101
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	8b e0       	ldi	r24, 0x0B	; 11
 ad0:	cb df       	rcall	.-106    	; 0xa68 <NRF24_Write_Buf>
 ad2:	88 b3       	in	r24, 0x18	; 24
 ad4:	8d 7f       	andi	r24, 0xFD	; 253
 ad6:	88 bb       	out	0x18, r24	; 24
 ad8:	73 df       	rcall	.-282    	; 0x9c0 <NRF24_FlushRX>
 ada:	80 df       	rcall	.-256    	; 0x9dc <NRF24_FlushTX>
 adc:	08 95       	ret

00000ade <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
 ade:	cf 93       	push	r28
 ae0:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
 ae2:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
 ae4:	98 b3       	in	r25, 0x18	; 24
 ae6:	9b 7f       	andi	r25, 0xFB	; 251
 ae8:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	3f dd       	rcall	.-1410   	; 0x56c <spi_send_recv>
	spi_send_recv(data_out);
 aee:	8c 2f       	mov	r24, r28
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	3c dd       	rcall	.-1416   	; 0x56c <spi_send_recv>
	HIGH_CSN;
 af4:	88 b3       	in	r24, 0x18	; 24
 af6:	84 60       	ori	r24, 0x04	; 4
 af8:	88 bb       	out	0x18, r24	; 24
}
 afa:	cf 91       	pop	r28
 afc:	08 95       	ret

00000afe <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
 afe:	cf 93       	push	r28
 b00:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
 b02:	88 b3       	in	r24, 0x18	; 24
 b04:	8b 7f       	andi	r24, 0xFB	; 251
 b06:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
 b08:	8c 2f       	mov	r24, r28
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	2f dd       	rcall	.-1442   	; 0x56c <spi_send_recv>
	if(reg != STATUS)
 b0e:	c7 30       	cpi	r28, 0x07	; 7
 b10:	19 f0       	breq	.+6      	; 0xb18 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	2a dd       	rcall	.-1452   	; 0x56c <spi_send_recv>
	}
	HIGH_CSN;
 b18:	98 b3       	in	r25, 0x18	; 24
 b1a:	94 60       	ori	r25, 0x04	; 4
 b1c:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
 b1e:	cf 91       	pop	r28
 b20:	08 95       	ret

00000b22 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
 b22:	1f 92       	push	r1
 b24:	0f 92       	push	r0
 b26:	0f b6       	in	r0, 0x3f	; 63
 b28:	0f 92       	push	r0
 b2a:	11 24       	eor	r1, r1
 b2c:	2f 93       	push	r18
 b2e:	3f 93       	push	r19
 b30:	4f 93       	push	r20
 b32:	5f 93       	push	r21
 b34:	6f 93       	push	r22
 b36:	7f 93       	push	r23
 b38:	8f 93       	push	r24
 b3a:	9f 93       	push	r25
 b3c:	af 93       	push	r26
 b3e:	bf 93       	push	r27
 b40:	cf 93       	push	r28
 b42:	ef 93       	push	r30
 b44:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
 b46:	87 e0       	ldi	r24, 0x07	; 7
 b48:	da df       	rcall	.-76     	; 0xafe <nRF_read_register>
 b4a:	c8 2f       	mov	r28, r24
	if(status & 0x40)
 b4c:	86 ff       	sbrs	r24, 6
 b4e:	7e c0       	rjmp	.+252    	; 0xc4c <__vector_1+0x12a>
	{
		pipe = (status>>1)&0x07;
 b50:	86 95       	lsr	r24
 b52:	87 70       	andi	r24, 0x07	; 7
 b54:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
 b58:	45 e0       	ldi	r20, 0x05	; 5
 b5a:	63 e8       	ldi	r22, 0x83	; 131
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	81 e6       	ldi	r24, 0x61	; 97
 b60:	5c df       	rcall	.-328    	; 0xa1a <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
 b62:	60 e4       	ldi	r22, 0x40	; 64
 b64:	87 e0       	ldi	r24, 0x07	; 7
 b66:	bb df       	rcall	.-138    	; 0xade <nRF_write_register>
		rx_flag = 1;
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <rx_flag>
		PORTD |= (1<<LED_RX);
 b6e:	82 b3       	in	r24, 0x12	; 18
 b70:	80 62       	ori	r24, 0x20	; 32
 b72:	82 bb       	out	0x12, r24	; 18
 b74:	2f ef       	ldi	r18, 0xFF	; 255
 b76:	81 ee       	ldi	r24, 0xE1	; 225
 b78:	94 e0       	ldi	r25, 0x04	; 4
 b7a:	21 50       	subi	r18, 0x01	; 1
 b7c:	80 40       	sbci	r24, 0x00	; 0
 b7e:	90 40       	sbci	r25, 0x00	; 0
 b80:	e1 f7       	brne	.-8      	; 0xb7a <__vector_1+0x58>
 b82:	00 c0       	rjmp	.+0      	; 0xb84 <__vector_1+0x62>
 b84:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
 b86:	82 b3       	in	r24, 0x12	; 18
 b88:	8f 7d       	andi	r24, 0xDF	; 223
 b8a:	82 bb       	out	0x12, r24	; 18
		millis_hometemp_update = millis;
 b8c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <millis>
 b90:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <millis+0x1>
 b94:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <millis+0x2>
 b98:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <millis+0x3>
 b9c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <millis_hometemp_update>
 ba0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <millis_hometemp_update+0x1>
 ba4:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <millis_hometemp_update+0x2>
 ba8:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <millis_hometemp_update+0x3>
		
		gas_boiler_enable_flag = RX_BUF[0];
 bac:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <RX_BUF>
 bb0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gas_boiler_enable_flag>
		switch (gas_boiler_enable_flag)
 bb4:	84 36       	cpi	r24, 0x64	; 100
 bb6:	d9 f0       	breq	.+54     	; 0xbee <__vector_1+0xcc>
 bb8:	28 f4       	brcc	.+10     	; 0xbc4 <__vector_1+0xa2>
 bba:	8a 30       	cpi	r24, 0x0A	; 10
 bbc:	51 f0       	breq	.+20     	; 0xbd2 <__vector_1+0xb0>
 bbe:	8b 30       	cpi	r24, 0x0B	; 11
 bc0:	79 f0       	breq	.+30     	; 0xbe0 <__vector_1+0xbe>
 bc2:	44 c0       	rjmp	.+136    	; 0xc4c <__vector_1+0x12a>
 bc4:	8e 36       	cpi	r24, 0x6E	; 110
 bc6:	29 f1       	breq	.+74     	; 0xc12 <__vector_1+0xf0>
 bc8:	8f 36       	cpi	r24, 0x6F	; 111
 bca:	91 f1       	breq	.+100    	; 0xc30 <__vector_1+0x10e>
 bcc:	85 36       	cpi	r24, 0x65	; 101
 bce:	f1 f5       	brne	.+124    	; 0xc4c <__vector_1+0x12a>
 bd0:	17 c0       	rjmp	.+46     	; 0xc00 <__vector_1+0xde>
			case 0:	
					break;
			case 1:
					break;
			case 10:
					PORTB &= ~(1<<MOSFET);
 bd2:	88 b3       	in	r24, 0x18	; 24
 bd4:	8e 7f       	andi	r24, 0xFE	; 254
 bd6:	88 bb       	out	0x18, r24	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
 bd8:	82 b3       	in	r24, 0x12	; 18
 bda:	8f 7e       	andi	r24, 0xEF	; 239
 bdc:	82 bb       	out	0x12, r24	; 18
					break;
 bde:	36 c0       	rjmp	.+108    	; 0xc4c <__vector_1+0x12a>
			case 11:
					PORTB |= (1<<MOSFET);
 be0:	88 b3       	in	r24, 0x18	; 24
 be2:	81 60       	ori	r24, 0x01	; 1
 be4:	88 bb       	out	0x18, r24	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
 be6:	82 b3       	in	r24, 0x12	; 18
 be8:	80 61       	ori	r24, 0x10	; 16
 bea:	82 bb       	out	0x12, r24	; 18
					break;
 bec:	2f c0       	rjmp	.+94     	; 0xc4c <__vector_1+0x12a>
			case 100:
					temp_setpoint_integer = RX_BUF[1];
 bee:	e3 e8       	ldi	r30, 0x83	; 131
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	81 81       	ldd	r24, Z+1	; 0x01
 bf4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
 bf8:	82 81       	ldd	r24, Z+2	; 0x02
 bfa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <temp_setpoint_fraction>
					break;
 bfe:	26 c0       	rjmp	.+76     	; 0xc4c <__vector_1+0x12a>
			case 101:
					temp_setpoint_integer = RX_BUF[1];
 c00:	e3 e8       	ldi	r30, 0x83	; 131
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	81 81       	ldd	r24, Z+1	; 0x01
 c06:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
 c0a:	82 81       	ldd	r24, Z+2	; 0x02
 c0c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <temp_setpoint_fraction>
					break;
 c10:	1d c0       	rjmp	.+58     	; 0xc4c <__vector_1+0x12a>
			case 110:
					temp_setpoint_integer = RX_BUF[1];
 c12:	e3 e8       	ldi	r30, 0x83	; 131
 c14:	f0 e0       	ldi	r31, 0x00	; 0
 c16:	81 81       	ldd	r24, Z+1	; 0x01
 c18:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
 c1c:	82 81       	ldd	r24, Z+2	; 0x02
 c1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <temp_setpoint_fraction>
					PORTB &= ~(1<<MOSFET);
 c22:	88 b3       	in	r24, 0x18	; 24
 c24:	8e 7f       	andi	r24, 0xFE	; 254
 c26:	88 bb       	out	0x18, r24	; 24
					PORTD &= ~(1<<LED_BOILER_STATUS);
 c28:	82 b3       	in	r24, 0x12	; 18
 c2a:	8f 7e       	andi	r24, 0xEF	; 239
 c2c:	82 bb       	out	0x12, r24	; 18
					break;
 c2e:	0e c0       	rjmp	.+28     	; 0xc4c <__vector_1+0x12a>
			case 111:
					temp_setpoint_integer = RX_BUF[1];
 c30:	e3 e8       	ldi	r30, 0x83	; 131
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	81 81       	ldd	r24, Z+1	; 0x01
 c36:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
					temp_setpoint_fraction = RX_BUF[2];
 c3a:	82 81       	ldd	r24, Z+2	; 0x02
 c3c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <temp_setpoint_fraction>
					PORTB |= (1<<MOSFET);
 c40:	88 b3       	in	r24, 0x18	; 24
 c42:	81 60       	ori	r24, 0x01	; 1
 c44:	88 bb       	out	0x18, r24	; 24
					PORTD |= (1<<LED_BOILER_STATUS);
 c46:	82 b3       	in	r24, 0x12	; 18
 c48:	80 61       	ori	r24, 0x10	; 16
 c4a:	82 bb       	out	0x12, r24	; 18
		}
		home_temp_rx_integer = RX_BUF[3];
		home_temp_rx_fraction = RX_BUF[4];
		*/
	}
	if(status&TX_DS) //tx_ds == 0x20
 c4c:	c5 70       	andi	r28, 0x05	; 5
 c4e:	19 f0       	breq	.+6      	; 0xc56 <__vector_1+0x134>
	{
		nRF_write_register(STATUS, 0x20);
 c50:	60 e2       	ldi	r22, 0x20	; 32
 c52:	87 e0       	ldi	r24, 0x07	; 7
 c54:	44 df       	rcall	.-376    	; 0xade <nRF_write_register>
	}
}
 c56:	ff 91       	pop	r31
 c58:	ef 91       	pop	r30
 c5a:	cf 91       	pop	r28
 c5c:	bf 91       	pop	r27
 c5e:	af 91       	pop	r26
 c60:	9f 91       	pop	r25
 c62:	8f 91       	pop	r24
 c64:	7f 91       	pop	r23
 c66:	6f 91       	pop	r22
 c68:	5f 91       	pop	r21
 c6a:	4f 91       	pop	r20
 c6c:	3f 91       	pop	r19
 c6e:	2f 91       	pop	r18
 c70:	0f 90       	pop	r0
 c72:	0f be       	out	0x3f, r0	; 63
 c74:	0f 90       	pop	r0
 c76:	1f 90       	pop	r1
 c78:	18 95       	reti

00000c7a <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	40 df       	rcall	.-384    	; 0xafe <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 c7e:	68 2f       	mov	r22, r24
 c80:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	2c df       	rcall	.-424    	; 0xade <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
 c86:	43 e0       	ldi	r20, 0x03	; 3
 c88:	62 e6       	ldi	r22, 0x62	; 98
 c8a:	70 e0       	ldi	r23, 0x00	; 0
 c8c:	80 e1       	ldi	r24, 0x10	; 16
 c8e:	ec de       	rcall	.-552    	; 0xa68 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
 c90:	43 e0       	ldi	r20, 0x03	; 3
 c92:	62 e6       	ldi	r22, 0x62	; 98
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	8b e0       	ldi	r24, 0x0B	; 11
 c98:	e7 de       	rcall	.-562    	; 0xa68 <NRF24_Write_Buf>
	HIGH_CE;
 c9a:	88 b3       	in	r24, 0x18	; 24
 c9c:	82 60       	ori	r24, 0x02	; 2
 c9e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ca0:	87 e5       	ldi	r24, 0x57	; 87
 ca2:	92 e0       	ldi	r25, 0x02	; 2
 ca4:	01 97       	sbiw	r24, 0x01	; 1
 ca6:	f1 f7       	brne	.-4      	; 0xca4 <NRF24L01_RX_Mode+0x2a>
 ca8:	00 c0       	rjmp	.+0      	; 0xcaa <NRF24L01_RX_Mode+0x30>
 caa:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
 cac:	89 de       	rcall	.-750    	; 0x9c0 <NRF24_FlushRX>
	NRF24_FlushTX();
 cae:	96 de       	rcall	.-724    	; 0x9dc <NRF24_FlushTX>
 cb0:	08 95       	ret

00000cb2 <NRF24_ini>:

extern uint8_t gas_boiler_enable_flag;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
 cb2:	88 b3       	in	r24, 0x18	; 24
 cb4:	8d 7f       	andi	r24, 0xFD	; 253
 cb6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 cb8:	8f e1       	ldi	r24, 0x1F	; 31
 cba:	9e e4       	ldi	r25, 0x4E	; 78
 cbc:	01 97       	sbiw	r24, 0x01	; 1
 cbe:	f1 f7       	brne	.-4      	; 0xcbc <NRF24_ini+0xa>
 cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <NRF24_ini+0x10>
 cc2:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 cc4:	6a e0       	ldi	r22, 0x0A	; 10
 cc6:	80 e0       	ldi	r24, 0x00	; 0
 cc8:	0a df       	rcall	.-492    	; 0xade <nRF_write_register>
 cca:	8f e1       	ldi	r24, 0x1F	; 31
 ccc:	9e e4       	ldi	r25, 0x4E	; 78
 cce:	01 97       	sbiw	r24, 0x01	; 1
 cd0:	f1 f7       	brne	.-4      	; 0xcce <NRF24_ini+0x1c>
 cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <NRF24_ini+0x22>
 cd4:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
 cd6:	63 e0       	ldi	r22, 0x03	; 3
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	01 df       	rcall	.-510    	; 0xade <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
 cdc:	63 e0       	ldi	r22, 0x03	; 3
 cde:	82 e0       	ldi	r24, 0x02	; 2
 ce0:	fe de       	rcall	.-516    	; 0xade <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
 ce2:	61 e0       	ldi	r22, 0x01	; 1
 ce4:	83 e0       	ldi	r24, 0x03	; 3
 ce6:	fb de       	rcall	.-522    	; 0xade <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
 ce8:	6f e6       	ldi	r22, 0x6F	; 111
 cea:	84 e0       	ldi	r24, 0x04	; 4
 cec:	f8 de       	rcall	.-528    	; 0xade <nRF_write_register>
	NRF24_ToggleFeatures();
 cee:	84 de       	rcall	.-760    	; 0x9f8 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
 cf0:	60 e0       	ldi	r22, 0x00	; 0
 cf2:	8d e1       	ldi	r24, 0x1D	; 29
 cf4:	f4 de       	rcall	.-536    	; 0xade <nRF_write_register>
	nRF_write_register(DYNPD, 0);
 cf6:	60 e0       	ldi	r22, 0x00	; 0
 cf8:	8c e1       	ldi	r24, 0x1C	; 28
 cfa:	f1 de       	rcall	.-542    	; 0xade <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 cfc:	60 e7       	ldi	r22, 0x70	; 112
 cfe:	87 e0       	ldi	r24, 0x07	; 7
 d00:	ee de       	rcall	.-548    	; 0xade <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
 d02:	6c e4       	ldi	r22, 0x4C	; 76
 d04:	85 e0       	ldi	r24, 0x05	; 5
 d06:	eb de       	rcall	.-554    	; 0xade <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
 d08:	66 e0       	ldi	r22, 0x06	; 6
 d0a:	86 e0       	ldi	r24, 0x06	; 6
 d0c:	e8 de       	rcall	.-560    	; 0xade <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
 d0e:	43 e0       	ldi	r20, 0x03	; 3
 d10:	62 e6       	ldi	r22, 0x62	; 98
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	80 e1       	ldi	r24, 0x10	; 16
 d16:	a8 de       	rcall	.-688    	; 0xa68 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
 d18:	43 e0       	ldi	r20, 0x03	; 3
 d1a:	62 e6       	ldi	r22, 0x62	; 98
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	8b e0       	ldi	r24, 0x0B	; 11
 d20:	a3 de       	rcall	.-698    	; 0xa68 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
 d22:	65 e0       	ldi	r22, 0x05	; 5
 d24:	82 e1       	ldi	r24, 0x12	; 18
 d26:	db de       	rcall	.-586    	; 0xade <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
 d28:	a8 df       	rcall	.-176    	; 0xc7a <NRF24L01_RX_Mode>
 d2a:	08 95       	ret

00000d2c <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 d2c:	cf 93       	push	r28
 d2e:	df 93       	push	r29
 d30:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
 d32:	c5 de       	rcall	.-630    	; 0xabe <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
 d34:	80 e0       	ldi	r24, 0x00	; 0
 d36:	e3 de       	rcall	.-570    	; 0xafe <nRF_read_register>
 d38:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
 d3a:	68 2f       	mov	r22, r24
 d3c:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
 d3e:	80 e0       	ldi	r24, 0x00	; 0
 d40:	ce de       	rcall	.-612    	; 0xade <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d42:	87 e5       	ldi	r24, 0x57	; 87
 d44:	92 e0       	ldi	r25, 0x02	; 2
 d46:	01 97       	sbiw	r24, 0x01	; 1
 d48:	f1 f7       	brne	.-4      	; 0xd46 <NRF24L01_Send+0x1a>
 d4a:	00 c0       	rjmp	.+0      	; 0xd4c <NRF24L01_Send+0x20>
 d4c:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
 d4e:	45 e0       	ldi	r20, 0x05	; 5
 d50:	be 01       	movw	r22, r28
 d52:	80 ea       	ldi	r24, 0xA0	; 160
 d54:	05 de       	rcall	.-1014   	; 0x960 <NRF24_Transmit>
	HIGH_CE;
 d56:	88 b3       	in	r24, 0x18	; 24
 d58:	82 60       	ori	r24, 0x02	; 2
 d5a:	88 bb       	out	0x18, r24	; 24
 d5c:	90 e5       	ldi	r25, 0x50	; 80
 d5e:	9a 95       	dec	r25
 d60:	f1 f7       	brne	.-4      	; 0xd5e <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
 d62:	88 b3       	in	r24, 0x18	; 24
 d64:	8d 7f       	andi	r24, 0xFD	; 253
 d66:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
 d68:	82 99       	sbic	0x10, 2	; 16
 d6a:	fe cf       	rjmp	.-4      	; 0xd68 <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
 d6c:	87 e0       	ldi	r24, 0x07	; 7
 d6e:	c7 de       	rcall	.-626    	; 0xafe <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
 d70:	98 2f       	mov	r25, r24
 d72:	95 70       	andi	r25, 0x05	; 5
 d74:	99 f0       	breq	.+38     	; 0xd9c <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED_TX);
 d76:	82 b3       	in	r24, 0x12	; 18
 d78:	80 64       	ori	r24, 0x40	; 64
 d7a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d7c:	2f ef       	ldi	r18, 0xFF	; 255
 d7e:	81 ee       	ldi	r24, 0xE1	; 225
 d80:	94 e0       	ldi	r25, 0x04	; 4
 d82:	21 50       	subi	r18, 0x01	; 1
 d84:	80 40       	sbci	r24, 0x00	; 0
 d86:	90 40       	sbci	r25, 0x00	; 0
 d88:	e1 f7       	brne	.-8      	; 0xd82 <NRF24L01_Send+0x56>
 d8a:	00 c0       	rjmp	.+0      	; 0xd8c <NRF24L01_Send+0x60>
 d8c:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
 d8e:	82 b3       	in	r24, 0x12	; 18
 d90:	8f 7b       	andi	r24, 0xBF	; 191
 d92:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
 d94:	60 e2       	ldi	r22, 0x20	; 32
 d96:	87 e0       	ldi	r24, 0x07	; 7
 d98:	a2 de       	rcall	.-700    	; 0xade <nRF_write_register>
 d9a:	06 c0       	rjmp	.+12     	; 0xda8 <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
 d9c:	82 ff       	sbrs	r24, 2
 d9e:	04 c0       	rjmp	.+8      	; 0xda8 <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
 da0:	60 e1       	ldi	r22, 0x10	; 16
 da2:	87 e0       	ldi	r24, 0x07	; 7
 da4:	9c de       	rcall	.-712    	; 0xade <nRF_write_register>
		NRF24_FlushTX();
 da6:	1a de       	rcall	.-972    	; 0x9dc <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
 da8:	88 e0       	ldi	r24, 0x08	; 8
 daa:	a9 de       	rcall	.-686    	; 0xafe <nRF_read_register>
 dac:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
 dae:	65 df       	rcall	.-310    	; 0xc7a <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
 db0:	60 e7       	ldi	r22, 0x70	; 112
 db2:	87 e0       	ldi	r24, 0x07	; 7
 db4:	94 de       	rcall	.-728    	; 0xade <nRF_write_register>
	return regval;
}
 db6:	8c 2f       	mov	r24, r28
 db8:	df 91       	pop	r29
 dba:	cf 91       	pop	r28
 dbc:	08 95       	ret

00000dbe <__divmodhi4>:
 dbe:	97 fb       	bst	r25, 7
 dc0:	07 2e       	mov	r0, r23
 dc2:	16 f4       	brtc	.+4      	; 0xdc8 <__divmodhi4+0xa>
 dc4:	00 94       	com	r0
 dc6:	06 d0       	rcall	.+12     	; 0xdd4 <__divmodhi4_neg1>
 dc8:	77 fd       	sbrc	r23, 7
 dca:	08 d0       	rcall	.+16     	; 0xddc <__divmodhi4_neg2>
 dcc:	33 d0       	rcall	.+102    	; 0xe34 <__udivmodhi4>
 dce:	07 fc       	sbrc	r0, 7
 dd0:	05 d0       	rcall	.+10     	; 0xddc <__divmodhi4_neg2>
 dd2:	3e f4       	brtc	.+14     	; 0xde2 <__divmodhi4_exit>

00000dd4 <__divmodhi4_neg1>:
 dd4:	90 95       	com	r25
 dd6:	81 95       	neg	r24
 dd8:	9f 4f       	sbci	r25, 0xFF	; 255
 dda:	08 95       	ret

00000ddc <__divmodhi4_neg2>:
 ddc:	70 95       	com	r23
 dde:	61 95       	neg	r22
 de0:	7f 4f       	sbci	r23, 0xFF	; 255

00000de2 <__divmodhi4_exit>:
 de2:	08 95       	ret

00000de4 <__divmodsi4>:
 de4:	05 2e       	mov	r0, r21
 de6:	97 fb       	bst	r25, 7
 de8:	16 f4       	brtc	.+4      	; 0xdee <__divmodsi4+0xa>
 dea:	00 94       	com	r0
 dec:	0f d0       	rcall	.+30     	; 0xe0c <__negsi2>
 dee:	57 fd       	sbrc	r21, 7
 df0:	05 d0       	rcall	.+10     	; 0xdfc <__divmodsi4_neg2>
 df2:	34 d0       	rcall	.+104    	; 0xe5c <__udivmodsi4>
 df4:	07 fc       	sbrc	r0, 7
 df6:	02 d0       	rcall	.+4      	; 0xdfc <__divmodsi4_neg2>
 df8:	46 f4       	brtc	.+16     	; 0xe0a <__divmodsi4_exit>
 dfa:	08 c0       	rjmp	.+16     	; 0xe0c <__negsi2>

00000dfc <__divmodsi4_neg2>:
 dfc:	50 95       	com	r21
 dfe:	40 95       	com	r20
 e00:	30 95       	com	r19
 e02:	21 95       	neg	r18
 e04:	3f 4f       	sbci	r19, 0xFF	; 255
 e06:	4f 4f       	sbci	r20, 0xFF	; 255
 e08:	5f 4f       	sbci	r21, 0xFF	; 255

00000e0a <__divmodsi4_exit>:
 e0a:	08 95       	ret

00000e0c <__negsi2>:
 e0c:	90 95       	com	r25
 e0e:	80 95       	com	r24
 e10:	70 95       	com	r23
 e12:	61 95       	neg	r22
 e14:	7f 4f       	sbci	r23, 0xFF	; 255
 e16:	8f 4f       	sbci	r24, 0xFF	; 255
 e18:	9f 4f       	sbci	r25, 0xFF	; 255
 e1a:	08 95       	ret

00000e1c <__umulhisi3>:
 e1c:	a2 9f       	mul	r26, r18
 e1e:	b0 01       	movw	r22, r0
 e20:	b3 9f       	mul	r27, r19
 e22:	c0 01       	movw	r24, r0
 e24:	a3 9f       	mul	r26, r19
 e26:	01 d0       	rcall	.+2      	; 0xe2a <__umulhisi3+0xe>
 e28:	b2 9f       	mul	r27, r18
 e2a:	70 0d       	add	r23, r0
 e2c:	81 1d       	adc	r24, r1
 e2e:	11 24       	eor	r1, r1
 e30:	91 1d       	adc	r25, r1
 e32:	08 95       	ret

00000e34 <__udivmodhi4>:
 e34:	aa 1b       	sub	r26, r26
 e36:	bb 1b       	sub	r27, r27
 e38:	51 e1       	ldi	r21, 0x11	; 17
 e3a:	07 c0       	rjmp	.+14     	; 0xe4a <__udivmodhi4_ep>

00000e3c <__udivmodhi4_loop>:
 e3c:	aa 1f       	adc	r26, r26
 e3e:	bb 1f       	adc	r27, r27
 e40:	a6 17       	cp	r26, r22
 e42:	b7 07       	cpc	r27, r23
 e44:	10 f0       	brcs	.+4      	; 0xe4a <__udivmodhi4_ep>
 e46:	a6 1b       	sub	r26, r22
 e48:	b7 0b       	sbc	r27, r23

00000e4a <__udivmodhi4_ep>:
 e4a:	88 1f       	adc	r24, r24
 e4c:	99 1f       	adc	r25, r25
 e4e:	5a 95       	dec	r21
 e50:	a9 f7       	brne	.-22     	; 0xe3c <__udivmodhi4_loop>
 e52:	80 95       	com	r24
 e54:	90 95       	com	r25
 e56:	bc 01       	movw	r22, r24
 e58:	cd 01       	movw	r24, r26
 e5a:	08 95       	ret

00000e5c <__udivmodsi4>:
 e5c:	a1 e2       	ldi	r26, 0x21	; 33
 e5e:	1a 2e       	mov	r1, r26
 e60:	aa 1b       	sub	r26, r26
 e62:	bb 1b       	sub	r27, r27
 e64:	fd 01       	movw	r30, r26
 e66:	0d c0       	rjmp	.+26     	; 0xe82 <__udivmodsi4_ep>

00000e68 <__udivmodsi4_loop>:
 e68:	aa 1f       	adc	r26, r26
 e6a:	bb 1f       	adc	r27, r27
 e6c:	ee 1f       	adc	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	a2 17       	cp	r26, r18
 e72:	b3 07       	cpc	r27, r19
 e74:	e4 07       	cpc	r30, r20
 e76:	f5 07       	cpc	r31, r21
 e78:	20 f0       	brcs	.+8      	; 0xe82 <__udivmodsi4_ep>
 e7a:	a2 1b       	sub	r26, r18
 e7c:	b3 0b       	sbc	r27, r19
 e7e:	e4 0b       	sbc	r30, r20
 e80:	f5 0b       	sbc	r31, r21

00000e82 <__udivmodsi4_ep>:
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	1a 94       	dec	r1
 e8c:	69 f7       	brne	.-38     	; 0xe68 <__udivmodsi4_loop>
 e8e:	60 95       	com	r22
 e90:	70 95       	com	r23
 e92:	80 95       	com	r24
 e94:	90 95       	com	r25
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	bd 01       	movw	r22, r26
 e9c:	cf 01       	movw	r24, r30
 e9e:	08 95       	ret

00000ea0 <memset>:
 ea0:	dc 01       	movw	r26, r24
 ea2:	01 c0       	rjmp	.+2      	; 0xea6 <memset+0x6>
 ea4:	6d 93       	st	X+, r22
 ea6:	41 50       	subi	r20, 0x01	; 1
 ea8:	50 40       	sbci	r21, 0x00	; 0
 eaa:	e0 f7       	brcc	.-8      	; 0xea4 <memset+0x4>
 eac:	08 95       	ret

00000eae <_exit>:
 eae:	f8 94       	cli

00000eb0 <__stop_program>:
 eb0:	ff cf       	rjmp	.-2      	; 0xeb0 <__stop_program>
