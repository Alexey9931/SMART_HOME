
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001b34  00001bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000146  0080008c  0080008c  00001bf4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003257  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f03  00000000  00000000  00005113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a79  00000000  00000000  00006016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  00007a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002015  00000000  00000000  00008ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000aad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	1e c7       	rjmp	.+3644   	; 0xe40 <__vector_1>
       4:	bf c2       	rjmp	.+1406   	; 0x584 <__vector_2>
       6:	79 c1       	rjmp	.+754    	; 0x2fa <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	1c c3       	rjmp	.+1592   	; 0x650 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e3       	ldi	r30, 0x34	; 52
      3a:	fb e1       	ldi	r31, 0x1B	; 27
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 38       	cpi	r26, 0x8C	; 140
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	ac e8       	ldi	r26, 0x8C	; 140
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a2 3d       	cpi	r26, 0xD2	; 210
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	6b d3       	rcall	.+1750   	; 0x730 <main>
      5a:	6a cd       	rjmp	.-1324   	; 0xfffffb30 <__eeprom_end+0xff7efb30>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t work_mode;

void gas_boiler_controller(void)
{
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	46 c0       	rjmp	.+140    	; 0xf2 <gas_boiler_controller+0x94>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
      66:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <home_temp_rx_integer>
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	9c 01       	movw	r18, r24
      6e:	22 0f       	add	r18, r18
      70:	33 1f       	adc	r19, r19
      72:	88 0f       	add	r24, r24
      74:	99 1f       	adc	r25, r25
      76:	88 0f       	add	r24, r24
      78:	99 1f       	adc	r25, r25
      7a:	88 0f       	add	r24, r24
      7c:	99 1f       	adc	r25, r25
      7e:	28 0f       	add	r18, r24
      80:	39 1f       	adc	r19, r25
      82:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
      86:	28 0f       	add	r18, r24
      88:	31 1d       	adc	r19, r1
      8a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	ac 01       	movw	r20, r24
      92:	44 0f       	add	r20, r20
      94:	55 1f       	adc	r21, r21
      96:	88 0f       	add	r24, r24
      98:	99 1f       	adc	r25, r25
      9a:	88 0f       	add	r24, r24
      9c:	99 1f       	adc	r25, r25
      9e:	88 0f       	add	r24, r24
      a0:	99 1f       	adc	r25, r25
      a2:	84 0f       	add	r24, r20
      a4:	95 1f       	adc	r25, r21
      a6:	40 91 cd 01 	lds	r20, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
      aa:	84 0f       	add	r24, r20
      ac:	91 1d       	adc	r25, r1
      ae:	28 17       	cp	r18, r24
      b0:	39 07       	cpc	r19, r25
      b2:	7c f4       	brge	.+30     	; 0xd2 <gas_boiler_controller+0x74>
		{
			gas_boiler_enable_flag = 1;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	88 bb       	out	0x18, r24	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      c0:	82 b3       	in	r24, 0x12	; 18
      c2:	80 61       	ori	r24, 0x10	; 16
      c4:	82 bb       	out	0x12, r24	; 18
			EEPROM_write(5, gas_boiler_enable_flag);
      c6:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
      ca:	85 e0       	ldi	r24, 0x05	; 5
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	f4 d0       	rcall	.+488    	; 0x2b8 <EEPROM_write>
      d0:	08 95       	ret
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
      d2:	28 17       	cp	r18, r24
      d4:	39 07       	cpc	r19, r25
      d6:	6c f0       	brlt	.+26     	; 0xf2 <gas_boiler_controller+0x94>
		{
			gas_boiler_enable_flag = 0;
      d8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      dc:	88 b3       	in	r24, 0x18	; 24
      de:	81 60       	ori	r24, 0x01	; 1
      e0:	88 bb       	out	0x18, r24	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      e2:	82 b3       	in	r24, 0x12	; 18
      e4:	8f 7e       	andi	r24, 0xEF	; 239
      e6:	82 bb       	out	0x12, r24	; 18
			EEPROM_write(5, gas_boiler_enable_flag);
      e8:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
      ec:	85 e0       	ldi	r24, 0x05	; 5
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	e3 d0       	rcall	.+454    	; 0x2b8 <EEPROM_write>
      f2:	08 95       	ret

000000f4 <dt_testdevice>:
  return tt;
}
//функция определения датчика на шине
char dt_testdevice(void) //dt — digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      f4:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывания
      f6:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
      f8:	81 b3       	in	r24, 0x11	; 17
      fa:	80 68       	ori	r24, 0x80	; 128
      fc:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	e3 e9       	ldi	r30, 0x93	; 147
     100:	f7 e0       	ldi	r31, 0x07	; 7
     102:	31 97       	sbiw	r30, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <dt_testdevice+0xe>
     106:	00 c0       	rjmp	.+0      	; 0x108 <dt_testdevice+0x14>
     108:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     10a:	81 b3       	in	r24, 0x11	; 17
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	81 bb       	out	0x11, r24	; 17
     110:	e3 e0       	ldi	r30, 0x03	; 3
     112:	f1 e0       	ldi	r31, 0x01	; 1
     114:	31 97       	sbiw	r30, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <dt_testdevice+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <dt_testdevice+0x26>
     11a:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
     11c:	87 99       	sbic	0x10, 7	; 16
     11e:	02 c0       	rjmp	.+4      	; 0x124 <dt_testdevice+0x30>
  {
	  dt=1;//устройство есть
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <dt_testdevice+0x32>
  }
  else dt=0;//устройства нет
     124:	80 e0       	ldi	r24, 0x00	; 0
  SREG = stektemp;// вернем значение стека
     126:	9f bf       	out	0x3f, r25	; 63
     128:	ef e8       	ldi	r30, 0x8F	; 143
     12a:	f6 e0       	ldi	r31, 0x06	; 6
     12c:	31 97       	sbiw	r30, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <dt_testdevice+0x38>
     130:	00 c0       	rjmp	.+0      	; 0x132 <dt_testdevice+0x3e>
     132:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
     134:	08 95       	ret

00000136 <dt_readbit>:
	return c;
}
//функция чтения бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
     136:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
     138:	f8 94       	cli
  char bt; //переменная хранения бита
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     13a:	81 b3       	in	r24, 0x11	; 17
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	81 bb       	out	0x11, r24	; 17
     140:	2a e0       	ldi	r18, 0x0A	; 10
     142:	2a 95       	dec	r18
     144:	f1 f7       	brne	.-4      	; 0x142 <dt_readbit+0xc>
     146:	00 c0       	rjmp	.+0      	; 0x148 <dt_readbit+0x12>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     148:	81 b3       	in	r24, 0x11	; 17
     14a:	8f 77       	andi	r24, 0x7F	; 127
     14c:	81 bb       	out	0x11, r24	; 17
     14e:	85 e4       	ldi	r24, 0x45	; 69
     150:	8a 95       	dec	r24
     152:	f1 f7       	brne	.-4      	; 0x150 <dt_readbit+0x1a>
     154:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     156:	80 b3       	in	r24, 0x10	; 16
     158:	88 1f       	adc	r24, r24
     15a:	88 27       	eor	r24, r24
     15c:	88 1f       	adc	r24, r24
     15e:	20 ef       	ldi	r18, 0xF0	; 240
     160:	2a 95       	dec	r18
     162:	f1 f7       	brne	.-4      	; 0x160 <dt_readbit+0x2a>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     164:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     166:	08 95       	ret

00000168 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
     16c:	c0 e0       	ldi	r28, 0x00	; 0
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
     16e:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
     170:	0a c0       	rjmp	.+20     	; 0x186 <dt_readbyte+0x1e>
	{
	  c|=dt_readbit()<<i; //читаем бит
     172:	e1 df       	rcall	.-62     	; 0x136 <dt_readbit>
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0c 2e       	mov	r0, r28
     178:	02 c0       	rjmp	.+4      	; 0x17e <dt_readbyte+0x16>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <dt_readbyte+0x12>
     182:	d8 2b       	or	r29, r24
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     184:	cf 5f       	subi	r28, 0xFF	; 255
     186:	c8 30       	cpi	r28, 0x08	; 8
     188:	a0 f3       	brcs	.-24     	; 0x172 <dt_readbyte+0xa>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     18a:	8d 2f       	mov	r24, r29
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <dt_sendbit>:
	}
}
//функция записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     192:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
     194:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     196:	91 b3       	in	r25, 0x11	; 17
     198:	90 68       	ori	r25, 0x80	; 128
     19a:	91 bb       	out	0x11, r25	; 17
     19c:	9a e0       	ldi	r25, 0x0A	; 10
     19e:	9a 95       	dec	r25
     1a0:	f1 f7       	brne	.-4      	; 0x19e <dt_sendbit+0xc>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     1a4:	88 23       	and	r24, r24
     1a6:	19 f0       	breq	.+6      	; 0x1ae <dt_sendbit+0x1c>
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     1a8:	81 b3       	in	r24, 0x11	; 17
     1aa:	8f 77       	andi	r24, 0x7F	; 127
     1ac:	81 bb       	out	0x11, r24	; 17
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <dt_sendbit+0x20>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <dt_sendbit+0x26>
     1b8:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     1ba:	81 b3       	in	r24, 0x11	; 17
     1bc:	8f 77       	andi	r24, 0x7F	; 127
     1be:	81 bb       	out	0x11, r24	; 17
	SREG = stektemp;// вернем значение стека
     1c0:	2f bf       	out	0x3f, r18	; 63
     1c2:	08 95       	ret

000001c4 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1ca:	c0 e0       	ldi	r28, 0x00	; 0
     1cc:	15 c0       	rjmp	.+42     	; 0x1f8 <dt_sendbyte+0x34>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0c 2e       	mov	r0, r28
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <dt_sendbyte+0x16>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	0a 94       	dec	r0
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <dt_sendbyte+0x12>
     1de:	2d 2f       	mov	r18, r29
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	28 23       	and	r18, r24
     1e4:	39 23       	and	r19, r25
     1e6:	82 17       	cp	r24, r18
     1e8:	93 07       	cpc	r25, r19
     1ea:	19 f4       	brne	.+6      	; 0x1f2 <dt_sendbyte+0x2e>
		dt_sendbit(1);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	d1 df       	rcall	.-94     	; 0x192 <dt_sendbit>
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <dt_sendbyte+0x32>
		else //посылаем 0
		dt_sendbit(0);
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	ce df       	rcall	.-100    	; 0x192 <dt_sendbit>
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1f6:	cf 5f       	subi	r28, 0xFF	; 255
     1f8:	c8 30       	cpi	r28, 0x08	; 8
     1fa:	48 f3       	brcs	.-46     	; 0x1ce <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
     202:	cf 93       	push	r28
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     204:	77 df       	rcall	.-274    	; 0xf4 <dt_testdevice>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	d1 f4       	brne	.+52     	; 0x23e <dt_check+0x3c>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     20a:	8c ec       	ldi	r24, 0xCC	; 204
     20c:	db df       	rcall	.-74     	; 0x1c4 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измеряем температуру
     20e:	84 e4       	ldi	r24, 0x44	; 68
     210:	d9 df       	rcall	.-78     	; 0x1c4 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	2f ef       	ldi	r18, 0xFF	; 255
     214:	8d e2       	ldi	r24, 0x2D	; 45
     216:	99 e0       	ldi	r25, 0x09	; 9
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	80 40       	sbci	r24, 0x00	; 0
     21c:	90 40       	sbci	r25, 0x00	; 0
     21e:	e1 f7       	brne	.-8      	; 0x218 <dt_check+0x16>
     220:	00 c0       	rjmp	.+0      	; 0x222 <dt_check+0x20>
     222:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразования — 188 милисекунд
   dt_testdevice(); //снова используем те же манипуляции с шиной что и при проверке ее присутствия
     224:	67 df       	rcall	.-306    	; 0xf4 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     226:	8c ec       	ldi	r24, 0xCC	; 204
     228:	cd df       	rcall	.-102    	; 0x1c4 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     22a:	8e eb       	ldi	r24, 0xBE	; 190
     22c:	cb df       	rcall	.-106    	; 0x1c4 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     22e:	9c df       	rcall	.-200    	; 0x168 <dt_readbyte>
     230:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     232:	9a df       	rcall	.-204    	; 0x168 <dt_readbyte>
     234:	90 e0       	ldi	r25, 0x00	; 0
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     236:	98 2f       	mov	r25, r24
     238:	88 27       	eor	r24, r24
     23a:	8c 2b       	or	r24, r28
     23c:	02 c0       	rjmp	.+4      	; 0x242 <dt_check+0x40>
}
//функция преобразования показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     246:	dd df       	rcall	.-70     	; 0x202 <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
     248:	29 2f       	mov	r18, r25
     24a:	25 95       	asr	r18
     24c:	25 95       	asr	r18
     24e:	25 95       	asr	r18
	uint8_t temp_integer;//целая часть темп
	uint8_t temp_fraction;//дробная часть темп
	if (temp_sign == 0x00)
     250:	c1 f4       	brne	.+48     	; 0x282 <DS18b0_find_temp+0x3c>
	{
		home_temp_own_fraction = tt & 0xF;
     252:	28 2f       	mov	r18, r24
     254:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
     256:	32 2f       	mov	r19, r18
     258:	33 0f       	add	r19, r19
     25a:	22 0f       	add	r18, r18
     25c:	22 0f       	add	r18, r18
     25e:	22 0f       	add	r18, r18
     260:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     262:	22 95       	swap	r18
     264:	2f 70       	andi	r18, 0x0F	; 15
     266:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <home_temp_own_fraction>
		home_temp_own_integer = (tt&0x07FF)>>4;
     26a:	97 70       	andi	r25, 0x07	; 7
     26c:	95 95       	asr	r25
     26e:	87 95       	ror	r24
     270:	95 95       	asr	r25
     272:	87 95       	ror	r24
     274:	95 95       	asr	r25
     276:	87 95       	ror	r24
     278:	95 95       	asr	r25
     27a:	87 95       	ror	r24
     27c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <home_temp_own_integer>
     280:	08 95       	ret
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     282:	28 2f       	mov	r18, r24
     284:	20 95       	com	r18
     286:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// ”множаем на 10
     288:	32 2f       	mov	r19, r18
     28a:	33 0f       	add	r19, r19
     28c:	22 0f       	add	r18, r18
     28e:	22 0f       	add	r18, r18
     290:	22 0f       	add	r18, r18
     292:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     294:	22 95       	swap	r18
     296:	2f 70       	andi	r18, 0x0F	; 15
     298:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     29c:	80 95       	com	r24
     29e:	90 95       	com	r25
     2a0:	97 70       	andi	r25, 0x07	; 7
     2a2:	95 95       	asr	r25
     2a4:	87 95       	ror	r24
     2a6:	95 95       	asr	r25
     2a8:	87 95       	ror	r24
     2aa:	95 95       	asr	r25
     2ac:	87 95       	ror	r24
     2ae:	95 95       	asr	r25
     2b0:	87 95       	ror	r24
     2b2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <home_temp_own_integer>
     2b6:	08 95       	ret

000002b8 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождения флага окончания последней операцией с памятью
     2b8:	e1 99       	sbic	0x1c, 1	; 28
     2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <EEPROM_write>
	{}
	EEAR = uiAddress; //Устанавливаем адрес
     2bc:	9f bb       	out	0x1f, r25	; 31
     2be:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //Пищем данные в регистр
     2c0:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //Разрешаем запись
     2c2:	8c b3       	in	r24, 0x1c	; 28
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE); //Пишем байт в память
     2c8:	8c b3       	in	r24, 0x1c	; 28
     2ca:	82 60       	ori	r24, 0x02	; 2
     2cc:	8c bb       	out	0x1c, r24	; 28
     2ce:	08 95       	ret

000002d0 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     2d0:	e1 99       	sbic	0x1c, 1	; 28
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
     2d4:	9f bb       	out	0x1f, r25	; 31
     2d6:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
     2d8:	8c b3       	in	r24, 0x1c	; 28
     2da:	81 60       	ori	r24, 0x01	; 1
     2dc:	8c bb       	out	0x1c, r24	; 28
	return EEDR; //Возвращаем результат
     2de:	8d b3       	in	r24, 0x1d	; 29
}
     2e0:	08 95       	ret

000002e2 <timer2_ini>:
char DATA_TO_UART[80] = {0};

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим СТС (сброс по совпадению)
     2e2:	85 b5       	in	r24, 0x25	; 37
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     2e8:	89 b7       	in	r24, 0x39	; 57
     2ea:	80 68       	ori	r24, 0x80	; 128
     2ec:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число для сравнения 200
     2ee:	88 ec       	ldi	r24, 0xC8	; 200
     2f0:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     2f2:	85 b5       	in	r24, 0x25	; 37
     2f4:	82 60       	ori	r24, 0x02	; 2
     2f6:	85 bd       	out	0x25, r24	; 37
     2f8:	08 95       	ret

000002fa <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	ef 93       	push	r30
     31a:	ff 93       	push	r31
	if(OK_BUTTON_FLAG == 1)
     31c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <OK_BUTTON_FLAG>
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	09 f0       	breq	.+2      	; 0x326 <__vector_3+0x2c>
     324:	93 c0       	rjmp	.+294    	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     326:	9a 99       	sbic	0x13, 2	; 19
     328:	45 c0       	rjmp	.+138    	; 0x3b4 <__vector_3+0xba>
     32a:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <UP_BUTTON_FLAG>
     32e:	81 11       	cpse	r24, r1
     330:	41 c0       	rjmp	.+130    	; 0x3b4 <__vector_3+0xba>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     332:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	ac 01       	movw	r20, r24
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	48 0f       	add	r20, r24
     34c:	59 1f       	adc	r21, r25
     34e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     352:	48 0f       	add	r20, r24
     354:	51 1d       	adc	r21, r1
			temp_setpoint += 5;
     356:	4b 5f       	subi	r20, 0xFB	; 251
     358:	5f 4f       	sbci	r21, 0xFF	; 255
     35a:	50 93 fe 00 	sts	0x00FE, r21	; 0x8000fe <temp_setpoint+0x1>
     35e:	40 93 fd 00 	sts	0x00FD, r20	; 0x8000fd <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     362:	9a 01       	movw	r18, r20
     364:	ad ec       	ldi	r26, 0xCD	; 205
     366:	bc ec       	ldi	r27, 0xCC	; 204
     368:	9f d8       	rcall	.-3778   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     37a:	bc 01       	movw	r22, r24
     37c:	66 0f       	add	r22, r22
     37e:	77 1f       	adc	r23, r23
     380:	9c 01       	movw	r18, r24
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	22 0f       	add	r18, r18
     388:	33 1f       	adc	r19, r19
     38a:	22 0f       	add	r18, r18
     38c:	33 1f       	adc	r19, r19
     38e:	26 0f       	add	r18, r22
     390:	37 1f       	adc	r19, r23
     392:	42 1b       	sub	r20, r18
     394:	53 0b       	sbc	r21, r19
     396:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <temp_setpoint_fraction>
			UP_BUTTON_FLAG = 1;
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <UP_BUTTON_FLAG>
			EEPROM_write(1, temp_setpoint_integer);
     3a0:	68 2f       	mov	r22, r24
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	88 df       	rcall	.-240    	; 0x2b8 <EEPROM_write>
			EEPROM_write(2, temp_setpoint_fraction);
     3a8:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	83 df       	rcall	.-250    	; 0x2b8 <EEPROM_write>
     3b2:	46 c0       	rjmp	.+140    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     3b4:	9b 99       	sbic	0x13, 3	; 19
     3b6:	44 c0       	rjmp	.+136    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
     3b8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <DOWN_BUTTON_FLAG>
     3bc:	81 11       	cpse	r24, r1
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     3c0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	ac 01       	movw	r20, r24
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	48 0f       	add	r20, r24
     3da:	59 1f       	adc	r21, r25
     3dc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     3e0:	48 0f       	add	r20, r24
     3e2:	51 1d       	adc	r21, r1
			temp_setpoint -= 5;
     3e4:	45 50       	subi	r20, 0x05	; 5
     3e6:	51 09       	sbc	r21, r1
     3e8:	50 93 fe 00 	sts	0x00FE, r21	; 0x8000fe <temp_setpoint+0x1>
     3ec:	40 93 fd 00 	sts	0x00FD, r20	; 0x8000fd <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     3f0:	9a 01       	movw	r18, r20
     3f2:	ad ec       	ldi	r26, 0xCD	; 205
     3f4:	bc ec       	ldi	r27, 0xCC	; 204
     3f6:	58 d8       	rcall	.-3920   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
     3f8:	96 95       	lsr	r25
     3fa:	87 95       	ror	r24
     3fc:	96 95       	lsr	r25
     3fe:	87 95       	ror	r24
     400:	96 95       	lsr	r25
     402:	87 95       	ror	r24
     404:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     408:	bc 01       	movw	r22, r24
     40a:	66 0f       	add	r22, r22
     40c:	77 1f       	adc	r23, r23
     40e:	9c 01       	movw	r18, r24
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	22 0f       	add	r18, r18
     416:	33 1f       	adc	r19, r19
     418:	22 0f       	add	r18, r18
     41a:	33 1f       	adc	r19, r19
     41c:	26 0f       	add	r18, r22
     41e:	37 1f       	adc	r19, r23
     420:	42 1b       	sub	r20, r18
     422:	53 0b       	sbc	r21, r19
     424:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <temp_setpoint_fraction>
			DOWN_BUTTON_FLAG = 1;
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <DOWN_BUTTON_FLAG>
		    EEPROM_write(1, temp_setpoint_integer);
     42e:	68 2f       	mov	r22, r24
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	41 df       	rcall	.-382    	; 0x2b8 <EEPROM_write>
			EEPROM_write(2, temp_setpoint_fraction);
     436:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	3c df       	rcall	.-392    	; 0x2b8 <EEPROM_write>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     440:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     442:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     446:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     448:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <DOWN_BUTTON_FLAG>
		}
	}
}
     44c:	ff 91       	pop	r31
     44e:	ef 91       	pop	r30
     450:	bf 91       	pop	r27
     452:	af 91       	pop	r26
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	7f 91       	pop	r23
     45a:	6f 91       	pop	r22
     45c:	5f 91       	pop	r21
     45e:	4f 91       	pop	r20
     460:	3f 91       	pop	r19
     462:	2f 91       	pop	r18
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     46e:	8e b5       	in	r24, 0x2e	; 46
     470:	88 60       	ori	r24, 0x08	; 8
     472:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     474:	89 b7       	in	r24, 0x39	; 57
     476:	80 61       	ori	r24, 0x10	; 16
     478:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число для сравнения 2000
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     47e:	80 ed       	ldi	r24, 0xD0	; 208
     480:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     482:	8e b5       	in	r24, 0x2e	; 46
     484:	82 60       	ori	r24, 0x02	; 2
     486:	8e bd       	out	0x2e, r24	; 46
     488:	08 95       	ret

0000048a <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	4f 93       	push	r20
     49a:	5f 93       	push	r21
     49c:	6f 93       	push	r22
     49e:	7f 93       	push	r23
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	ef 93       	push	r30
     4ae:	ff 93       	push	r31
	millis++;
     4b0:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <millis>
     4b4:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <millis+0x1>
     4b8:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <millis+0x2>
     4bc:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <millis+0x3>
     4c0:	bc 01       	movw	r22, r24
     4c2:	cd 01       	movw	r24, r26
     4c4:	6f 5f       	subi	r22, 0xFF	; 255
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	8f 4f       	sbci	r24, 0xFF	; 255
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	60 93 e5 00 	sts	0x00E5, r22	; 0x8000e5 <millis>
     4d0:	70 93 e6 00 	sts	0x00E6, r23	; 0x8000e6 <millis+0x1>
     4d4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <millis+0x2>
     4d8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <millis+0x3>
	{
		millis = 0;
		millis_hometemp_update = 0;
	}
	//каждые 10 сек работает контроллер и отправка актуальных данных в БД
	if ((millis % 10000)==0)
     4dc:	20 e1       	ldi	r18, 0x10	; 16
     4de:	37 e2       	ldi	r19, 0x27	; 39
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	c5 d7       	rcall	.+3978   	; 0x1470 <__divmodsi4>
     4e6:	67 2b       	or	r22, r23
     4e8:	68 2b       	or	r22, r24
     4ea:	69 2b       	or	r22, r25
     4ec:	c1 f5       	brne	.+112    	; 0x55e <__vector_6+0xd4>
	{
		gas_boiler_controller();
     4ee:	b7 dd       	rcall	.-1170   	; 0x5e <gas_boiler_controller>
		//отправляем в БД данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     4f0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <work_mode>
     4f4:	1f 92       	push	r1
     4f6:	8f 93       	push	r24
     4f8:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     4fc:	1f 92       	push	r1
     4fe:	8f 93       	push	r24
     500:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     504:	1f 92       	push	r1
     506:	8f 93       	push	r24
     508:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     50c:	1f 92       	push	r1
     50e:	8f 93       	push	r24
     510:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <home_temp_rx_integer>
     514:	1f 92       	push	r1
     516:	8f 93       	push	r24
     518:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
     51c:	1f 92       	push	r1
     51e:	8f 93       	push	r24
     520:	86 e6       	ldi	r24, 0x66	; 102
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	ce e8       	ldi	r28, 0x8E	; 142
     52a:	d0 e0       	ldi	r29, 0x00	; 0
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	27 d8       	rcall	.-4018   	; 0xfffff580 <__eeprom_end+0xff7ef580>
		USART_Transmit(DATA_TO_UART);
     532:	ce 01       	movw	r24, r28
     534:	72 d7       	rcall	.+3812   	; 0x141a <USART_Transmit>
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     536:	09 90       	ld	r0, Y+
     538:	00 20       	and	r0, r0
     53a:	e9 f7       	brne	.-6      	; 0x536 <__vector_6+0xac>
     53c:	21 97       	sbiw	r28, 0x01	; 1
     53e:	ae 01       	movw	r20, r28
     540:	4e 58       	subi	r20, 0x8E	; 142
     542:	50 40       	sbci	r21, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	8e e8       	ldi	r24, 0x8E	; 142
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	f8 d7       	rcall	.+4080   	; 0x153e <memset>
     54e:	8d b7       	in	r24, 0x3d	; 61
     550:	9e b7       	in	r25, 0x3e	; 62
     552:	40 96       	adiw	r24, 0x10	; 16
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	9e bf       	out	0x3e, r25	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	8d bf       	out	0x3d, r24	; 61
	}
}
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	8f 93       	push	r24
	if (OK_BUTTON_FLAG == 1) OK_BUTTON_FLAG = 0;
     590:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <OK_BUTTON_FLAG>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	19 f4       	brne	.+6      	; 0x59e <__vector_2+0x1a>
     598:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <OK_BUTTON_FLAG>
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__vector_2+0x20>
	else OK_BUTTON_FLAG = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <OK_BUTTON_FLAG>
}
     5a4:	8f 91       	pop	r24
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <SPI_init>:
SPI_init(void) //инициализация SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     5b0:	87 b3       	in	r24, 0x17	; 23
     5b2:	8e 62       	ori	r24, 0x2E	; 46
     5b4:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     5b6:	88 b3       	in	r24, 0x18	; 24
     5b8:	83 7d       	andi	r24, 0xD3	; 211
     5ba:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     5bc:	88 b3       	in	r24, 0x18	; 24
     5be:	84 60       	ori	r24, 0x04	; 4
     5c0:	88 bb       	out	0x18, r24	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ¤вим ведущим
     5c2:	8d b1       	in	r24, 0x0d	; 13
     5c4:	80 65       	ori	r24, 0x50	; 80
     5c6:	8d b9       	out	0x0d, r24	; 13
}
     5c8:	08 95       	ret

000005ca <port_init>:
port_init(void)
{
	//инициализация ножки IRQ для внеш прерывания
	DDRD &= ~(1<<IRQ);
     5ca:	81 b3       	in	r24, 0x11	; 17
     5cc:	8b 7f       	andi	r24, 0xFB	; 251
     5ce:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<IRQ);
     5d0:	82 b3       	in	r24, 0x12	; 18
     5d2:	84 60       	ori	r24, 0x04	; 4
     5d4:	82 bb       	out	0x12, r24	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     5d6:	81 b3       	in	r24, 0x11	; 17
     5d8:	80 64       	ori	r24, 0x40	; 64
     5da:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_TX);
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	8f 7b       	andi	r24, 0xBF	; 191
     5e0:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     5e2:	81 b3       	in	r24, 0x11	; 17
     5e4:	80 62       	ori	r24, 0x20	; 32
     5e6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_RX);
     5e8:	82 b3       	in	r24, 0x12	; 18
     5ea:	8f 7d       	andi	r24, 0xDF	; 223
     5ec:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     5ee:	81 b3       	in	r24, 0x11	; 17
     5f0:	80 61       	ori	r24, 0x10	; 16
     5f2:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     5f4:	82 b3       	in	r24, 0x12	; 18
     5f6:	8f 7e       	andi	r24, 0xEF	; 239
     5f8:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     5fa:	84 b3       	in	r24, 0x14	; 20
     5fc:	82 60       	ori	r24, 0x02	; 2
     5fe:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<LED_WIFI);
     600:	85 b3       	in	r24, 0x15	; 21
     602:	8d 7f       	andi	r24, 0xFD	; 253
     604:	85 bb       	out	0x15, r24	; 21
	//инициализация мосфета
	DDRB |= (1<<MOSFET);
     606:	87 b3       	in	r24, 0x17	; 23
     608:	81 60       	ori	r24, 0x01	; 1
     60a:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<MOSFET);
     60c:	88 b3       	in	r24, 0x18	; 24
     60e:	8e 7f       	andi	r24, 0xFE	; 254
     610:	88 bb       	out	0x18, r24	; 24
	//инициализация индикатора
	DDRC |= (1<<MAX7219_SS);
     612:	84 b3       	in	r24, 0x14	; 20
     614:	81 60       	ori	r24, 0x01	; 1
     616:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<MAX7219_SS);
     618:	85 b3       	in	r24, 0x15	; 21
     61a:	81 60       	ori	r24, 0x01	; 1
     61c:	85 bb       	out	0x15, r24	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     61e:	81 b3       	in	r24, 0x11	; 17
     620:	87 7f       	andi	r24, 0xF7	; 247
     622:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<BUTTON_OK);
     624:	82 b3       	in	r24, 0x12	; 18
     626:	88 60       	ori	r24, 0x08	; 8
     628:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~(1<<BUTTON_UP);
     62a:	84 b3       	in	r24, 0x14	; 20
     62c:	8b 7f       	andi	r24, 0xFB	; 251
     62e:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_UP);
     630:	85 b3       	in	r24, 0x15	; 21
     632:	84 60       	ori	r24, 0x04	; 4
     634:	85 bb       	out	0x15, r24	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     636:	84 b3       	in	r24, 0x14	; 20
     638:	87 7f       	andi	r24, 0xF7	; 247
     63a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_DOWN);
     63c:	85 b3       	in	r24, 0x15	; 21
     63e:	88 60       	ori	r24, 0x08	; 8
     640:	85 bb       	out	0x15, r24	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     642:	81 b3       	in	r24, 0x11	; 17
     644:	8f 77       	andi	r24, 0x7F	; 127
     646:	81 bb       	out	0x11, r24	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     648:	82 b3       	in	r24, 0x12	; 18
     64a:	8f 77       	andi	r24, 0x7F	; 127
     64c:	82 bb       	out	0x12, r24	; 18
}
     64e:	08 95       	ret

00000650 <__vector_11>:
//обработчик прерывания по UART
int uart_rx_count = 0;
char uart_rx_buffer[100];
char uart_message[100];
ISR(USART_RXC_vect)
{
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
	uart_rx_buffer[uart_rx_count] = UDR;
     676:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
     67a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__data_end+0x1>
     67e:	2c b1       	in	r18, 0x0c	; 12
     680:	fc 01       	movw	r30, r24
     682:	e9 59       	subi	r30, 0x99	; 153
     684:	fe 4f       	sbci	r31, 0xFE	; 254
     686:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     688:	2f 32       	cpi	r18, 0x2F	; 47
     68a:	a9 f5       	brne	.+106    	; 0x6f6 <__vector_11+0xa6>
	{
		memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     68c:	c7 e6       	ldi	r28, 0x67	; 103
     68e:	d1 e0       	ldi	r29, 0x01	; 1
     690:	fe 01       	movw	r30, r28
     692:	01 90       	ld	r0, Z+
     694:	00 20       	and	r0, r0
     696:	e9 f7       	brne	.-6      	; 0x692 <__vector_11+0x42>
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	af 01       	movw	r20, r30
     69c:	47 56       	subi	r20, 0x67	; 103
     69e:	51 40       	sbci	r21, 0x01	; 1
     6a0:	41 50       	subi	r20, 0x01	; 1
     6a2:	51 09       	sbc	r21, r1
     6a4:	be 01       	movw	r22, r28
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	40 d7       	rcall	.+3712   	; 0x152c <memcpy>
		memset(uart_rx_buffer,'\0',strlen(uart_rx_buffer));
     6ac:	fe 01       	movw	r30, r28
     6ae:	01 90       	ld	r0, Z+
     6b0:	00 20       	and	r0, r0
     6b2:	e9 f7       	brne	.-6      	; 0x6ae <__vector_11+0x5e>
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	af 01       	movw	r20, r30
     6b8:	47 56       	subi	r20, 0x67	; 103
     6ba:	51 40       	sbci	r21, 0x01	; 1
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ce 01       	movw	r24, r28
     6c2:	3d d7       	rcall	.+3706   	; 0x153e <memset>
		uart_rx_count = 0;
     6c4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__data_end+0x1>
     6c8:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
		//Получение данные о wifi по uart
		if (strstr(uart_message,"WiFi-OK")!=0)
     6cc:	69 e7       	ldi	r22, 0x79	; 121
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	3b d7       	rcall	.+3702   	; 0x154c <strstr>
     6d6:	89 2b       	or	r24, r25
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <__vector_11+0x90>
		{
			PORTC |= (1<<LED_WIFI);
     6da:	85 b3       	in	r24, 0x15	; 21
     6dc:	82 60       	ori	r24, 0x02	; 2
     6de:	85 bb       	out	0x15, r24	; 21
		}
		if (strstr(uart_message,"WiFi-ERROR")!=0)
     6e0:	61 e8       	ldi	r22, 0x81	; 129
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	31 d7       	rcall	.+3682   	; 0x154c <strstr>
     6ea:	89 2b       	or	r24, r25
     6ec:	49 f0       	breq	.+18     	; 0x700 <__vector_11+0xb0>
		{
			PORTC &= ~(1<<LED_WIFI);
     6ee:	85 b3       	in	r24, 0x15	; 21
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	85 bb       	out	0x15, r24	; 21
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <__vector_11+0xb0>
		}
	}
	else
	{
		uart_rx_count++;
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__data_end+0x1>
     6fc:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	}
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // Передаёт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     726:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     728:	77 9b       	sbis	0x0e, 7	; 14
     72a:	fe cf       	rjmp	.-4      	; 0x728 <spi_send_recv+0x2>
	return SPDR;
     72c:	8f b1       	in	r24, 0x0f	; 15
}
     72e:	08 95       	ret

00000730 <main>:
     730:	2f ef       	ldi	r18, 0xFF	; 255
     732:	83 ed       	ldi	r24, 0xD3	; 211
     734:	90 e3       	ldi	r25, 0x30	; 48
     736:	21 50       	subi	r18, 0x01	; 1
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	90 40       	sbci	r25, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x6>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x10>
     740:	00 00       	nop
int main(void)
{
	_delay_ms(1000);
	int k = 0;
	uint8_t data[5] = {0};
	port_init();
     742:	43 df       	rcall	.-378    	; 0x5ca <port_init>
	PORTD |= (1<<LED_TX);
     744:	82 b3       	in	r24, 0x12	; 18
     746:	80 64       	ori	r24, 0x40	; 64
     748:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_RX);
     74a:	82 b3       	in	r24, 0x12	; 18
     74c:	80 62       	ori	r24, 0x20	; 32
     74e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     750:	82 b3       	in	r24, 0x12	; 18
     752:	80 61       	ori	r24, 0x10	; 16
     754:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<LED_WIFI);
     756:	85 b3       	in	r24, 0x15	; 21
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	85 bb       	out	0x15, r24	; 21
	SPI_init();
     75c:	29 df       	rcall	.-430    	; 0x5b0 <SPI_init>
	USART_Init(16);    //Инициализация модуля USART скорость 115200	
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	4c d6       	rcall	.+3224   	; 0x13fc <USART_Init>
    NRF24_ini();
     764:	c5 d5       	rcall	.+2954   	; 0x12f0 <NRF24_ini>
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	81 ee       	ldi	r24, 0xE1	; 225
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	80 40       	sbci	r24, 0x00	; 0
     770:	90 40       	sbci	r25, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <main+0x3c>
     774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x46>
     776:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     778:	ad d1       	rcall	.+858    	; 0xad4 <MAX7219_init>
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	83 ed       	ldi	r24, 0xD3	; 211
     77e:	90 e3       	ldi	r25, 0x30	; 48
     780:	21 50       	subi	r18, 0x01	; 1
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	90 40       	sbci	r25, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <main+0x50>
     788:	00 c0       	rjmp	.+0      	; 0x78a <main+0x5a>
     78a:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывания
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     78c:	85 b7       	in	r24, 0x35	; 53
     78e:	8a 60       	ori	r24, 0x0A	; 10
     790:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     792:	8b b7       	in	r24, 0x3b	; 59
     794:	80 6c       	ori	r24, 0xC0	; 192
     796:	8b bf       	out	0x3b, r24	; 59
     798:	2f ef       	ldi	r18, 0xFF	; 255
     79a:	87 ea       	ldi	r24, 0xA7	; 167
     79c:	91 e6       	ldi	r25, 0x61	; 97
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	80 40       	sbci	r24, 0x00	; 0
     7a2:	90 40       	sbci	r25, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x6e>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x78>
     7a8:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     7aa:	82 b3       	in	r24, 0x12	; 18
     7ac:	8f 7b       	andi	r24, 0xBF	; 191
     7ae:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_RX);
     7b0:	82 b3       	in	r24, 0x12	; 18
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     7b6:	82 b3       	in	r24, 0x12	; 18
     7b8:	8f 7e       	andi	r24, 0xEF	; 239
     7ba:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<LED_WIFI);
     7bc:	85 b3       	in	r24, 0x15	; 21
     7be:	8d 7f       	andi	r24, 0xFD	; 253
     7c0:	85 bb       	out	0x15, r24	; 21
	timer1_ini();
     7c2:	55 de       	rcall	.-854    	; 0x46e <timer1_ini>
	timer2_ini();
     7c4:	8e dd       	rcall	.-1252   	; 0x2e2 <timer2_ini>
	gas_boiler_controller();
     7c6:	4b dc       	rcall	.-1898   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     7c8:	81 b5       	in	r24, 0x21	; 33
     7ca:	87 7f       	andi	r24, 0xF7	; 247
     7cc:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     7ce:	9f e0       	ldi	r25, 0x0F	; 15
     7d0:	88 e1       	ldi	r24, 0x18	; 24
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	a8 95       	wdr
     7d8:	81 bd       	out	0x21, r24	; 33
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     7de:	88 b1       	in	r24, 0x08	; 8
     7e0:	80 68       	ori	r24, 0x80	; 128
     7e2:	88 b9       	out	0x08, r24	; 8
	sei();
     7e4:	78 94       	sei
     7e6:	2f ef       	ldi	r18, 0xFF	; 255
     7e8:	8d e3       	ldi	r24, 0x3D	; 61
     7ea:	99 e4       	ldi	r25, 0x49	; 73
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	80 40       	sbci	r24, 0x00	; 0
     7f0:	90 40       	sbci	r25, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0xbc>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0xc6>
     7f6:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     7f8:	a8 95       	wdr
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	8d e3       	ldi	r24, 0x3D	; 61
     7fe:	99 e4       	ldi	r25, 0x49	; 73
     800:	21 50       	subi	r18, 0x01	; 1
     802:	80 40       	sbci	r24, 0x00	; 0
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <main+0xd0>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0xda>
     80a:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     80c:	a8 95       	wdr
	3-температура целая
	4-температура дробь
	5-статус котла
	6-режим работы
	*/
	if(EEPROM_read(1) > 100) EEPROM_write(1,20);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	5e dd       	rcall	.-1348   	; 0x2d0 <EEPROM_read>
     814:	85 36       	cpi	r24, 0x65	; 101
     816:	20 f0       	brcs	.+8      	; 0x820 <main+0xf0>
     818:	64 e1       	ldi	r22, 0x14	; 20
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	4c dd       	rcall	.-1384   	; 0x2b8 <EEPROM_write>
	if(EEPROM_read(2) > 100) EEPROM_write(2,0);
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	55 dd       	rcall	.-1366   	; 0x2d0 <EEPROM_read>
     826:	85 36       	cpi	r24, 0x65	; 101
     828:	20 f0       	brcs	.+8      	; 0x832 <main+0x102>
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	43 dd       	rcall	.-1402   	; 0x2b8 <EEPROM_write>
	if(EEPROM_read(3) > 100) EEPROM_write(3,20);
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4c dd       	rcall	.-1384   	; 0x2d0 <EEPROM_read>
     838:	85 36       	cpi	r24, 0x65	; 101
     83a:	20 f0       	brcs	.+8      	; 0x844 <main+0x114>
     83c:	64 e1       	ldi	r22, 0x14	; 20
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	3a dd       	rcall	.-1420   	; 0x2b8 <EEPROM_write>
	if(EEPROM_read(4) > 100) EEPROM_write(4,0);
     844:	84 e0       	ldi	r24, 0x04	; 4
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	43 dd       	rcall	.-1402   	; 0x2d0 <EEPROM_read>
     84a:	85 36       	cpi	r24, 0x65	; 101
     84c:	20 f0       	brcs	.+8      	; 0x856 <main+0x126>
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	31 dd       	rcall	.-1438   	; 0x2b8 <EEPROM_write>
	if(EEPROM_read(5) > 100) EEPROM_write(5,0);
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	3a dd       	rcall	.-1420   	; 0x2d0 <EEPROM_read>
     85c:	85 36       	cpi	r24, 0x65	; 101
     85e:	20 f0       	brcs	.+8      	; 0x868 <main+0x138>
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	28 dd       	rcall	.-1456   	; 0x2b8 <EEPROM_write>
	if(EEPROM_read(6) > 100) EEPROM_write(6,0);
     868:	86 e0       	ldi	r24, 0x06	; 6
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	31 dd       	rcall	.-1438   	; 0x2d0 <EEPROM_read>
     86e:	85 36       	cpi	r24, 0x65	; 101
     870:	20 f0       	brcs	.+8      	; 0x87a <main+0x14a>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	1f dd       	rcall	.-1474   	; 0x2b8 <EEPROM_write>
	temp_setpoint_integer = EEPROM_read(1);
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	28 dd       	rcall	.-1456   	; 0x2d0 <EEPROM_read>
     880:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <temp_setpoint_integer>
	temp_setpoint_fraction = EEPROM_read(2);
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	23 dd       	rcall	.-1466   	; 0x2d0 <EEPROM_read>
     88a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <temp_setpoint_fraction>
	home_temp_rx_integer = EEPROM_read(3);
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	1e dd       	rcall	.-1476   	; 0x2d0 <EEPROM_read>
     894:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
	home_temp_rx_fraction = EEPROM_read(4);
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	19 dd       	rcall	.-1486   	; 0x2d0 <EEPROM_read>
     89e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <home_temp_rx_fraction>
	gas_boiler_enable_flag = EEPROM_read(5);
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	14 dd       	rcall	.-1496   	; 0x2d0 <EEPROM_read>
     8a8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gas_boiler_enable_flag>
	work_mode = EEPROM_read(6);
     8ac:	86 e0       	ldi	r24, 0x06	; 6
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0f dd       	rcall	.-1506   	; 0x2d0 <EEPROM_read>
     8b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <work_mode>
	//отправляем в БД первичные данные после включения
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     8b6:	1f 92       	push	r1
     8b8:	8f 93       	push	r24
     8ba:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     8c6:	1f 92       	push	r1
     8c8:	8f 93       	push	r24
     8ca:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     8ce:	1f 92       	push	r1
     8d0:	8f 93       	push	r24
     8d2:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <home_temp_rx_integer>
     8d6:	1f 92       	push	r1
     8d8:	8f 93       	push	r24
     8da:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
     8de:	1f 92       	push	r1
     8e0:	8f 93       	push	r24
     8e2:	86 e6       	ldi	r24, 0x66	; 102
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	ce e8       	ldi	r28, 0x8E	; 142
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	46 d6       	rcall	.+3212   	; 0x1580 <sprintf>
	USART_Transmit(DATA_TO_UART);
     8f4:	ce 01       	movw	r24, r28
     8f6:	91 d5       	rcall	.+2850   	; 0x141a <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     8f8:	09 90       	ld	r0, Y+
     8fa:	00 20       	and	r0, r0
     8fc:	e9 f7       	brne	.-6      	; 0x8f8 <main+0x1c8>
     8fe:	21 97       	sbiw	r28, 0x01	; 1
     900:	ae 01       	movw	r20, r28
     902:	4e 58       	subi	r20, 0x8E	; 142
     904:	50 40       	sbci	r21, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	8e e8       	ldi	r24, 0x8E	; 142
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	17 d6       	rcall	.+3118   	; 0x153e <memset>
     910:	8d b7       	in	r24, 0x3d	; 61
     912:	9e b7       	in	r25, 0x3e	; 62
     914:	40 96       	adiw	r24, 0x10	; 16
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	9e bf       	out	0x3e, r25	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	8d bf       	out	0x3d, r24	; 61
	while (1) 
    {
		
		//если нет связи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     920:	40 91 e5 00 	lds	r20, 0x00E5	; 0x8000e5 <millis>
     924:	50 91 e6 00 	lds	r21, 0x00E6	; 0x8000e6 <millis+0x1>
     928:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <millis+0x2>
     92c:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <millis+0x3>
     930:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <millis_hometemp_update>
     934:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <millis_hometemp_update+0x1>
     938:	9a 01       	movw	r18, r20
     93a:	28 1b       	sub	r18, r24
     93c:	39 0b       	sbc	r19, r25
     93e:	c9 01       	movw	r24, r18
     940:	99 23       	and	r25, r25
     942:	24 f4       	brge	.+8      	; 0x94c <main+0x21c>
     944:	88 27       	eor	r24, r24
     946:	99 27       	eor	r25, r25
     948:	82 1b       	sub	r24, r18
     94a:	93 0b       	sbc	r25, r19
     94c:	89 39       	cpi	r24, 0x99	; 153
     94e:	9a 43       	sbci	r25, 0x3A	; 58
     950:	04 f1       	brlt	.+64     	; 0x992 <main+0x262>
		{
			work_mode = 0;
     952:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     956:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <home_temp_own_integer>
     95a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
			home_temp_rx_fraction = home_temp_own_fraction;
     95e:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <home_temp_own_fraction>
     962:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     966:	40 93 e1 00 	sts	0x00E1, r20	; 0x8000e1 <millis_hometemp_update>
     96a:	50 93 e2 00 	sts	0x00E2, r21	; 0x8000e2 <millis_hometemp_update+0x1>
     96e:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <millis_hometemp_update+0x2>
     972:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <millis_hometemp_update+0x3>
			EEPROM_write(3, home_temp_rx_integer);
     976:	68 2f       	mov	r22, r24
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	9d dc       	rcall	.-1734   	; 0x2b8 <EEPROM_write>
			EEPROM_write(4, home_temp_rx_fraction);
     97e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	98 dc       	rcall	.-1744   	; 0x2b8 <EEPROM_write>
			EEPROM_write(6, work_mode);
     988:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
     98c:	86 e0       	ldi	r24, 0x06	; 6
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	93 dc       	rcall	.-1754   	; 0x2b8 <EEPROM_write>
		}
		//каждые 3сек отправляем данные и измеряем температуру
		if ((millis%3000) == 0)
     992:	60 91 e5 00 	lds	r22, 0x00E5	; 0x8000e5 <millis>
     996:	70 91 e6 00 	lds	r23, 0x00E6	; 0x8000e6 <millis+0x1>
     99a:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis+0x2>
     99e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x3>
     9a2:	28 eb       	ldi	r18, 0xB8	; 184
     9a4:	3b e0       	ldi	r19, 0x0B	; 11
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	62 d5       	rcall	.+2756   	; 0x1470 <__divmodsi4>
     9ac:	67 2b       	or	r22, r23
     9ae:	68 2b       	or	r22, r24
     9b0:	69 2b       	or	r22, r25
     9b2:	91 f5       	brne	.+100    	; 0xa18 <main+0x2e8>
		{
			buf1[0] = gas_boiler_enable_flag;
     9b4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
     9b8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <buf1>
			//если хотим поменять уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     9bc:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
     9c0:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     9c4:	29 13       	cpse	r18, r25
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <main+0x2a4>
     9c8:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <RX_BUF+0x2>
     9cc:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     9d0:	32 17       	cp	r19, r18
     9d2:	19 f0       	breq	.+6      	; 0x9da <main+0x2aa>
			{
				buf1[0] += 100;
     9d4:	8c 59       	subi	r24, 0x9C	; 156
     9d6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     9da:	cd ee       	ldi	r28, 0xED	; 237
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
     9de:	99 83       	std	Y+1, r25	; 0x01
			buf1[2] = temp_setpoint_fraction;
     9e0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     9e4:	8a 83       	std	Y+2, r24	; 0x02
			buf1[3] = home_temp_rx_integer;
     9e6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <home_temp_rx_integer>
     9ea:	8b 83       	std	Y+3, r24	; 0x03
			buf1[4] = home_temp_rx_fraction;
     9ec:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     9f0:	8c 83       	std	Y+4, r24	; 0x04
			dt = NRF24L01_Send(buf1);
     9f2:	ce 01       	movw	r24, r28
     9f4:	ba d4       	rcall	.+2420   	; 0x136a <NRF24L01_Send>
     9f6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     9fa:	09 90       	ld	r0, Y+
     9fc:	00 20       	and	r0, r0
     9fe:	e9 f7       	brne	.-6      	; 0x9fa <main+0x2ca>
     a00:	21 97       	sbiw	r28, 0x01	; 1
     a02:	cd 5e       	subi	r28, 0xED	; 237
     a04:	d0 40       	sbci	r29, 0x00	; 0
     a06:	ae 01       	movw	r20, r28
     a08:	44 0f       	add	r20, r20
     a0a:	55 1f       	adc	r21, r21
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	8d ee       	ldi	r24, 0xED	; 237
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	94 d5       	rcall	.+2856   	; 0x153e <memset>
			DS18b0_find_temp();
     a16:	17 dc       	rcall	.-2002   	; 0x246 <DS18b0_find_temp>
		}
		//вывод инфы на индикатор
		if ((millis%500) == 0)
     a18:	60 91 e5 00 	lds	r22, 0x00E5	; 0x8000e5 <millis>
     a1c:	70 91 e6 00 	lds	r23, 0x00E6	; 0x8000e6 <millis+0x1>
     a20:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis+0x2>
     a24:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x3>
     a28:	24 ef       	ldi	r18, 0xF4	; 244
     a2a:	31 e0       	ldi	r19, 0x01	; 1
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	1f d5       	rcall	.+2622   	; 0x1470 <__divmodsi4>
     a32:	67 2b       	or	r22, r23
     a34:	68 2b       	or	r22, r24
     a36:	69 2b       	or	r22, r25
     a38:	29 f5       	brne	.+74     	; 0xa84 <main+0x354>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     a3a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	bc 01       	movw	r22, r24
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	68 0f       	add	r22, r24
     a54:	79 1f       	adc	r23, r25
     a56:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <home_temp_rx_integer>
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	c9 01       	movw	r24, r18
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	22 0f       	add	r18, r18
     a64:	33 1f       	adc	r19, r19
     a66:	22 0f       	add	r18, r18
     a68:	33 1f       	adc	r19, r19
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
     a76:	62 0f       	add	r22, r18
     a78:	71 1d       	adc	r23, r1
     a7a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     a7e:	82 0f       	add	r24, r18
     a80:	91 1d       	adc	r25, r1
     a82:	81 d0       	rcall	.+258    	; 0xb86 <PrintTemp_MAX7219>
		}
		wdt_reset();
     a84:	a8 95       	wdr
    }
     a86:	4c cf       	rjmp	.-360    	; 0x920 <main+0x1f0>

00000a88 <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
     a88:	cf 93       	push	r28
     a8a:	c6 2f       	mov	r28, r22
     a8c:	95 b3       	in	r25, 0x15	; 21
     a8e:	9e 7f       	andi	r25, 0xFE	; 254
     a90:	95 bb       	out	0x15, r25	; 21
     a92:	00 00       	nop
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	47 de       	rcall	.-882    	; 0x726 <spi_send_recv>
     a98:	8c 2f       	mov	r24, r28
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	44 de       	rcall	.-888    	; 0x726 <spi_send_recv>
     a9e:	85 b3       	in	r24, 0x15	; 21
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	85 bb       	out	0x15, r24	; 21
     aa4:	00 00       	nop
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <MAX7219_clear>:
     aaa:	cf 93       	push	r28
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8f e0       	ldi	r24, 0x0F	; 15
     ab0:	eb df       	rcall	.-42     	; 0xa88 <Send_MAX7219>
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	e8 df       	rcall	.-48     	; 0xa88 <Send_MAX7219>
     ab8:	67 e0       	ldi	r22, 0x07	; 7
     aba:	8b e0       	ldi	r24, 0x0B	; 11
     abc:	e5 df       	rcall	.-54     	; 0xa88 <Send_MAX7219>
     abe:	6f ef       	ldi	r22, 0xFF	; 255
     ac0:	89 e0       	ldi	r24, 0x09	; 9
     ac2:	e2 df       	rcall	.-60     	; 0xa88 <Send_MAX7219>
     ac4:	c8 e0       	ldi	r28, 0x08	; 8
     ac6:	6f e0       	ldi	r22, 0x0F	; 15
     ac8:	8c 2f       	mov	r24, r28
     aca:	de df       	rcall	.-68     	; 0xa88 <Send_MAX7219>
     acc:	c1 50       	subi	r28, 0x01	; 1
     ace:	d9 f7       	brne	.-10     	; 0xac6 <MAX7219_clear+0x1c>
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <MAX7219_init>:
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	d7 df       	rcall	.-82     	; 0xa88 <Send_MAX7219>
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	9c e9       	ldi	r25, 0x9C	; 156
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <MAX7219_init+0xa>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <MAX7219_init+0x10>
     ae4:	00 00       	nop
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	8c e0       	ldi	r24, 0x0C	; 12
     aea:	ce df       	rcall	.-100    	; 0xa88 <Send_MAX7219>
     aec:	8f e3       	ldi	r24, 0x3F	; 63
     aee:	9c e9       	ldi	r25, 0x9C	; 156
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <MAX7219_init+0x1c>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <MAX7219_init+0x22>
     af6:	00 00       	nop
     af8:	67 e0       	ldi	r22, 0x07	; 7
     afa:	8b e0       	ldi	r24, 0x0B	; 11
     afc:	c5 df       	rcall	.-118    	; 0xa88 <Send_MAX7219>
     afe:	8f e3       	ldi	r24, 0x3F	; 63
     b00:	9c e9       	ldi	r25, 0x9C	; 156
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <MAX7219_init+0x2e>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <MAX7219_init+0x34>
     b08:	00 00       	nop
     b0a:	6f ef       	ldi	r22, 0xFF	; 255
     b0c:	89 e0       	ldi	r24, 0x09	; 9
     b0e:	bc df       	rcall	.-136    	; 0xa88 <Send_MAX7219>
     b10:	8f e3       	ldi	r24, 0x3F	; 63
     b12:	9c e9       	ldi	r25, 0x9C	; 156
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <MAX7219_init+0x40>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <MAX7219_init+0x46>
     b1a:	00 00       	nop
     b1c:	62 e0       	ldi	r22, 0x02	; 2
     b1e:	8a e0       	ldi	r24, 0x0A	; 10
     b20:	b3 df       	rcall	.-154    	; 0xa88 <Send_MAX7219>
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	9c e9       	ldi	r25, 0x9C	; 156
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <MAX7219_init+0x52>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <MAX7219_init+0x58>
     b2c:	00 00       	nop
     b2e:	bd df       	rcall	.-134    	; 0xaaa <MAX7219_clear>
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	89 e0       	ldi	r24, 0x09	; 9
     b34:	a9 df       	rcall	.-174    	; 0xa88 <Send_MAX7219>
     b36:	8f e3       	ldi	r24, 0x3F	; 63
     b38:	9c e9       	ldi	r25, 0x9C	; 156
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <MAX7219_init+0x66>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <MAX7219_init+0x6c>
     b40:	00 00       	nop
     b42:	6f ef       	ldi	r22, 0xFF	; 255
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	a0 df       	rcall	.-192    	; 0xa88 <Send_MAX7219>
     b48:	6f ef       	ldi	r22, 0xFF	; 255
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	9d df       	rcall	.-198    	; 0xa88 <Send_MAX7219>
     b4e:	6f ef       	ldi	r22, 0xFF	; 255
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	9a df       	rcall	.-204    	; 0xa88 <Send_MAX7219>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	97 df       	rcall	.-210    	; 0xa88 <Send_MAX7219>
     b5a:	6f ef       	ldi	r22, 0xFF	; 255
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	94 df       	rcall	.-216    	; 0xa88 <Send_MAX7219>
     b60:	6f ef       	ldi	r22, 0xFF	; 255
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	91 df       	rcall	.-222    	; 0xa88 <Send_MAX7219>
     b66:	6f ef       	ldi	r22, 0xFF	; 255
     b68:	87 e0       	ldi	r24, 0x07	; 7
     b6a:	8e df       	rcall	.-228    	; 0xa88 <Send_MAX7219>
     b6c:	6f ef       	ldi	r22, 0xFF	; 255
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	8b df       	rcall	.-234    	; 0xa88 <Send_MAX7219>
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	23 ed       	ldi	r18, 0xD3	; 211
     b76:	80 e3       	ldi	r24, 0x30	; 48
     b78:	91 50       	subi	r25, 0x01	; 1
     b7a:	20 40       	sbci	r18, 0x00	; 0
     b7c:	80 40       	sbci	r24, 0x00	; 0
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <MAX7219_init+0xa4>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <MAX7219_init+0xae>
     b82:	00 00       	nop
     b84:	08 95       	ret

00000b86 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	8c 01       	movw	r16, r24
     b92:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     b94:	08 3e       	cpi	r16, 0xE8	; 232
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	18 07       	cpc	r17, r24
     b9a:	0c f0       	brlt	.+2      	; 0xb9e <PrintTemp_MAX7219+0x18>
     b9c:	67 c0       	rjmp	.+206    	; 0xc6c <PrintTemp_MAX7219+0xe6>
     b9e:	68 3e       	cpi	r22, 0xE8	; 232
     ba0:	73 40       	sbci	r23, 0x03	; 3
     ba2:	0c f0       	brlt	.+2      	; 0xba6 <PrintTemp_MAX7219+0x20>
     ba4:	65 c0       	rjmp	.+202    	; 0xc70 <PrintTemp_MAX7219+0xea>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     ba6:	81 df       	rcall	.-254    	; 0xaaa <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодирования для всех разрядов кроме позиций 2 и 6
     ba8:	6e ee       	ldi	r22, 0xEE	; 238
     baa:	89 e0       	ldi	r24, 0x09	; 9
     bac:	6d df       	rcall	.-294    	; 0xa88 <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв С
     bae:	6e e4       	ldi	r22, 0x4E	; 78
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	6a df       	rcall	.-300    	; 0xa88 <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв С
     bb4:	6e e4       	ldi	r22, 0x4E	; 78
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	67 df       	rcall	.-306    	; 0xa88 <Send_MAX7219>
	if (current_temp == 0)
     bba:	01 15       	cp	r16, r1
     bbc:	11 05       	cpc	r17, r1
     bbe:	29 f5       	brne	.+74     	; 0xc0a <PrintTemp_MAX7219+0x84>
	{
		Send_MAX7219(start_pos, 0);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	61 df       	rcall	.-318    	; 0xa88 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     bc6:	60 e8       	ldi	r22, 0x80	; 128
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	5e df       	rcall	.-324    	; 0xa88 <Send_MAX7219>
     bcc:	24 c0       	rjmp	.+72     	; 0xc16 <PrintTemp_MAX7219+0x90>
	}
	else
	{
		while (current_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	f8 16       	cp	r15, r24
     bd2:	19 f0       	breq	.+6      	; 0xbda <PrintTemp_MAX7219+0x54>
     bd4:	87 e0       	ldi	r24, 0x07	; 7
     bd6:	f8 12       	cpse	r15, r24
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <PrintTemp_MAX7219+0x66>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     bda:	c8 01       	movw	r24, r16
     bdc:	6a e0       	ldi	r22, 0x0A	; 10
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	34 d4       	rcall	.+2152   	; 0x144a <__divmodhi4>
     be2:	68 2f       	mov	r22, r24
     be4:	60 68       	ori	r22, 0x80	; 128
     be6:	8f 2d       	mov	r24, r15
     be8:	4f df       	rcall	.-354    	; 0xa88 <Send_MAX7219>
     bea:	07 c0       	rjmp	.+14     	; 0xbfa <PrintTemp_MAX7219+0x74>
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     bec:	c8 01       	movw	r24, r16
     bee:	6a e0       	ldi	r22, 0x0A	; 10
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	2b d4       	rcall	.+2134   	; 0x144a <__divmodhi4>
     bf4:	68 2f       	mov	r22, r24
     bf6:	8f 2d       	mov	r24, r15
     bf8:	47 df       	rcall	.-370    	; 0xa88 <Send_MAX7219>
			}
			start_pos++;
     bfa:	f3 94       	inc	r15
			current_temp /= 10;
     bfc:	c8 01       	movw	r24, r16
     bfe:	6a e0       	ldi	r22, 0x0A	; 10
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	23 d4       	rcall	.+2118   	; 0x144a <__divmodhi4>
     c04:	8b 01       	movw	r16, r22
			asm("nop");
     c06:	00 00       	nop
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <PrintTemp_MAX7219+0x8a>
     c0a:	68 94       	set
     c0c:	ff 24       	eor	r15, r15
     c0e:	f1 f8       	bld	r15, 1
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     c10:	01 15       	cp	r16, r1
     c12:	11 05       	cpc	r17, r1
     c14:	e1 f6       	brne	.-72     	; 0xbce <PrintTemp_MAX7219+0x48>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     c16:	20 97       	sbiw	r28, 0x00	; 0
     c18:	21 f5       	brne	.+72     	; 0xc62 <PrintTemp_MAX7219+0xdc>
	{
		Send_MAX7219(start_pos, 0);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	34 df       	rcall	.-408    	; 0xa88 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     c20:	60 e8       	ldi	r22, 0x80	; 128
     c22:	87 e0       	ldi	r24, 0x07	; 7
     c24:	31 df       	rcall	.-414    	; 0xa88 <Send_MAX7219>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	24 c0       	rjmp	.+72     	; 0xc72 <PrintTemp_MAX7219+0xec>
	}
	else
	{
		while (setpoint_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     c2a:	13 30       	cpi	r17, 0x03	; 3
     c2c:	11 f0       	breq	.+4      	; 0xc32 <PrintTemp_MAX7219+0xac>
     c2e:	17 30       	cpi	r17, 0x07	; 7
     c30:	49 f4       	brne	.+18     	; 0xc44 <PrintTemp_MAX7219+0xbe>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     c32:	ce 01       	movw	r24, r28
     c34:	6a e0       	ldi	r22, 0x0A	; 10
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	08 d4       	rcall	.+2064   	; 0x144a <__divmodhi4>
     c3a:	68 2f       	mov	r22, r24
     c3c:	60 68       	ori	r22, 0x80	; 128
     c3e:	81 2f       	mov	r24, r17
     c40:	23 df       	rcall	.-442    	; 0xa88 <Send_MAX7219>
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <PrintTemp_MAX7219+0xcc>
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     c44:	ce 01       	movw	r24, r28
     c46:	6a e0       	ldi	r22, 0x0A	; 10
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	ff d3       	rcall	.+2046   	; 0x144a <__divmodhi4>
     c4c:	68 2f       	mov	r22, r24
     c4e:	81 2f       	mov	r24, r17
     c50:	1b df       	rcall	.-458    	; 0xa88 <Send_MAX7219>
			}
			start_pos++;
     c52:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     c54:	ce 01       	movw	r24, r28
     c56:	6a e0       	ldi	r22, 0x0A	; 10
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	f7 d3       	rcall	.+2030   	; 0x144a <__divmodhi4>
     c5c:	eb 01       	movw	r28, r22
			asm("nop");
     c5e:	00 00       	nop
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <PrintTemp_MAX7219+0xde>
     c62:	16 e0       	ldi	r17, 0x06	; 6
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     c64:	20 97       	sbiw	r28, 0x00	; 0
     c66:	09 f7       	brne	.-62     	; 0xc2a <PrintTemp_MAX7219+0xa4>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <PrintTemp_MAX7219+0xec>
		Send_MAX7219(i+1, 0xA); //символ —
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <PrintTemp_MAX7219+0xec>
     c70:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	08 95       	ret

00000c7e <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	8b 01       	movw	r16, r22
     c8c:	c4 2f       	mov	r28, r20
     c8e:	98 b3       	in	r25, 0x18	; 24
     c90:	9d 7f       	andi	r25, 0xFD	; 253
     c92:	98 bb       	out	0x18, r25	; 24
     c94:	98 b3       	in	r25, 0x18	; 24
     c96:	9b 7f       	andi	r25, 0xFB	; 251
     c98:	98 bb       	out	0x18, r25	; 24
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	44 dd       	rcall	.-1400   	; 0x726 <spi_send_recv>
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	8a 95       	dec	r24
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <NRF24_Transmit+0x22>
     ca4:	00 00       	nop
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <NRF24_Transmit+0x3e>
     ca8:	78 01       	movw	r14, r16
     caa:	ef ef       	ldi	r30, 0xFF	; 255
     cac:	ee 1a       	sub	r14, r30
     cae:	fe 0a       	sbc	r15, r30
     cb0:	f8 01       	movw	r30, r16
     cb2:	80 81       	ld	r24, Z
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	37 dd       	rcall	.-1426   	; 0x726 <spi_send_recv>
     cb8:	cd 2f       	mov	r28, r29
     cba:	87 01       	movw	r16, r14
     cbc:	df ef       	ldi	r29, 0xFF	; 255
     cbe:	dc 0f       	add	r29, r28
     cc0:	c1 11       	cpse	r28, r1
     cc2:	f2 cf       	rjmp	.-28     	; 0xca8 <NRF24_Transmit+0x2a>
     cc4:	88 b3       	in	r24, 0x18	; 24
     cc6:	84 60       	ori	r24, 0x04	; 4
     cc8:	88 bb       	out	0x18, r24	; 24
     cca:	88 b3       	in	r24, 0x18	; 24
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	88 bb       	out	0x18, r24	; 24
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	08 95       	ret

00000cde <NRF24_FlushRX>:
     cde:	88 b3       	in	r24, 0x18	; 24
     ce0:	8b 7f       	andi	r24, 0xFB	; 251
     ce2:	88 bb       	out	0x18, r24	; 24
     ce4:	82 ee       	ldi	r24, 0xE2	; 226
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	1e dd       	rcall	.-1476   	; 0x726 <spi_send_recv>
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	8a 95       	dec	r24
     cee:	f1 f7       	brne	.-4      	; 0xcec <NRF24_FlushRX+0xe>
     cf0:	00 00       	nop
     cf2:	88 b3       	in	r24, 0x18	; 24
     cf4:	84 60       	ori	r24, 0x04	; 4
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret

00000cfa <NRF24_FlushTX>:
     cfa:	88 b3       	in	r24, 0x18	; 24
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	88 bb       	out	0x18, r24	; 24
     d00:	81 ee       	ldi	r24, 0xE1	; 225
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	10 dd       	rcall	.-1504   	; 0x726 <spi_send_recv>
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	8a 95       	dec	r24
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <NRF24_FlushTX+0xe>
     d0c:	00 00       	nop
     d0e:	88 b3       	in	r24, 0x18	; 24
     d10:	84 60       	ori	r24, 0x04	; 4
     d12:	88 bb       	out	0x18, r24	; 24
     d14:	08 95       	ret

00000d16 <NRF24_ToggleFeatures>:
     d16:	88 b3       	in	r24, 0x18	; 24
     d18:	8b 7f       	andi	r24, 0xFB	; 251
     d1a:	88 bb       	out	0x18, r24	; 24
     d1c:	80 e5       	ldi	r24, 0x50	; 80
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 dd       	rcall	.-1532   	; 0x726 <spi_send_recv>
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	8a 95       	dec	r24
     d26:	f1 f7       	brne	.-4      	; 0xd24 <NRF24_ToggleFeatures+0xe>
     d28:	00 00       	nop
     d2a:	83 e7       	ldi	r24, 0x73	; 115
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	fb dc       	rcall	.-1546   	; 0x726 <spi_send_recv>
     d30:	88 b3       	in	r24, 0x18	; 24
     d32:	84 60       	ori	r24, 0x04	; 4
     d34:	88 bb       	out	0x18, r24	; 24
     d36:	08 95       	ret

00000d38 <NRF24_Read_Buf>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	8b 01       	movw	r16, r22
     d46:	c4 2f       	mov	r28, r20
     d48:	98 b3       	in	r25, 0x18	; 24
     d4a:	9b 7f       	andi	r25, 0xFB	; 251
     d4c:	98 bb       	out	0x18, r25	; 24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	ea dc       	rcall	.-1580   	; 0x726 <spi_send_recv>
     d52:	0b c0       	rjmp	.+22     	; 0xd6a <NRF24_Read_Buf+0x32>
     d54:	78 01       	movw	r14, r16
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	e8 1a       	sub	r14, r24
     d5a:	f8 0a       	sbc	r15, r24
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	e2 dc       	rcall	.-1596   	; 0x726 <spi_send_recv>
     d62:	f8 01       	movw	r30, r16
     d64:	80 83       	st	Z, r24
     d66:	cd 2f       	mov	r28, r29
     d68:	87 01       	movw	r16, r14
     d6a:	df ef       	ldi	r29, 0xFF	; 255
     d6c:	dc 0f       	add	r29, r28
     d6e:	c1 11       	cpse	r28, r1
     d70:	f1 cf       	rjmp	.-30     	; 0xd54 <NRF24_Read_Buf+0x1c>
     d72:	88 b3       	in	r24, 0x18	; 24
     d74:	84 60       	ori	r24, 0x04	; 4
     d76:	88 bb       	out	0x18, r24	; 24
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	08 95       	ret

00000d86 <NRF24_Write_Buf>:
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	8b 01       	movw	r16, r22
     d94:	c4 2f       	mov	r28, r20
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	98 b3       	in	r25, 0x18	; 24
     d9a:	9b 7f       	andi	r25, 0xFB	; 251
     d9c:	98 bb       	out	0x18, r25	; 24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	c2 dc       	rcall	.-1660   	; 0x726 <spi_send_recv>
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	8a 95       	dec	r24
     da6:	f1 f7       	brne	.-4      	; 0xda4 <NRF24_Write_Buf+0x1e>
     da8:	00 00       	nop
     daa:	0a c0       	rjmp	.+20     	; 0xdc0 <NRF24_Write_Buf+0x3a>
     dac:	78 01       	movw	r14, r16
     dae:	ef ef       	ldi	r30, 0xFF	; 255
     db0:	ee 1a       	sub	r14, r30
     db2:	fe 0a       	sbc	r15, r30
     db4:	f8 01       	movw	r30, r16
     db6:	80 81       	ld	r24, Z
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	b5 dc       	rcall	.-1686   	; 0x726 <spi_send_recv>
     dbc:	cd 2f       	mov	r28, r29
     dbe:	87 01       	movw	r16, r14
     dc0:	df ef       	ldi	r29, 0xFF	; 255
     dc2:	dc 0f       	add	r29, r28
     dc4:	c1 11       	cpse	r28, r1
     dc6:	f2 cf       	rjmp	.-28     	; 0xdac <NRF24_Write_Buf+0x26>
     dc8:	88 b3       	in	r24, 0x18	; 24
     dca:	84 60       	ori	r24, 0x04	; 4
     dcc:	88 bb       	out	0x18, r24	; 24
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <NRF24L01_TX_Mode>:
     ddc:	43 e0       	ldi	r20, 0x03	; 3
     dde:	63 e6       	ldi	r22, 0x63	; 99
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	d0 df       	rcall	.-96     	; 0xd86 <NRF24_Write_Buf>
     de6:	43 e0       	ldi	r20, 0x03	; 3
     de8:	63 e6       	ldi	r22, 0x63	; 99
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	cb df       	rcall	.-106    	; 0xd86 <NRF24_Write_Buf>
     df0:	88 b3       	in	r24, 0x18	; 24
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	88 bb       	out	0x18, r24	; 24
     df6:	73 df       	rcall	.-282    	; 0xcde <NRF24_FlushRX>
     df8:	80 df       	rcall	.-256    	; 0xcfa <NRF24_FlushTX>
     dfa:	08 95       	ret

00000dfc <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
     dfc:	cf 93       	push	r28
     dfe:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
     e00:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
     e02:	98 b3       	in	r25, 0x18	; 24
     e04:	9b 7f       	andi	r25, 0xFB	; 251
     e06:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	8d dc       	rcall	.-1766   	; 0x726 <spi_send_recv>
	spi_send_recv(data_out);
     e0c:	8c 2f       	mov	r24, r28
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	8a dc       	rcall	.-1772   	; 0x726 <spi_send_recv>
	HIGH_CSN;
     e12:	88 b3       	in	r24, 0x18	; 24
     e14:	84 60       	ori	r24, 0x04	; 4
     e16:	88 bb       	out	0x18, r24	; 24
}
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
     e1c:	cf 93       	push	r28
     e1e:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
     e20:	88 b3       	in	r24, 0x18	; 24
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
     e26:	8c 2f       	mov	r24, r28
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	7d dc       	rcall	.-1798   	; 0x726 <spi_send_recv>
	if(reg != STATUS)
     e2c:	c7 30       	cpi	r28, 0x07	; 7
     e2e:	19 f0       	breq	.+6      	; 0xe36 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	78 dc       	rcall	.-1808   	; 0x726 <spi_send_recv>
	}
	HIGH_CSN;
     e36:	98 b3       	in	r25, 0x18	; 24
     e38:	94 60       	ori	r25, 0x04	; 4
     e3a:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	cf 93       	push	r28
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
     e64:	87 e0       	ldi	r24, 0x07	; 7
     e66:	da df       	rcall	.-76     	; 0xe1c <nRF_read_register>
     e68:	c8 2f       	mov	r28, r24
	if(status & 0x40)
     e6a:	86 ff       	sbrs	r24, 6
     e6c:	0e c2       	rjmp	.+1052   	; 0x128a <__vector_1+0x44a>
	{
		pipe = (status>>1)&0x07;
     e6e:	86 95       	lsr	r24
     e70:	87 70       	andi	r24, 0x07	; 7
     e72:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
     e76:	45 e0       	ldi	r20, 0x05	; 5
     e78:	68 ef       	ldi	r22, 0xF8	; 248
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	81 e6       	ldi	r24, 0x61	; 97
     e7e:	5c df       	rcall	.-328    	; 0xd38 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
     e80:	60 e4       	ldi	r22, 0x40	; 64
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	bb df       	rcall	.-138    	; 0xdfc <nRF_write_register>
		rx_flag = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <rx_flag>
		PORTD |= (1<<LED_RX);
     e8c:	82 b3       	in	r24, 0x12	; 18
     e8e:	80 62       	ori	r24, 0x20	; 32
     e90:	82 bb       	out	0x12, r24	; 18
     e92:	2f ef       	ldi	r18, 0xFF	; 255
     e94:	81 ee       	ldi	r24, 0xE1	; 225
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	21 50       	subi	r18, 0x01	; 1
     e9a:	80 40       	sbci	r24, 0x00	; 0
     e9c:	90 40       	sbci	r25, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <__vector_1+0x58>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <__vector_1+0x62>
     ea2:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
     ea4:	82 b3       	in	r24, 0x12	; 18
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	82 bb       	out	0x12, r24	; 18
		millis_hometemp_update = millis;
     eaa:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <millis>
     eae:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <millis+0x1>
     eb2:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <millis+0x2>
     eb6:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <millis+0x3>
     eba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <millis_hometemp_update>
     ebe:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <millis_hometemp_update+0x1>
     ec2:	a0 93 e3 00 	sts	0x00E3, r26	; 0x8000e3 <millis_hometemp_update+0x2>
     ec6:	b0 93 e4 00 	sts	0x00E4, r27	; 0x8000e4 <millis_hometemp_update+0x3>
		
		gas_boiler_enable_flag = RX_BUF[0];
     eca:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <RX_BUF>
     ece:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <gas_boiler_enable_flag>
		switch (gas_boiler_enable_flag)
     ed2:	8b 30       	cpi	r24, 0x0B	; 11
     ed4:	09 f4       	brne	.+2      	; 0xed8 <__vector_1+0x98>
     ed6:	9f c0       	rjmp	.+318    	; 0x1016 <__vector_1+0x1d6>
     ed8:	38 f4       	brcc	.+14     	; 0xee8 <__vector_1+0xa8>
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	e1 f1       	breq	.+120    	; 0xf56 <__vector_1+0x116>
     ede:	98 f0       	brcs	.+38     	; 0xf06 <__vector_1+0xc6>
     ee0:	8a 30       	cpi	r24, 0x0A	; 10
     ee2:	09 f4       	brne	.+2      	; 0xee6 <__vector_1+0xa6>
     ee4:	60 c0       	rjmp	.+192    	; 0xfa6 <__vector_1+0x166>
     ee6:	d1 c1       	rjmp	.+930    	; 0x128a <__vector_1+0x44a>
     ee8:	85 36       	cpi	r24, 0x65	; 101
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_1+0xae>
     eec:	09 c1       	rjmp	.+530    	; 0x1100 <__vector_1+0x2c0>
     eee:	20 f4       	brcc	.+8      	; 0xef8 <__vector_1+0xb8>
     ef0:	84 36       	cpi	r24, 0x64	; 100
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__vector_1+0xb6>
     ef4:	c8 c0       	rjmp	.+400    	; 0x1086 <__vector_1+0x246>
     ef6:	c9 c1       	rjmp	.+914    	; 0x128a <__vector_1+0x44a>
     ef8:	8e 36       	cpi	r24, 0x6E	; 110
     efa:	09 f4       	brne	.+2      	; 0xefe <__vector_1+0xbe>
     efc:	3f c1       	rjmp	.+638    	; 0x117c <__vector_1+0x33c>
     efe:	8f 36       	cpi	r24, 0x6F	; 111
     f00:	09 f4       	brne	.+2      	; 0xf04 <__vector_1+0xc4>
     f02:	82 c1       	rjmp	.+772    	; 0x1208 <__vector_1+0x3c8>
     f04:	c2 c1       	rjmp	.+900    	; 0x128a <__vector_1+0x44a>
		{
			case 0:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f06:	60 91 fb 00 	lds	r22, 0x00FB	; 0x8000fb <RX_BUF+0x3>
     f0a:	63 33       	cpi	r22, 0x33	; 51
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <__vector_1+0xd0>
     f0e:	bd c1       	rjmp	.+890    	; 0x128a <__vector_1+0x44a>
     f10:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <RX_BUF+0x4>
     f14:	8a 30       	cpi	r24, 0x0A	; 10
     f16:	08 f0       	brcs	.+2      	; 0xf1a <__vector_1+0xda>
     f18:	b8 c1       	rjmp	.+880    	; 0x128a <__vector_1+0x44a>
     f1a:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
     f1e:	93 33       	cpi	r25, 0x33	; 51
     f20:	08 f0       	brcs	.+2      	; 0xf24 <__vector_1+0xe4>
     f22:	b3 c1       	rjmp	.+870    	; 0x128a <__vector_1+0x44a>
     f24:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <RX_BUF+0x2>
     f28:	9a 30       	cpi	r25, 0x0A	; 10
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <__vector_1+0xee>
     f2c:	ae c1       	rjmp	.+860    	; 0x128a <__vector_1+0x44a>
					{
						work_mode = 0;
     f2e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f32:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     f36:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <home_temp_rx_fraction>
						EEPROM_write(3, home_temp_rx_integer);
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	bc d9       	rcall	.-3208   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
     f40:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	b7 d9       	rcall	.-3218   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
     f4a:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b2 d9       	rcall	.-3228   	; 0x2b8 <EEPROM_write>
     f54:	9a c1       	rjmp	.+820    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 1:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f56:	60 91 fb 00 	lds	r22, 0x00FB	; 0x8000fb <RX_BUF+0x3>
     f5a:	63 33       	cpi	r22, 0x33	; 51
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <__vector_1+0x120>
     f5e:	95 c1       	rjmp	.+810    	; 0x128a <__vector_1+0x44a>
     f60:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <RX_BUF+0x4>
     f64:	8a 30       	cpi	r24, 0x0A	; 10
     f66:	08 f0       	brcs	.+2      	; 0xf6a <__vector_1+0x12a>
     f68:	90 c1       	rjmp	.+800    	; 0x128a <__vector_1+0x44a>
     f6a:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
     f6e:	93 33       	cpi	r25, 0x33	; 51
     f70:	08 f0       	brcs	.+2      	; 0xf74 <__vector_1+0x134>
     f72:	8b c1       	rjmp	.+790    	; 0x128a <__vector_1+0x44a>
     f74:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <RX_BUF+0x2>
     f78:	9a 30       	cpi	r25, 0x0A	; 10
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__vector_1+0x13e>
     f7c:	86 c1       	rjmp	.+780    	; 0x128a <__vector_1+0x44a>
					{
						work_mode = 0;
     f7e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f82:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     f86:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <home_temp_rx_fraction>
						EEPROM_write(3, home_temp_rx_integer);
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	94 d9       	rcall	.-3288   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
     f90:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	8f d9       	rcall	.-3298   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
     f9a:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	8a d9       	rcall	.-3308   	; 0x2b8 <EEPROM_write>
     fa4:	72 c1       	rjmp	.+740    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 10:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     fa6:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
     faa:	83 33       	cpi	r24, 0x33	; 51
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <__vector_1+0x170>
     fae:	6d c1       	rjmp	.+730    	; 0x128a <__vector_1+0x44a>
     fb0:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
     fb4:	9a 30       	cpi	r25, 0x0A	; 10
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__vector_1+0x17a>
     fb8:	68 c1       	rjmp	.+720    	; 0x128a <__vector_1+0x44a>
     fba:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
     fbe:	23 33       	cpi	r18, 0x33	; 51
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <__vector_1+0x184>
     fc2:	63 c1       	rjmp	.+710    	; 0x128a <__vector_1+0x44a>
     fc4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <RX_BUF+0x2>
     fc8:	2a 30       	cpi	r18, 0x0A	; 10
     fca:	08 f0       	brcs	.+2      	; 0xfce <__vector_1+0x18e>
     fcc:	5e c1       	rjmp	.+700    	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 0;
     fce:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 1;
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     fd8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
     fdc:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						PORTB |= (1<<MOSFET);
     fe0:	88 b3       	in	r24, 0x18	; 24
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
     fe6:	82 b3       	in	r24, 0x12	; 18
     fe8:	8f 7e       	andi	r24, 0xEF	; 239
     fea:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(3, home_temp_rx_integer);
     fec:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	61 d9       	rcall	.-3390   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
     ff6:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
     ffa:	84 e0       	ldi	r24, 0x04	; 4
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	5c d9       	rcall	.-3400   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    1000:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	57 d9       	rcall	.-3410   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    100a:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	52 d9       	rcall	.-3420   	; 0x2b8 <EEPROM_write>
    1014:	3a c1       	rjmp	.+628    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 11:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    1016:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
    101a:	83 33       	cpi	r24, 0x33	; 51
    101c:	08 f0       	brcs	.+2      	; 0x1020 <__vector_1+0x1e0>
    101e:	35 c1       	rjmp	.+618    	; 0x128a <__vector_1+0x44a>
    1020:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
    1024:	9a 30       	cpi	r25, 0x0A	; 10
    1026:	08 f0       	brcs	.+2      	; 0x102a <__vector_1+0x1ea>
    1028:	30 c1       	rjmp	.+608    	; 0x128a <__vector_1+0x44a>
    102a:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
    102e:	23 33       	cpi	r18, 0x33	; 51
    1030:	08 f0       	brcs	.+2      	; 0x1034 <__vector_1+0x1f4>
    1032:	2b c1       	rjmp	.+598    	; 0x128a <__vector_1+0x44a>
    1034:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <RX_BUF+0x2>
    1038:	2a 30       	cpi	r18, 0x0A	; 10
    103a:	08 f0       	brcs	.+2      	; 0x103e <__vector_1+0x1fe>
    103c:	26 c1       	rjmp	.+588    	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 1;
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 1;
    1044:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1048:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    104c:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						PORTB &= ~(1<<MOSFET);
    1050:	88 b3       	in	r24, 0x18	; 24
    1052:	8e 7f       	andi	r24, 0xFE	; 254
    1054:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
    1056:	82 b3       	in	r24, 0x12	; 18
    1058:	80 61       	ori	r24, 0x10	; 16
    105a:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(3, home_temp_rx_integer);
    105c:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	29 d9       	rcall	.-3502   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    1066:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	24 d9       	rcall	.-3512   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    1070:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    1074:	85 e0       	ldi	r24, 0x05	; 5
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	1f d9       	rcall	.-3522   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    107a:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    107e:	86 e0       	ldi	r24, 0x06	; 6
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	1a d9       	rcall	.-3532   	; 0x2b8 <EEPROM_write>
    1084:	02 c1       	rjmp	.+516    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 100:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    1086:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
    108a:	83 33       	cpi	r24, 0x33	; 51
    108c:	08 f0       	brcs	.+2      	; 0x1090 <__vector_1+0x250>
    108e:	fd c0       	rjmp	.+506    	; 0x128a <__vector_1+0x44a>
    1090:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
    1094:	9a 30       	cpi	r25, 0x0A	; 10
    1096:	08 f0       	brcs	.+2      	; 0x109a <__vector_1+0x25a>
    1098:	f8 c0       	rjmp	.+496    	; 0x128a <__vector_1+0x44a>
    109a:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
    109e:	63 33       	cpi	r22, 0x33	; 51
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <__vector_1+0x264>
    10a2:	f3 c0       	rjmp	.+486    	; 0x128a <__vector_1+0x44a>
    10a4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <RX_BUF+0x2>
    10a8:	2a 30       	cpi	r18, 0x0A	; 10
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__vector_1+0x26e>
    10ac:	ee c0       	rjmp	.+476    	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 0;
    10ae:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 0;
    10b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    10b6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    10ba:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    10be:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    10c2:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <temp_setpoint_fraction>
						EEPROM_write(1, temp_setpoint_integer);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	f6 d8       	rcall	.-3604   	; 0x2b8 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    10cc:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	f1 d8       	rcall	.-3614   	; 0x2b8 <EEPROM_write>
						EEPROM_write(3, home_temp_rx_integer);
    10d6:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	ec d8       	rcall	.-3624   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    10e0:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	e7 d8       	rcall	.-3634   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    10ea:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	e2 d8       	rcall	.-3644   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    10f4:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    10f8:	86 e0       	ldi	r24, 0x06	; 6
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	dd d8       	rcall	.-3654   	; 0x2b8 <EEPROM_write>
    10fe:	c5 c0       	rjmp	.+394    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 101:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    1100:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
    1104:	83 33       	cpi	r24, 0x33	; 51
    1106:	08 f0       	brcs	.+2      	; 0x110a <__vector_1+0x2ca>
    1108:	c0 c0       	rjmp	.+384    	; 0x128a <__vector_1+0x44a>
    110a:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
    110e:	9a 30       	cpi	r25, 0x0A	; 10
    1110:	08 f0       	brcs	.+2      	; 0x1114 <__vector_1+0x2d4>
    1112:	bb c0       	rjmp	.+374    	; 0x128a <__vector_1+0x44a>
    1114:	60 91 f9 00 	lds	r22, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
    1118:	63 33       	cpi	r22, 0x33	; 51
    111a:	08 f0       	brcs	.+2      	; 0x111e <__vector_1+0x2de>
    111c:	b6 c0       	rjmp	.+364    	; 0x128a <__vector_1+0x44a>
    111e:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <RX_BUF+0x2>
    1122:	2a 30       	cpi	r18, 0x0A	; 10
    1124:	08 f0       	brcs	.+2      	; 0x1128 <__vector_1+0x2e8>
    1126:	b1 c0       	rjmp	.+354    	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 1;
    1128:	31 e0       	ldi	r19, 0x01	; 1
    112a:	30 93 ec 00 	sts	0x00EC, r19	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 0;
    112e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1132:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    1136:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    113a:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    113e:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <temp_setpoint_fraction>
						EEPROM_write(1, temp_setpoint_integer);
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	b8 d8       	rcall	.-3728   	; 0x2b8 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    1148:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	b3 d8       	rcall	.-3738   	; 0x2b8 <EEPROM_write>
						EEPROM_write(3, home_temp_rx_integer);
    1152:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	ae d8       	rcall	.-3748   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    115c:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 d8       	rcall	.-3758   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    1166:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a4 d8       	rcall	.-3768   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    1170:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    1174:	86 e0       	ldi	r24, 0x06	; 6
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9f d8       	rcall	.-3778   	; 0x2b8 <EEPROM_write>
    117a:	87 c0       	rjmp	.+270    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 110:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    117c:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
    1180:	83 33       	cpi	r24, 0x33	; 51
    1182:	08 f0       	brcs	.+2      	; 0x1186 <__vector_1+0x346>
    1184:	82 c0       	rjmp	.+260    	; 0x128a <__vector_1+0x44a>
    1186:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
    118a:	9a 30       	cpi	r25, 0x0A	; 10
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__vector_1+0x350>
    118e:	7d c0       	rjmp	.+250    	; 0x128a <__vector_1+0x44a>
    1190:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
    1194:	23 33       	cpi	r18, 0x33	; 51
    1196:	08 f0       	brcs	.+2      	; 0x119a <__vector_1+0x35a>
    1198:	78 c0       	rjmp	.+240    	; 0x128a <__vector_1+0x44a>
    119a:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <RX_BUF+0x2>
    119e:	3a 30       	cpi	r19, 0x0A	; 10
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <__vector_1+0x364>
    11a2:	73 c0       	rjmp	.+230    	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 0;
    11a4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 1;
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    11ae:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    11b2:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    11b6:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    11ba:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <temp_setpoint_fraction>
						PORTB |= (1<<MOSFET);
    11be:	88 b3       	in	r24, 0x18	; 24
    11c0:	81 60       	ori	r24, 0x01	; 1
    11c2:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
    11c4:	82 b3       	in	r24, 0x12	; 18
    11c6:	8f 7e       	andi	r24, 0xEF	; 239
    11c8:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(1, temp_setpoint_integer);
    11ca:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	72 d8       	rcall	.-3868   	; 0x2b8 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    11d4:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	6d d8       	rcall	.-3878   	; 0x2b8 <EEPROM_write>
						EEPROM_write(3, home_temp_rx_integer);
    11de:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	68 d8       	rcall	.-3888   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    11e8:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	63 d8       	rcall	.-3898   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    11f2:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    11f6:	85 e0       	ldi	r24, 0x05	; 5
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	5e d8       	rcall	.-3908   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    11fc:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	59 d8       	rcall	.-3918   	; 0x2b8 <EEPROM_write>
    1206:	41 c0       	rjmp	.+130    	; 0x128a <__vector_1+0x44a>
					}
					break;
			case 111:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    1208:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <RX_BUF+0x3>
    120c:	83 33       	cpi	r24, 0x33	; 51
    120e:	e8 f5       	brcc	.+122    	; 0x128a <__vector_1+0x44a>
    1210:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <RX_BUF+0x4>
    1214:	9a 30       	cpi	r25, 0x0A	; 10
    1216:	c8 f5       	brcc	.+114    	; 0x128a <__vector_1+0x44a>
    1218:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <RX_BUF+0x1>
    121c:	23 33       	cpi	r18, 0x33	; 51
    121e:	a8 f5       	brcc	.+106    	; 0x128a <__vector_1+0x44a>
    1220:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <RX_BUF+0x2>
    1224:	3a 30       	cpi	r19, 0x0A	; 10
    1226:	88 f5       	brcc	.+98     	; 0x128a <__vector_1+0x44a>
					{
						gas_boiler_enable_flag = 1;
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <gas_boiler_enable_flag>
						work_mode = 1;
    122e:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1232:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <home_temp_rx_integer>
						home_temp_rx_fraction = RX_BUF[4];
    1236:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    123a:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    123e:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <temp_setpoint_fraction>
						PORTB &= ~(1<<MOSFET);
    1242:	88 b3       	in	r24, 0x18	; 24
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
    1248:	82 b3       	in	r24, 0x12	; 18
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(1, temp_setpoint_integer);
    124e:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <temp_setpoint_integer>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	30 d8       	rcall	.-4000   	; 0x2b8 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    1258:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <temp_setpoint_fraction>
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	2b d8       	rcall	.-4010   	; 0x2b8 <EEPROM_write>
						EEPROM_write(3, home_temp_rx_integer);
    1262:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <home_temp_rx_integer>
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	26 d8       	rcall	.-4020   	; 0x2b8 <EEPROM_write>
						EEPROM_write(4, home_temp_rx_fraction);
    126c:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <home_temp_rx_fraction>
    1270:	84 e0       	ldi	r24, 0x04	; 4
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	21 d8       	rcall	.-4030   	; 0x2b8 <EEPROM_write>
						EEPROM_write(5, gas_boiler_enable_flag);
    1276:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <gas_boiler_enable_flag>
    127a:	85 e0       	ldi	r24, 0x05	; 5
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	1c d8       	rcall	.-4040   	; 0x2b8 <EEPROM_write>
						EEPROM_write(6, work_mode);
    1280:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <work_mode>
    1284:	86 e0       	ldi	r24, 0x06	; 6
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	17 d8       	rcall	.-4050   	; 0x2b8 <EEPROM_write>
		}
		home_temp_rx_integer = RX_BUF[3];
		home_temp_rx_fraction = RX_BUF[4];
		*/
	}
	if(status&TX_DS) //tx_ds == 0x20
    128a:	c5 70       	andi	r28, 0x05	; 5
    128c:	19 f0       	breq	.+6      	; 0x1294 <__vector_1+0x454>
	{
		nRF_write_register(STATUS, 0x20);
    128e:	60 e2       	ldi	r22, 0x20	; 32
    1290:	87 e0       	ldi	r24, 0x07	; 7
    1292:	b4 dd       	rcall	.-1176   	; 0xdfc <nRF_write_register>
	}
}
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	cf 91       	pop	r28
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	b0 dd       	rcall	.-1184   	; 0xe1c <nRF_read_register>
	//разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
    12bc:	68 2f       	mov	r22, r24
    12be:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	9c dd       	rcall	.-1224   	; 0xdfc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    12c4:	43 e0       	ldi	r20, 0x03	; 3
    12c6:	60 e6       	ldi	r22, 0x60	; 96
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e1       	ldi	r24, 0x10	; 16
    12cc:	5c dd       	rcall	.-1352   	; 0xd86 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    12ce:	43 e0       	ldi	r20, 0x03	; 3
    12d0:	60 e6       	ldi	r22, 0x60	; 96
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	8b e0       	ldi	r24, 0x0B	; 11
    12d6:	57 dd       	rcall	.-1362   	; 0xd86 <NRF24_Write_Buf>
	HIGH_CE;
    12d8:	88 b3       	in	r24, 0x18	; 24
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12de:	87 e5       	ldi	r24, 0x57	; 87
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <NRF24L01_RX_Mode+0x2a>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <NRF24L01_RX_Mode+0x30>
    12e8:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    12ea:	f9 dc       	rcall	.-1550   	; 0xcde <NRF24_FlushRX>
	NRF24_FlushTX();
    12ec:	06 dd       	rcall	.-1524   	; 0xcfa <NRF24_FlushTX>
    12ee:	08 95       	ret

000012f0 <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    12f0:	88 b3       	in	r24, 0x18	; 24
    12f2:	8d 7f       	andi	r24, 0xFD	; 253
    12f4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f6:	8f e1       	ldi	r24, 0x1F	; 31
    12f8:	9e e4       	ldi	r25, 0x4E	; 78
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <NRF24_ini+0xa>
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <NRF24_ini+0x10>
    1300:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    1302:	6a e0       	ldi	r22, 0x0A	; 10
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	7a dd       	rcall	.-1292   	; 0xdfc <nRF_write_register>
    1308:	8f e1       	ldi	r24, 0x1F	; 31
    130a:	9e e4       	ldi	r25, 0x4E	; 78
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <NRF24_ini+0x1c>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <NRF24_ini+0x22>
    1312:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    1314:	63 e0       	ldi	r22, 0x03	; 3
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	71 dd       	rcall	.-1310   	; 0xdfc <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	6e dd       	rcall	.-1316   	; 0xdfc <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	6b dd       	rcall	.-1322   	; 0xdfc <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    1326:	6f e6       	ldi	r22, 0x6F	; 111
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	68 dd       	rcall	.-1328   	; 0xdfc <nRF_write_register>
	NRF24_ToggleFeatures();
    132c:	f4 dc       	rcall	.-1560   	; 0xd16 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	8d e1       	ldi	r24, 0x1D	; 29
    1332:	64 dd       	rcall	.-1336   	; 0xdfc <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	8c e1       	ldi	r24, 0x1C	; 28
    1338:	61 dd       	rcall	.-1342   	; 0xdfc <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    133a:	60 e7       	ldi	r22, 0x70	; 112
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	5e dd       	rcall	.-1348   	; 0xdfc <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    1340:	6c e4       	ldi	r22, 0x4C	; 76
    1342:	85 e0       	ldi	r24, 0x05	; 5
    1344:	5b dd       	rcall	.-1354   	; 0xdfc <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    1346:	66 e0       	ldi	r22, 0x06	; 6
    1348:	86 e0       	ldi	r24, 0x06	; 6
    134a:	58 dd       	rcall	.-1360   	; 0xdfc <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    134c:	43 e0       	ldi	r20, 0x03	; 3
    134e:	60 e6       	ldi	r22, 0x60	; 96
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	80 e1       	ldi	r24, 0x10	; 16
    1354:	18 dd       	rcall	.-1488   	; 0xd86 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    1356:	43 e0       	ldi	r20, 0x03	; 3
    1358:	60 e6       	ldi	r22, 0x60	; 96
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	8b e0       	ldi	r24, 0x0B	; 11
    135e:	13 dd       	rcall	.-1498   	; 0xd86 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    1360:	65 e0       	ldi	r22, 0x05	; 5
    1362:	82 e1       	ldi	r24, 0x12	; 18
    1364:	4b dd       	rcall	.-1386   	; 0xdfc <nRF_write_register>
	//пока уходим в режим приёмника
	NRF24L01_RX_Mode();
    1366:	a8 df       	rcall	.-176    	; 0x12b8 <NRF24L01_RX_Mode>
    1368:	08 95       	ret

0000136a <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потерянных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    1370:	35 dd       	rcall	.-1430   	; 0xddc <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	53 dd       	rcall	.-1370   	; 0xe1c <nRF_read_register>
    1376:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в спящий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
    1378:	68 2f       	mov	r22, r24
    137a:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	3e dd       	rcall	.-1412   	; 0xdfc <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1380:	87 e5       	ldi	r24, 0x57	; 87
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <NRF24L01_Send+0x1a>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <NRF24L01_Send+0x20>
    138a:	00 00       	nop
	_delay_us(150); //Задержка минимум 130 мкс
	//Отправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    138c:	45 e0       	ldi	r20, 0x05	; 5
    138e:	be 01       	movw	r22, r28
    1390:	80 ea       	ldi	r24, 0xA0	; 160
    1392:	75 dc       	rcall	.-1814   	; 0xc7e <NRF24_Transmit>
	HIGH_CE;
    1394:	88 b3       	in	r24, 0x18	; 24
    1396:	82 60       	ori	r24, 0x02	; 2
    1398:	88 bb       	out	0x18, r24	; 24
    139a:	90 e5       	ldi	r25, 0x50	; 80
    139c:	9a 95       	dec	r25
    139e:	f1 f7       	brne	.-4      	; 0x139c <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    13a0:	88 b3       	in	r24, 0x18	; 24
    13a2:	8d 7f       	andi	r24, 0xFD	; 253
    13a4:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
    13a6:	82 99       	sbic	0x10, 2	; 16
    13a8:	fe cf       	rjmp	.-4      	; 0x13a6 <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
    13aa:	87 e0       	ldi	r24, 0x07	; 7
    13ac:	37 dd       	rcall	.-1426   	; 0xe1c <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    13ae:	98 2f       	mov	r25, r24
    13b0:	95 70       	andi	r25, 0x05	; 5
    13b2:	99 f0       	breq	.+38     	; 0x13da <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED_TX);
    13b4:	82 b3       	in	r24, 0x12	; 18
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	81 ee       	ldi	r24, 0xE1	; 225
    13be:	94 e0       	ldi	r25, 0x04	; 4
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	80 40       	sbci	r24, 0x00	; 0
    13c4:	90 40       	sbci	r25, 0x00	; 0
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <NRF24L01_Send+0x56>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <NRF24L01_Send+0x60>
    13ca:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    13cc:	82 b3       	in	r24, 0x12	; 18
    13ce:	8f 7b       	andi	r24, 0xBF	; 191
    13d0:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
    13d2:	60 e2       	ldi	r22, 0x20	; 32
    13d4:	87 e0       	ldi	r24, 0x07	; 7
    13d6:	12 dd       	rcall	.-1500   	; 0xdfc <nRF_write_register>
    13d8:	06 c0       	rjmp	.+12     	; 0x13e6 <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
    13da:	82 ff       	sbrs	r24, 2
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
    13de:	60 e1       	ldi	r22, 0x10	; 16
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	0c dd       	rcall	.-1512   	; 0xdfc <nRF_write_register>
		NRF24_FlushTX();
    13e4:	8a dc       	rcall	.-1772   	; 0xcfa <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    13e6:	88 e0       	ldi	r24, 0x08	; 8
    13e8:	19 dd       	rcall	.-1486   	; 0xe1c <nRF_read_register>
    13ea:	c8 2f       	mov	r28, r24
	//Уходим в режим приёмника
	NRF24L01_RX_Mode();
    13ec:	65 df       	rcall	.-310    	; 0x12b8 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    13ee:	60 e7       	ldi	r22, 0x70	; 112
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	04 dd       	rcall	.-1528   	; 0xdfc <nRF_write_register>
	return regval;
}
    13f4:	8c 2f       	mov	r24, r28
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <USART_Init>:

extern uint8_t rx_flag;

void USART_Init( unsigned int speed)//Инициализация модуля USART
{	
  UBRRH = (unsigned char)(speed>>8);
    13fc:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    13fe:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
    1400:	8a b1       	in	r24, 0x0a	; 10
    1402:	88 61       	ori	r24, 0x18	; 24
    1404:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //Разрешаем прерывание при приеме
    1406:	8a b1       	in	r24, 0x0a	; 10
    1408:	80 68       	ori	r24, 0x80	; 128
    140a:	8a b9       	out	0x0a, r24	; 10
  UCSRA |= (1<<U2X); // Для 8 мгц, удвоение скорости
    140c:	8b b1       	in	r24, 0x0b	; 11
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	8b b9       	out	0x0b, r24	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
    1412:	80 b5       	in	r24, 0x20	; 32
    1414:	8e 68       	ori	r24, 0x8E	; 142
    1416:	80 bd       	out	0x20, r24	; 32
    1418:	08 95       	ret

0000141a <USART_Transmit>:
  //ассинхронный режим (UMSEL=0), без контроля четности (UPM1=0 и UPM0=0),
  //2 стоп-бит (USBS=1), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
  //UCSRC |= (1<<UPM1);//четность
}
void USART_Transmit( char* data ) //Функция отправки данных
{
    141a:	dc 01       	movw	r26, r24
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <USART_Transmit+0x16>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//Ожидание опустошения буфера приема
    1420:	5d 9b       	sbis	0x0b, 5	; 11
    1422:	fe cf       	rjmp	.-4      	; 0x1420 <USART_Transmit+0x6>
	  UDR = data[i]; //Начало передачи данных
    1424:	fd 01       	movw	r30, r26
    1426:	e2 0f       	add	r30, r18
    1428:	f3 1f       	adc	r31, r19
    142a:	90 81       	ld	r25, Z
    142c:	9c b9       	out	0x0c, r25	; 12
}
void USART_Transmit( char* data ) //Функция отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    142e:	8f 5f       	subi	r24, 0xFF	; 255
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	fd 01       	movw	r30, r26
    1436:	01 90       	ld	r0, Z+
    1438:	00 20       	and	r0, r0
    143a:	e9 f7       	brne	.-6      	; 0x1436 <USART_Transmit+0x1c>
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	ea 1b       	sub	r30, r26
    1440:	fb 0b       	sbc	r31, r27
    1442:	2e 17       	cp	r18, r30
    1444:	3f 07       	cpc	r19, r31
    1446:	60 f3       	brcs	.-40     	; 0x1420 <USART_Transmit+0x6>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//Ожидание опустошения буфера приема
	  UDR = data[i]; //Начало передачи данных
  }
}
    1448:	08 95       	ret

0000144a <__divmodhi4>:
    144a:	97 fb       	bst	r25, 7
    144c:	07 2e       	mov	r0, r23
    144e:	16 f4       	brtc	.+4      	; 0x1454 <__divmodhi4+0xa>
    1450:	00 94       	com	r0
    1452:	06 d0       	rcall	.+12     	; 0x1460 <__divmodhi4_neg1>
    1454:	77 fd       	sbrc	r23, 7
    1456:	08 d0       	rcall	.+16     	; 0x1468 <__divmodhi4_neg2>
    1458:	33 d0       	rcall	.+102    	; 0x14c0 <__udivmodhi4>
    145a:	07 fc       	sbrc	r0, 7
    145c:	05 d0       	rcall	.+10     	; 0x1468 <__divmodhi4_neg2>
    145e:	3e f4       	brtc	.+14     	; 0x146e <__divmodhi4_exit>

00001460 <__divmodhi4_neg1>:
    1460:	90 95       	com	r25
    1462:	81 95       	neg	r24
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	08 95       	ret

00001468 <__divmodhi4_neg2>:
    1468:	70 95       	com	r23
    146a:	61 95       	neg	r22
    146c:	7f 4f       	sbci	r23, 0xFF	; 255

0000146e <__divmodhi4_exit>:
    146e:	08 95       	ret

00001470 <__divmodsi4>:
    1470:	05 2e       	mov	r0, r21
    1472:	97 fb       	bst	r25, 7
    1474:	16 f4       	brtc	.+4      	; 0x147a <__divmodsi4+0xa>
    1476:	00 94       	com	r0
    1478:	0f d0       	rcall	.+30     	; 0x1498 <__negsi2>
    147a:	57 fd       	sbrc	r21, 7
    147c:	05 d0       	rcall	.+10     	; 0x1488 <__divmodsi4_neg2>
    147e:	34 d0       	rcall	.+104    	; 0x14e8 <__udivmodsi4>
    1480:	07 fc       	sbrc	r0, 7
    1482:	02 d0       	rcall	.+4      	; 0x1488 <__divmodsi4_neg2>
    1484:	46 f4       	brtc	.+16     	; 0x1496 <__divmodsi4_exit>
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <__negsi2>

00001488 <__divmodsi4_neg2>:
    1488:	50 95       	com	r21
    148a:	40 95       	com	r20
    148c:	30 95       	com	r19
    148e:	21 95       	neg	r18
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	4f 4f       	sbci	r20, 0xFF	; 255
    1494:	5f 4f       	sbci	r21, 0xFF	; 255

00001496 <__divmodsi4_exit>:
    1496:	08 95       	ret

00001498 <__negsi2>:
    1498:	90 95       	com	r25
    149a:	80 95       	com	r24
    149c:	70 95       	com	r23
    149e:	61 95       	neg	r22
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	08 95       	ret

000014a8 <__umulhisi3>:
    14a8:	a2 9f       	mul	r26, r18
    14aa:	b0 01       	movw	r22, r0
    14ac:	b3 9f       	mul	r27, r19
    14ae:	c0 01       	movw	r24, r0
    14b0:	a3 9f       	mul	r26, r19
    14b2:	01 d0       	rcall	.+2      	; 0x14b6 <__umulhisi3+0xe>
    14b4:	b2 9f       	mul	r27, r18
    14b6:	70 0d       	add	r23, r0
    14b8:	81 1d       	adc	r24, r1
    14ba:	11 24       	eor	r1, r1
    14bc:	91 1d       	adc	r25, r1
    14be:	08 95       	ret

000014c0 <__udivmodhi4>:
    14c0:	aa 1b       	sub	r26, r26
    14c2:	bb 1b       	sub	r27, r27
    14c4:	51 e1       	ldi	r21, 0x11	; 17
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <__udivmodhi4_ep>

000014c8 <__udivmodhi4_loop>:
    14c8:	aa 1f       	adc	r26, r26
    14ca:	bb 1f       	adc	r27, r27
    14cc:	a6 17       	cp	r26, r22
    14ce:	b7 07       	cpc	r27, r23
    14d0:	10 f0       	brcs	.+4      	; 0x14d6 <__udivmodhi4_ep>
    14d2:	a6 1b       	sub	r26, r22
    14d4:	b7 0b       	sbc	r27, r23

000014d6 <__udivmodhi4_ep>:
    14d6:	88 1f       	adc	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	5a 95       	dec	r21
    14dc:	a9 f7       	brne	.-22     	; 0x14c8 <__udivmodhi4_loop>
    14de:	80 95       	com	r24
    14e0:	90 95       	com	r25
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	08 95       	ret

000014e8 <__udivmodsi4>:
    14e8:	a1 e2       	ldi	r26, 0x21	; 33
    14ea:	1a 2e       	mov	r1, r26
    14ec:	aa 1b       	sub	r26, r26
    14ee:	bb 1b       	sub	r27, r27
    14f0:	fd 01       	movw	r30, r26
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <__udivmodsi4_ep>

000014f4 <__udivmodsi4_loop>:
    14f4:	aa 1f       	adc	r26, r26
    14f6:	bb 1f       	adc	r27, r27
    14f8:	ee 1f       	adc	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	a2 17       	cp	r26, r18
    14fe:	b3 07       	cpc	r27, r19
    1500:	e4 07       	cpc	r30, r20
    1502:	f5 07       	cpc	r31, r21
    1504:	20 f0       	brcs	.+8      	; 0x150e <__udivmodsi4_ep>
    1506:	a2 1b       	sub	r26, r18
    1508:	b3 0b       	sbc	r27, r19
    150a:	e4 0b       	sbc	r30, r20
    150c:	f5 0b       	sbc	r31, r21

0000150e <__udivmodsi4_ep>:
    150e:	66 1f       	adc	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	1a 94       	dec	r1
    1518:	69 f7       	brne	.-38     	; 0x14f4 <__udivmodsi4_loop>
    151a:	60 95       	com	r22
    151c:	70 95       	com	r23
    151e:	80 95       	com	r24
    1520:	90 95       	com	r25
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	bd 01       	movw	r22, r26
    1528:	cf 01       	movw	r24, r30
    152a:	08 95       	ret

0000152c <memcpy>:
    152c:	fb 01       	movw	r30, r22
    152e:	dc 01       	movw	r26, r24
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <memcpy+0xa>
    1532:	01 90       	ld	r0, Z+
    1534:	0d 92       	st	X+, r0
    1536:	41 50       	subi	r20, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	d8 f7       	brcc	.-10     	; 0x1532 <memcpy+0x6>
    153c:	08 95       	ret

0000153e <memset>:
    153e:	dc 01       	movw	r26, r24
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <memset+0x6>
    1542:	6d 93       	st	X+, r22
    1544:	41 50       	subi	r20, 0x01	; 1
    1546:	50 40       	sbci	r21, 0x00	; 0
    1548:	e0 f7       	brcc	.-8      	; 0x1542 <memset+0x4>
    154a:	08 95       	ret

0000154c <strstr>:
    154c:	fb 01       	movw	r30, r22
    154e:	51 91       	ld	r21, Z+
    1550:	55 23       	and	r21, r21
    1552:	a9 f0       	breq	.+42     	; 0x157e <strstr+0x32>
    1554:	bf 01       	movw	r22, r30
    1556:	dc 01       	movw	r26, r24
    1558:	4d 91       	ld	r20, X+
    155a:	45 17       	cp	r20, r21
    155c:	41 11       	cpse	r20, r1
    155e:	e1 f7       	brne	.-8      	; 0x1558 <strstr+0xc>
    1560:	59 f4       	brne	.+22     	; 0x1578 <strstr+0x2c>
    1562:	cd 01       	movw	r24, r26
    1564:	01 90       	ld	r0, Z+
    1566:	00 20       	and	r0, r0
    1568:	49 f0       	breq	.+18     	; 0x157c <strstr+0x30>
    156a:	4d 91       	ld	r20, X+
    156c:	40 15       	cp	r20, r0
    156e:	41 11       	cpse	r20, r1
    1570:	c9 f3       	breq	.-14     	; 0x1564 <strstr+0x18>
    1572:	fb 01       	movw	r30, r22
    1574:	41 11       	cpse	r20, r1
    1576:	ef cf       	rjmp	.-34     	; 0x1556 <strstr+0xa>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	08 95       	ret

00001580 <sprintf>:
    1580:	ae e0       	ldi	r26, 0x0E	; 14
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e5 ec       	ldi	r30, 0xC5	; 197
    1586:	fa e0       	ldi	r31, 0x0A	; 10
    1588:	aa c2       	rjmp	.+1364   	; 0x1ade <__prologue_saves__+0x1c>
    158a:	0d 89       	ldd	r16, Y+21	; 0x15
    158c:	1e 89       	ldd	r17, Y+22	; 0x16
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	8c 83       	std	Y+4, r24	; 0x04
    1592:	1a 83       	std	Y+2, r17	; 0x02
    1594:	09 83       	std	Y+1, r16	; 0x01
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f e7       	ldi	r25, 0x7F	; 127
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	ae 01       	movw	r20, r28
    15a0:	47 5e       	subi	r20, 0xE7	; 231
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	6f 89       	ldd	r22, Y+23	; 0x17
    15a6:	78 8d       	ldd	r23, Y+24	; 0x18
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	08 d0       	rcall	.+16     	; 0x15be <vfprintf>
    15ae:	ef 81       	ldd	r30, Y+7	; 0x07
    15b0:	f8 85       	ldd	r31, Y+8	; 0x08
    15b2:	e0 0f       	add	r30, r16
    15b4:	f1 1f       	adc	r31, r17
    15b6:	10 82       	st	Z, r1
    15b8:	2e 96       	adiw	r28, 0x0e	; 14
    15ba:	e4 e0       	ldi	r30, 0x04	; 4
    15bc:	ac c2       	rjmp	.+1368   	; 0x1b16 <__epilogue_restores__+0x1c>

000015be <vfprintf>:
    15be:	ab e0       	ldi	r26, 0x0B	; 11
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e4 ee       	ldi	r30, 0xE4	; 228
    15c4:	fa e0       	ldi	r31, 0x0A	; 10
    15c6:	7d c2       	rjmp	.+1274   	; 0x1ac2 <__prologue_saves__>
    15c8:	6c 01       	movw	r12, r24
    15ca:	7b 01       	movw	r14, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	fc 01       	movw	r30, r24
    15d0:	17 82       	std	Z+7, r1	; 0x07
    15d2:	16 82       	std	Z+6, r1	; 0x06
    15d4:	83 81       	ldd	r24, Z+3	; 0x03
    15d6:	81 ff       	sbrs	r24, 1
    15d8:	bf c1       	rjmp	.+894    	; 0x1958 <vfprintf+0x39a>
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	3c 01       	movw	r6, r24
    15e0:	f6 01       	movw	r30, r12
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	f7 01       	movw	r30, r14
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	7f 01       	movw	r14, r30
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x38>
    15f4:	ad c1       	rjmp	.+858    	; 0x1950 <vfprintf+0x392>
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x4a>
    15fa:	93 fd       	sbrc	r25, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	93 ff       	sbrs	r25, 3
    1600:	81 91       	ld	r24, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	21 f4       	brne	.+8      	; 0x1610 <vfprintf+0x52>
    1608:	b6 01       	movw	r22, r12
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	c0 d1       	rcall	.+896    	; 0x198e <fputc>
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <vfprintf+0x22>
    1610:	91 2c       	mov	r9, r1
    1612:	21 2c       	mov	r2, r1
    1614:	31 2c       	mov	r3, r1
    1616:	ff e1       	ldi	r31, 0x1F	; 31
    1618:	f3 15       	cp	r31, r3
    161a:	d8 f0       	brcs	.+54     	; 0x1652 <vfprintf+0x94>
    161c:	8b 32       	cpi	r24, 0x2B	; 43
    161e:	79 f0       	breq	.+30     	; 0x163e <vfprintf+0x80>
    1620:	38 f4       	brcc	.+14     	; 0x1630 <vfprintf+0x72>
    1622:	80 32       	cpi	r24, 0x20	; 32
    1624:	79 f0       	breq	.+30     	; 0x1644 <vfprintf+0x86>
    1626:	83 32       	cpi	r24, 0x23	; 35
    1628:	a1 f4       	brne	.+40     	; 0x1652 <vfprintf+0x94>
    162a:	23 2d       	mov	r18, r3
    162c:	20 61       	ori	r18, 0x10	; 16
    162e:	1d c0       	rjmp	.+58     	; 0x166a <vfprintf+0xac>
    1630:	8d 32       	cpi	r24, 0x2D	; 45
    1632:	61 f0       	breq	.+24     	; 0x164c <vfprintf+0x8e>
    1634:	80 33       	cpi	r24, 0x30	; 48
    1636:	69 f4       	brne	.+26     	; 0x1652 <vfprintf+0x94>
    1638:	23 2d       	mov	r18, r3
    163a:	21 60       	ori	r18, 0x01	; 1
    163c:	16 c0       	rjmp	.+44     	; 0x166a <vfprintf+0xac>
    163e:	83 2d       	mov	r24, r3
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	38 2e       	mov	r3, r24
    1644:	e3 2d       	mov	r30, r3
    1646:	e4 60       	ori	r30, 0x04	; 4
    1648:	3e 2e       	mov	r3, r30
    164a:	2a c0       	rjmp	.+84     	; 0x16a0 <vfprintf+0xe2>
    164c:	f3 2d       	mov	r31, r3
    164e:	f8 60       	ori	r31, 0x08	; 8
    1650:	1d c0       	rjmp	.+58     	; 0x168c <vfprintf+0xce>
    1652:	37 fc       	sbrc	r3, 7
    1654:	2d c0       	rjmp	.+90     	; 0x16b0 <vfprintf+0xf2>
    1656:	20 ed       	ldi	r18, 0xD0	; 208
    1658:	28 0f       	add	r18, r24
    165a:	2a 30       	cpi	r18, 0x0A	; 10
    165c:	40 f0       	brcs	.+16     	; 0x166e <vfprintf+0xb0>
    165e:	8e 32       	cpi	r24, 0x2E	; 46
    1660:	b9 f4       	brne	.+46     	; 0x1690 <vfprintf+0xd2>
    1662:	36 fc       	sbrc	r3, 6
    1664:	75 c1       	rjmp	.+746    	; 0x1950 <vfprintf+0x392>
    1666:	23 2d       	mov	r18, r3
    1668:	20 64       	ori	r18, 0x40	; 64
    166a:	32 2e       	mov	r3, r18
    166c:	19 c0       	rjmp	.+50     	; 0x16a0 <vfprintf+0xe2>
    166e:	36 fe       	sbrs	r3, 6
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xc0>
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	98 9e       	mul	r9, r24
    1676:	20 0d       	add	r18, r0
    1678:	11 24       	eor	r1, r1
    167a:	92 2e       	mov	r9, r18
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <vfprintf+0xe2>
    167e:	ea e0       	ldi	r30, 0x0A	; 10
    1680:	2e 9e       	mul	r2, r30
    1682:	20 0d       	add	r18, r0
    1684:	11 24       	eor	r1, r1
    1686:	22 2e       	mov	r2, r18
    1688:	f3 2d       	mov	r31, r3
    168a:	f0 62       	ori	r31, 0x20	; 32
    168c:	3f 2e       	mov	r3, r31
    168e:	08 c0       	rjmp	.+16     	; 0x16a0 <vfprintf+0xe2>
    1690:	8c 36       	cpi	r24, 0x6C	; 108
    1692:	21 f4       	brne	.+8      	; 0x169c <vfprintf+0xde>
    1694:	83 2d       	mov	r24, r3
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	38 2e       	mov	r3, r24
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0xe2>
    169c:	88 36       	cpi	r24, 0x68	; 104
    169e:	41 f4       	brne	.+16     	; 0x16b0 <vfprintf+0xf2>
    16a0:	f7 01       	movw	r30, r14
    16a2:	93 fd       	sbrc	r25, 3
    16a4:	85 91       	lpm	r24, Z+
    16a6:	93 ff       	sbrs	r25, 3
    16a8:	81 91       	ld	r24, Z+
    16aa:	7f 01       	movw	r14, r30
    16ac:	81 11       	cpse	r24, r1
    16ae:	b3 cf       	rjmp	.-154    	; 0x1616 <vfprintf+0x58>
    16b0:	98 2f       	mov	r25, r24
    16b2:	9f 7d       	andi	r25, 0xDF	; 223
    16b4:	95 54       	subi	r25, 0x45	; 69
    16b6:	93 30       	cpi	r25, 0x03	; 3
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <vfprintf+0x106>
    16ba:	0c 5f       	subi	r16, 0xFC	; 252
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	9f e3       	ldi	r25, 0x3F	; 63
    16c0:	99 83       	std	Y+1, r25	; 0x01
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x120>
    16c4:	83 36       	cpi	r24, 0x63	; 99
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <vfprintf+0x116>
    16c8:	83 37       	cpi	r24, 0x73	; 115
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <vfprintf+0x12a>
    16cc:	83 35       	cpi	r24, 0x53	; 83
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <vfprintf+0x114>
    16d0:	55 c0       	rjmp	.+170    	; 0x177c <vfprintf+0x1be>
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <vfprintf+0x156>
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 81       	ld	r24, Z
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	88 24       	eor	r8, r8
    16e0:	83 94       	inc	r8
    16e2:	91 2c       	mov	r9, r1
    16e4:	53 01       	movw	r10, r6
    16e6:	12 c0       	rjmp	.+36     	; 0x170c <vfprintf+0x14e>
    16e8:	28 01       	movw	r4, r16
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	4f 0e       	add	r4, r31
    16ee:	51 1c       	adc	r5, r1
    16f0:	f8 01       	movw	r30, r16
    16f2:	a0 80       	ld	r10, Z
    16f4:	b1 80       	ldd	r11, Z+1	; 0x01
    16f6:	36 fe       	sbrs	r3, 6
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x142>
    16fa:	69 2d       	mov	r22, r9
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x146>
    1700:	6f ef       	ldi	r22, 0xFF	; 255
    1702:	7f ef       	ldi	r23, 0xFF	; 255
    1704:	c5 01       	movw	r24, r10
    1706:	38 d1       	rcall	.+624    	; 0x1978 <strnlen>
    1708:	4c 01       	movw	r8, r24
    170a:	82 01       	movw	r16, r4
    170c:	f3 2d       	mov	r31, r3
    170e:	ff 77       	andi	r31, 0x7F	; 127
    1710:	3f 2e       	mov	r3, r31
    1712:	15 c0       	rjmp	.+42     	; 0x173e <vfprintf+0x180>
    1714:	28 01       	movw	r4, r16
    1716:	22 e0       	ldi	r18, 0x02	; 2
    1718:	42 0e       	add	r4, r18
    171a:	51 1c       	adc	r5, r1
    171c:	f8 01       	movw	r30, r16
    171e:	a0 80       	ld	r10, Z
    1720:	b1 80       	ldd	r11, Z+1	; 0x01
    1722:	36 fe       	sbrs	r3, 6
    1724:	03 c0       	rjmp	.+6      	; 0x172c <vfprintf+0x16e>
    1726:	69 2d       	mov	r22, r9
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x172>
    172c:	6f ef       	ldi	r22, 0xFF	; 255
    172e:	7f ef       	ldi	r23, 0xFF	; 255
    1730:	c5 01       	movw	r24, r10
    1732:	17 d1       	rcall	.+558    	; 0x1962 <strnlen_P>
    1734:	4c 01       	movw	r8, r24
    1736:	f3 2d       	mov	r31, r3
    1738:	f0 68       	ori	r31, 0x80	; 128
    173a:	3f 2e       	mov	r3, r31
    173c:	82 01       	movw	r16, r4
    173e:	33 fc       	sbrc	r3, 3
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <vfprintf+0x1b6>
    1742:	82 2d       	mov	r24, r2
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 16       	cp	r8, r24
    1748:	99 06       	cpc	r9, r25
    174a:	a0 f4       	brcc	.+40     	; 0x1774 <vfprintf+0x1b6>
    174c:	b6 01       	movw	r22, r12
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	1d d1       	rcall	.+570    	; 0x198e <fputc>
    1754:	2a 94       	dec	r2
    1756:	f5 cf       	rjmp	.-22     	; 0x1742 <vfprintf+0x184>
    1758:	f5 01       	movw	r30, r10
    175a:	37 fc       	sbrc	r3, 7
    175c:	85 91       	lpm	r24, Z+
    175e:	37 fe       	sbrs	r3, 7
    1760:	81 91       	ld	r24, Z+
    1762:	5f 01       	movw	r10, r30
    1764:	b6 01       	movw	r22, r12
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	12 d1       	rcall	.+548    	; 0x198e <fputc>
    176a:	21 10       	cpse	r2, r1
    176c:	2a 94       	dec	r2
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	82 1a       	sub	r8, r18
    1772:	91 08       	sbc	r9, r1
    1774:	81 14       	cp	r8, r1
    1776:	91 04       	cpc	r9, r1
    1778:	79 f7       	brne	.-34     	; 0x1758 <vfprintf+0x19a>
    177a:	e1 c0       	rjmp	.+450    	; 0x193e <vfprintf+0x380>
    177c:	84 36       	cpi	r24, 0x64	; 100
    177e:	11 f0       	breq	.+4      	; 0x1784 <vfprintf+0x1c6>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	39 f5       	brne	.+78     	; 0x17d2 <vfprintf+0x214>
    1784:	f8 01       	movw	r30, r16
    1786:	37 fe       	sbrs	r3, 7
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x1da>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x1ea>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	07 2e       	mov	r0, r23
    179e:	00 0c       	add	r0, r0
    17a0:	88 0b       	sbc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	0e 5f       	subi	r16, 0xFE	; 254
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	f3 2d       	mov	r31, r3
    17aa:	ff 76       	andi	r31, 0x6F	; 111
    17ac:	3f 2e       	mov	r3, r31
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <vfprintf+0x206>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	f0 68       	ori	r31, 0x80	; 128
    17c2:	3f 2e       	mov	r3, r31
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a3 01       	movw	r20, r6
    17ca:	1d d1       	rcall	.+570    	; 0x1a06 <__ultoa_invert>
    17cc:	88 2e       	mov	r8, r24
    17ce:	86 18       	sub	r8, r6
    17d0:	44 c0       	rjmp	.+136    	; 0x185a <vfprintf+0x29c>
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	31 f4       	brne	.+12     	; 0x17e2 <vfprintf+0x224>
    17d6:	23 2d       	mov	r18, r3
    17d8:	2f 7e       	andi	r18, 0xEF	; 239
    17da:	b2 2e       	mov	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	25 c0       	rjmp	.+74     	; 0x182c <vfprintf+0x26e>
    17e2:	93 2d       	mov	r25, r3
    17e4:	99 7f       	andi	r25, 0xF9	; 249
    17e6:	b9 2e       	mov	r11, r25
    17e8:	8f 36       	cpi	r24, 0x6F	; 111
    17ea:	c1 f0       	breq	.+48     	; 0x181c <vfprintf+0x25e>
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <vfprintf+0x236>
    17ee:	88 35       	cpi	r24, 0x58	; 88
    17f0:	79 f0       	breq	.+30     	; 0x1810 <vfprintf+0x252>
    17f2:	ae c0       	rjmp	.+348    	; 0x1950 <vfprintf+0x392>
    17f4:	80 37       	cpi	r24, 0x70	; 112
    17f6:	19 f0       	breq	.+6      	; 0x17fe <vfprintf+0x240>
    17f8:	88 37       	cpi	r24, 0x78	; 120
    17fa:	21 f0       	breq	.+8      	; 0x1804 <vfprintf+0x246>
    17fc:	a9 c0       	rjmp	.+338    	; 0x1950 <vfprintf+0x392>
    17fe:	e9 2f       	mov	r30, r25
    1800:	e0 61       	ori	r30, 0x10	; 16
    1802:	be 2e       	mov	r11, r30
    1804:	b4 fe       	sbrs	r11, 4
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <vfprintf+0x264>
    1808:	fb 2d       	mov	r31, r11
    180a:	f4 60       	ori	r31, 0x04	; 4
    180c:	bf 2e       	mov	r11, r31
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x264>
    1810:	34 fe       	sbrs	r3, 4
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <vfprintf+0x26a>
    1814:	29 2f       	mov	r18, r25
    1816:	26 60       	ori	r18, 0x06	; 6
    1818:	b2 2e       	mov	r11, r18
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x26a>
    181c:	28 e0       	ldi	r18, 0x08	; 8
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	05 c0       	rjmp	.+10     	; 0x182c <vfprintf+0x26e>
    1822:	20 e1       	ldi	r18, 0x10	; 16
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x26e>
    1828:	20 e1       	ldi	r18, 0x10	; 16
    182a:	32 e0       	ldi	r19, 0x02	; 2
    182c:	f8 01       	movw	r30, r16
    182e:	b7 fe       	sbrs	r11, 7
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <vfprintf+0x282>
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	0c 5f       	subi	r16, 0xFC	; 252
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0x28e>
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 5f       	subi	r16, 0xFE	; 254
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	a3 01       	movw	r20, r6
    184e:	db d0       	rcall	.+438    	; 0x1a06 <__ultoa_invert>
    1850:	88 2e       	mov	r8, r24
    1852:	86 18       	sub	r8, r6
    1854:	fb 2d       	mov	r31, r11
    1856:	ff 77       	andi	r31, 0x7F	; 127
    1858:	3f 2e       	mov	r3, r31
    185a:	36 fe       	sbrs	r3, 6
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x2ba>
    185e:	23 2d       	mov	r18, r3
    1860:	2e 7f       	andi	r18, 0xFE	; 254
    1862:	a2 2e       	mov	r10, r18
    1864:	89 14       	cp	r8, r9
    1866:	58 f4       	brcc	.+22     	; 0x187e <vfprintf+0x2c0>
    1868:	34 fe       	sbrs	r3, 4
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <vfprintf+0x2c4>
    186c:	32 fc       	sbrc	r3, 2
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <vfprintf+0x2c4>
    1870:	83 2d       	mov	r24, r3
    1872:	8e 7e       	andi	r24, 0xEE	; 238
    1874:	a8 2e       	mov	r10, r24
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <vfprintf+0x2c4>
    1878:	b8 2c       	mov	r11, r8
    187a:	a3 2c       	mov	r10, r3
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x2c6>
    187e:	b8 2c       	mov	r11, r8
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfprintf+0x2c6>
    1882:	b9 2c       	mov	r11, r9
    1884:	a4 fe       	sbrs	r10, 4
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <vfprintf+0x2e8>
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0d       	add	r30, r8
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	80 33       	cpi	r24, 0x30	; 48
    1892:	21 f4       	brne	.+8      	; 0x189c <vfprintf+0x2de>
    1894:	9a 2d       	mov	r25, r10
    1896:	99 7e       	andi	r25, 0xE9	; 233
    1898:	a9 2e       	mov	r10, r25
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <vfprintf+0x2f0>
    189c:	a2 fe       	sbrs	r10, 2
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x2ee>
    18a0:	b3 94       	inc	r11
    18a2:	b3 94       	inc	r11
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <vfprintf+0x2f0>
    18a6:	8a 2d       	mov	r24, r10
    18a8:	86 78       	andi	r24, 0x86	; 134
    18aa:	09 f0       	breq	.+2      	; 0x18ae <vfprintf+0x2f0>
    18ac:	b3 94       	inc	r11
    18ae:	a3 fc       	sbrc	r10, 3
    18b0:	10 c0       	rjmp	.+32     	; 0x18d2 <vfprintf+0x314>
    18b2:	a0 fe       	sbrs	r10, 0
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <vfprintf+0x304>
    18b6:	b2 14       	cp	r11, r2
    18b8:	80 f4       	brcc	.+32     	; 0x18da <vfprintf+0x31c>
    18ba:	28 0c       	add	r2, r8
    18bc:	92 2c       	mov	r9, r2
    18be:	9b 18       	sub	r9, r11
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <vfprintf+0x31e>
    18c2:	b2 14       	cp	r11, r2
    18c4:	58 f4       	brcc	.+22     	; 0x18dc <vfprintf+0x31e>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	60 d0       	rcall	.+192    	; 0x198e <fputc>
    18ce:	b3 94       	inc	r11
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <vfprintf+0x304>
    18d2:	b2 14       	cp	r11, r2
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x31e>
    18d6:	2b 18       	sub	r2, r11
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x320>
    18da:	98 2c       	mov	r9, r8
    18dc:	21 2c       	mov	r2, r1
    18de:	a4 fe       	sbrs	r10, 4
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <vfprintf+0x342>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	52 d0       	rcall	.+164    	; 0x198e <fputc>
    18ea:	a2 fe       	sbrs	r10, 2
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <vfprintf+0x35c>
    18ee:	a1 fc       	sbrc	r10, 1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x33a>
    18f2:	88 e7       	ldi	r24, 0x78	; 120
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x33e>
    18f8:	88 e5       	ldi	r24, 0x58	; 88
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	b6 01       	movw	r22, r12
    18fe:	0c c0       	rjmp	.+24     	; 0x1918 <vfprintf+0x35a>
    1900:	8a 2d       	mov	r24, r10
    1902:	86 78       	andi	r24, 0x86	; 134
    1904:	51 f0       	breq	.+20     	; 0x191a <vfprintf+0x35c>
    1906:	a1 fe       	sbrs	r10, 1
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x350>
    190a:	8b e2       	ldi	r24, 0x2B	; 43
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <vfprintf+0x352>
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	a7 fc       	sbrc	r10, 7
    1912:	8d e2       	ldi	r24, 0x2D	; 45
    1914:	b6 01       	movw	r22, r12
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	3a d0       	rcall	.+116    	; 0x198e <fputc>
    191a:	89 14       	cp	r8, r9
    191c:	30 f4       	brcc	.+12     	; 0x192a <vfprintf+0x36c>
    191e:	b6 01       	movw	r22, r12
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	34 d0       	rcall	.+104    	; 0x198e <fputc>
    1926:	9a 94       	dec	r9
    1928:	f8 cf       	rjmp	.-16     	; 0x191a <vfprintf+0x35c>
    192a:	8a 94       	dec	r8
    192c:	f3 01       	movw	r30, r6
    192e:	e8 0d       	add	r30, r8
    1930:	f1 1d       	adc	r31, r1
    1932:	80 81       	ld	r24, Z
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	2a d0       	rcall	.+84     	; 0x198e <fputc>
    193a:	81 10       	cpse	r8, r1
    193c:	f6 cf       	rjmp	.-20     	; 0x192a <vfprintf+0x36c>
    193e:	22 20       	and	r2, r2
    1940:	09 f4       	brne	.+2      	; 0x1944 <vfprintf+0x386>
    1942:	4e ce       	rjmp	.-868    	; 0x15e0 <vfprintf+0x22>
    1944:	b6 01       	movw	r22, r12
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	21 d0       	rcall	.+66     	; 0x198e <fputc>
    194c:	2a 94       	dec	r2
    194e:	f7 cf       	rjmp	.-18     	; 0x193e <vfprintf+0x380>
    1950:	f6 01       	movw	r30, r12
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	97 81       	ldd	r25, Z+7	; 0x07
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0x39e>
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	2b 96       	adiw	r28, 0x0b	; 11
    195e:	e2 e1       	ldi	r30, 0x12	; 18
    1960:	cc c0       	rjmp	.+408    	; 0x1afa <__epilogue_restores__>

00001962 <strnlen_P>:
    1962:	fc 01       	movw	r30, r24
    1964:	05 90       	lpm	r0, Z+
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	70 40       	sbci	r23, 0x00	; 0
    196a:	01 10       	cpse	r0, r1
    196c:	d8 f7       	brcc	.-10     	; 0x1964 <strnlen_P+0x2>
    196e:	80 95       	com	r24
    1970:	90 95       	com	r25
    1972:	8e 0f       	add	r24, r30
    1974:	9f 1f       	adc	r25, r31
    1976:	08 95       	ret

00001978 <strnlen>:
    1978:	fc 01       	movw	r30, r24
    197a:	61 50       	subi	r22, 0x01	; 1
    197c:	70 40       	sbci	r23, 0x00	; 0
    197e:	01 90       	ld	r0, Z+
    1980:	01 10       	cpse	r0, r1
    1982:	d8 f7       	brcc	.-10     	; 0x197a <strnlen+0x2>
    1984:	80 95       	com	r24
    1986:	90 95       	com	r25
    1988:	8e 0f       	add	r24, r30
    198a:	9f 1f       	adc	r25, r31
    198c:	08 95       	ret

0000198e <fputc>:
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	fb 01       	movw	r30, r22
    1998:	23 81       	ldd	r18, Z+3	; 0x03
    199a:	21 fd       	sbrc	r18, 1
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <fputc+0x16>
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	9f ef       	ldi	r25, 0xFF	; 255
    19a2:	2c c0       	rjmp	.+88     	; 0x19fc <fputc+0x6e>
    19a4:	22 ff       	sbrs	r18, 2
    19a6:	16 c0       	rjmp	.+44     	; 0x19d4 <fputc+0x46>
    19a8:	46 81       	ldd	r20, Z+6	; 0x06
    19aa:	57 81       	ldd	r21, Z+7	; 0x07
    19ac:	24 81       	ldd	r18, Z+4	; 0x04
    19ae:	35 81       	ldd	r19, Z+5	; 0x05
    19b0:	42 17       	cp	r20, r18
    19b2:	53 07       	cpc	r21, r19
    19b4:	44 f4       	brge	.+16     	; 0x19c6 <fputc+0x38>
    19b6:	a0 81       	ld	r26, Z
    19b8:	b1 81       	ldd	r27, Z+1	; 0x01
    19ba:	9d 01       	movw	r18, r26
    19bc:	2f 5f       	subi	r18, 0xFF	; 255
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	31 83       	std	Z+1, r19	; 0x01
    19c2:	20 83       	st	Z, r18
    19c4:	8c 93       	st	X, r24
    19c6:	26 81       	ldd	r18, Z+6	; 0x06
    19c8:	37 81       	ldd	r19, Z+7	; 0x07
    19ca:	2f 5f       	subi	r18, 0xFF	; 255
    19cc:	3f 4f       	sbci	r19, 0xFF	; 255
    19ce:	37 83       	std	Z+7, r19	; 0x07
    19d0:	26 83       	std	Z+6, r18	; 0x06
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <fputc+0x6e>
    19d4:	8b 01       	movw	r16, r22
    19d6:	ec 01       	movw	r28, r24
    19d8:	fb 01       	movw	r30, r22
    19da:	00 84       	ldd	r0, Z+8	; 0x08
    19dc:	f1 85       	ldd	r31, Z+9	; 0x09
    19de:	e0 2d       	mov	r30, r0
    19e0:	09 95       	icall
    19e2:	89 2b       	or	r24, r25
    19e4:	e1 f6       	brne	.-72     	; 0x199e <fputc+0x10>
    19e6:	d8 01       	movw	r26, r16
    19e8:	16 96       	adiw	r26, 0x06	; 6
    19ea:	8d 91       	ld	r24, X+
    19ec:	9c 91       	ld	r25, X
    19ee:	17 97       	sbiw	r26, 0x07	; 7
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	17 96       	adiw	r26, 0x07	; 7
    19f4:	9c 93       	st	X, r25
    19f6:	8e 93       	st	-X, r24
    19f8:	16 97       	sbiw	r26, 0x06	; 6
    19fa:	ce 01       	movw	r24, r28
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	08 95       	ret

00001a06 <__ultoa_invert>:
    1a06:	fa 01       	movw	r30, r20
    1a08:	aa 27       	eor	r26, r26
    1a0a:	28 30       	cpi	r18, 0x08	; 8
    1a0c:	51 f1       	breq	.+84     	; 0x1a62 <__ultoa_invert+0x5c>
    1a0e:	20 31       	cpi	r18, 0x10	; 16
    1a10:	81 f1       	breq	.+96     	; 0x1a72 <__ultoa_invert+0x6c>
    1a12:	e8 94       	clt
    1a14:	6f 93       	push	r22
    1a16:	6e 7f       	andi	r22, 0xFE	; 254
    1a18:	6e 5f       	subi	r22, 0xFE	; 254
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	af 4f       	sbci	r26, 0xFF	; 255
    1a22:	b1 e0       	ldi	r27, 0x01	; 1
    1a24:	3e d0       	rcall	.+124    	; 0x1aa2 <__ultoa_invert+0x9c>
    1a26:	b4 e0       	ldi	r27, 0x04	; 4
    1a28:	3c d0       	rcall	.+120    	; 0x1aa2 <__ultoa_invert+0x9c>
    1a2a:	67 0f       	add	r22, r23
    1a2c:	78 1f       	adc	r23, r24
    1a2e:	89 1f       	adc	r24, r25
    1a30:	9a 1f       	adc	r25, r26
    1a32:	a1 1d       	adc	r26, r1
    1a34:	68 0f       	add	r22, r24
    1a36:	79 1f       	adc	r23, r25
    1a38:	8a 1f       	adc	r24, r26
    1a3a:	91 1d       	adc	r25, r1
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	6a 0f       	add	r22, r26
    1a40:	71 1d       	adc	r23, r1
    1a42:	81 1d       	adc	r24, r1
    1a44:	91 1d       	adc	r25, r1
    1a46:	a1 1d       	adc	r26, r1
    1a48:	20 d0       	rcall	.+64     	; 0x1a8a <__ultoa_invert+0x84>
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <__ultoa_invert+0x48>
    1a4c:	68 94       	set
    1a4e:	3f 91       	pop	r19
    1a50:	2a e0       	ldi	r18, 0x0A	; 10
    1a52:	26 9f       	mul	r18, r22
    1a54:	11 24       	eor	r1, r1
    1a56:	30 19       	sub	r19, r0
    1a58:	30 5d       	subi	r19, 0xD0	; 208
    1a5a:	31 93       	st	Z+, r19
    1a5c:	de f6       	brtc	.-74     	; 0x1a14 <__ultoa_invert+0xe>
    1a5e:	cf 01       	movw	r24, r30
    1a60:	08 95       	ret
    1a62:	46 2f       	mov	r20, r22
    1a64:	47 70       	andi	r20, 0x07	; 7
    1a66:	40 5d       	subi	r20, 0xD0	; 208
    1a68:	41 93       	st	Z+, r20
    1a6a:	b3 e0       	ldi	r27, 0x03	; 3
    1a6c:	0f d0       	rcall	.+30     	; 0x1a8c <__ultoa_invert+0x86>
    1a6e:	c9 f7       	brne	.-14     	; 0x1a62 <__ultoa_invert+0x5c>
    1a70:	f6 cf       	rjmp	.-20     	; 0x1a5e <__ultoa_invert+0x58>
    1a72:	46 2f       	mov	r20, r22
    1a74:	4f 70       	andi	r20, 0x0F	; 15
    1a76:	40 5d       	subi	r20, 0xD0	; 208
    1a78:	4a 33       	cpi	r20, 0x3A	; 58
    1a7a:	18 f0       	brcs	.+6      	; 0x1a82 <__ultoa_invert+0x7c>
    1a7c:	49 5d       	subi	r20, 0xD9	; 217
    1a7e:	31 fd       	sbrc	r19, 1
    1a80:	40 52       	subi	r20, 0x20	; 32
    1a82:	41 93       	st	Z+, r20
    1a84:	02 d0       	rcall	.+4      	; 0x1a8a <__ultoa_invert+0x84>
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <__ultoa_invert+0x6c>
    1a88:	ea cf       	rjmp	.-44     	; 0x1a5e <__ultoa_invert+0x58>
    1a8a:	b4 e0       	ldi	r27, 0x04	; 4
    1a8c:	a6 95       	lsr	r26
    1a8e:	97 95       	ror	r25
    1a90:	87 95       	ror	r24
    1a92:	77 95       	ror	r23
    1a94:	67 95       	ror	r22
    1a96:	ba 95       	dec	r27
    1a98:	c9 f7       	brne	.-14     	; 0x1a8c <__ultoa_invert+0x86>
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	61 05       	cpc	r22, r1
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	08 95       	ret
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	0a 2e       	mov	r0, r26
    1aa8:	06 94       	lsr	r0
    1aaa:	57 95       	ror	r21
    1aac:	47 95       	ror	r20
    1aae:	37 95       	ror	r19
    1ab0:	27 95       	ror	r18
    1ab2:	ba 95       	dec	r27
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__ultoa_invert+0xa2>
    1ab6:	62 0f       	add	r22, r18
    1ab8:	73 1f       	adc	r23, r19
    1aba:	84 1f       	adc	r24, r20
    1abc:	95 1f       	adc	r25, r21
    1abe:	a0 1d       	adc	r26, r0
    1ac0:	08 95       	ret

00001ac2 <__prologue_saves__>:
    1ac2:	2f 92       	push	r2
    1ac4:	3f 92       	push	r3
    1ac6:	4f 92       	push	r4
    1ac8:	5f 92       	push	r5
    1aca:	6f 92       	push	r6
    1acc:	7f 92       	push	r7
    1ace:	8f 92       	push	r8
    1ad0:	9f 92       	push	r9
    1ad2:	af 92       	push	r10
    1ad4:	bf 92       	push	r11
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	ca 1b       	sub	r28, r26
    1aec:	db 0b       	sbc	r29, r27
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	09 94       	ijmp

00001afa <__epilogue_restores__>:
    1afa:	2a 88       	ldd	r2, Y+18	; 0x12
    1afc:	39 88       	ldd	r3, Y+17	; 0x11
    1afe:	48 88       	ldd	r4, Y+16	; 0x10
    1b00:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b02:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b04:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b06:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b08:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b0c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b0e:	c8 84       	ldd	r12, Y+8	; 0x08
    1b10:	df 80       	ldd	r13, Y+7	; 0x07
    1b12:	ee 80       	ldd	r14, Y+6	; 0x06
    1b14:	fd 80       	ldd	r15, Y+5	; 0x05
    1b16:	0c 81       	ldd	r16, Y+4	; 0x04
    1b18:	1b 81       	ldd	r17, Y+3	; 0x03
    1b1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1b1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b1e:	ce 0f       	add	r28, r30
    1b20:	d1 1d       	adc	r29, r1
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	ed 01       	movw	r28, r26
    1b2e:	08 95       	ret

00001b30 <_exit>:
    1b30:	f8 94       	cli

00001b32 <__stop_program>:
    1b32:	ff cf       	rjmp	.-2      	; 0x1b32 <__stop_program>
