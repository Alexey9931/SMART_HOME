
GAS_BOILER_TRANSMITTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000195e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000195e  000019f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  0080008e  0080008e  00001a20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dcb  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ecb  00000000  00000000  00004ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001939  00000000  00000000  0000597e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  000072b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  000079b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002015  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	c5 c6       	rjmp	.+3466   	; 0xd8e <__vector_1>
       4:	b5 c2       	rjmp	.+1386   	; 0x570 <__vector_2>
       6:	6f c1       	rjmp	.+734    	; 0x2e6 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	34 c2       	rjmp	.+1128   	; 0x476 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	12 c3       	rjmp	.+1572   	; 0x63c <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ee e5       	ldi	r30, 0x5E	; 94
      3a:	f9 e1       	ldi	r31, 0x19	; 25
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 38       	cpi	r26, 0x8E	; 142
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	ae e8       	ldi	r26, 0x8E	; 142
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a2 3d       	cpi	r26, 0xD2	; 210
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	61 d3       	rcall	.+1730   	; 0x71c <main>
      5a:	7f cc       	rjmp	.-1794   	; 0xfffff95a <__eeprom_end+0xff7ef95a>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <gas_boiler_controller>:
extern uint8_t work_mode;

void gas_boiler_controller(void)
{
	//если контроллер работает только в авто режиме
	if (work_mode == 0)
      5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <work_mode>
      62:	81 11       	cpse	r24, r1
      64:	3c c0       	rjmp	.+120    	; 0xde <gas_boiler_controller+0x80>
	{
		//если температура меньше уставки, то включаем котел
		if ((home_temp_rx_integer*10+home_temp_rx_fraction) < (temp_setpoint_integer*10+temp_setpoint_fraction))
      66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	9c 01       	movw	r18, r24
      6e:	22 0f       	add	r18, r18
      70:	33 1f       	adc	r19, r19
      72:	88 0f       	add	r24, r24
      74:	99 1f       	adc	r25, r25
      76:	88 0f       	add	r24, r24
      78:	99 1f       	adc	r25, r25
      7a:	88 0f       	add	r24, r24
      7c:	99 1f       	adc	r25, r25
      7e:	28 0f       	add	r18, r24
      80:	39 1f       	adc	r19, r25
      82:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
      86:	28 0f       	add	r18, r24
      88:	31 1d       	adc	r19, r1
      8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	ac 01       	movw	r20, r24
      92:	44 0f       	add	r20, r20
      94:	55 1f       	adc	r21, r21
      96:	88 0f       	add	r24, r24
      98:	99 1f       	adc	r25, r25
      9a:	88 0f       	add	r24, r24
      9c:	99 1f       	adc	r25, r25
      9e:	88 0f       	add	r24, r24
      a0:	99 1f       	adc	r25, r25
      a2:	84 0f       	add	r24, r20
      a4:	95 1f       	adc	r25, r21
      a6:	40 91 fa 00 	lds	r20, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
      aa:	84 0f       	add	r24, r20
      ac:	91 1d       	adc	r25, r1
      ae:	28 17       	cp	r18, r24
      b0:	39 07       	cpc	r19, r25
      b2:	54 f4       	brge	.+20     	; 0xc8 <gas_boiler_controller+0x6a>
		{
			gas_boiler_enable_flag = 1;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <gas_boiler_enable_flag>
			PORTB &= ~(1<<MOSFET);
      ba:	88 b3       	in	r24, 0x18	; 24
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	88 bb       	out	0x18, r24	; 24
			PORTD |= (1<<LED_BOILER_STATUS);
      c0:	82 b3       	in	r24, 0x12	; 18
      c2:	80 61       	ori	r24, 0x10	; 16
      c4:	82 bb       	out	0x12, r24	; 18
      c6:	08 95       	ret
		}
		//если больше то выключаем
		else if((home_temp_rx_integer*10+home_temp_rx_fraction) >= (temp_setpoint_integer*10+temp_setpoint_fraction))
      c8:	28 17       	cp	r18, r24
      ca:	39 07       	cpc	r19, r25
      cc:	44 f0       	brlt	.+16     	; 0xde <gas_boiler_controller+0x80>
		{
			gas_boiler_enable_flag = 0;
      ce:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
			PORTB |= (1<<MOSFET);
      d2:	88 b3       	in	r24, 0x18	; 24
      d4:	81 60       	ori	r24, 0x01	; 1
      d6:	88 bb       	out	0x18, r24	; 24
			PORTD &= ~(1<<LED_BOILER_STATUS);
      d8:	82 b3       	in	r24, 0x12	; 18
      da:	8f 7e       	andi	r24, 0xEF	; 239
      dc:	82 bb       	out	0x12, r24	; 18
      de:	08 95       	ret

000000e0 <dt_testdevice>:
  return tt;
}
//функци€ определени€ датчика на шине
char dt_testdevice(void) //dt Ч digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
      e0:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывани€
      e2:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
      e4:	81 b3       	in	r24, 0x11	; 17
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	e3 e9       	ldi	r30, 0x93	; 147
      ec:	f7 e0       	ldi	r31, 0x07	; 7
      ee:	31 97       	sbiw	r30, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <dt_testdevice+0xe>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <dt_testdevice+0x14>
      f4:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
      f6:	81 b3       	in	r24, 0x11	; 17
      f8:	8f 77       	andi	r24, 0x7F	; 127
      fa:	81 bb       	out	0x11, r24	; 17
      fc:	e3 e0       	ldi	r30, 0x03	; 3
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	31 97       	sbiw	r30, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <dt_testdevice+0x20>
     104:	00 c0       	rjmp	.+0      	; 0x106 <dt_testdevice+0x26>
     106:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//провер€ем, ответит ли устройство
     108:	87 99       	sbic	0x10, 7	; 16
     10a:	02 c0       	rjmp	.+4      	; 0x110 <dt_testdevice+0x30>
  {
	  dt=1;//устройство есть
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <dt_testdevice+0x32>
  }
  else dt=0;//устройства нет
     110:	80 e0       	ldi	r24, 0x00	; 0
  SREG = stektemp;// вернем значение стека
     112:	9f bf       	out	0x3f, r25	; 63
     114:	ef e8       	ldi	r30, 0x8F	; 143
     116:	f6 e0       	ldi	r31, 0x06	; 6
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <dt_testdevice+0x38>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <dt_testdevice+0x3e>
     11e:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
     120:	08 95       	ret

00000122 <dt_readbit>:
	return c;
}
//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
     122:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
     124:	f8 94       	cli
  char bt; //переменна€ хранени€ бита
  DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     126:	81 b3       	in	r24, 0x11	; 17
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	81 bb       	out	0x11, r24	; 17
     12c:	2a e0       	ldi	r18, 0x0A	; 10
     12e:	2a 95       	dec	r18
     130:	f1 f7       	brne	.-4      	; 0x12e <dt_readbit+0xc>
     132:	00 c0       	rjmp	.+0      	; 0x134 <dt_readbit+0x12>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     134:	81 b3       	in	r24, 0x11	; 17
     136:	8f 77       	andi	r24, 0x7F	; 127
     138:	81 bb       	out	0x11, r24	; 17
     13a:	85 e4       	ldi	r24, 0x45	; 69
     13c:	8a 95       	dec	r24
     13e:	f1 f7       	brne	.-4      	; 0x13c <dt_readbit+0x1a>
     140:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     142:	80 b3       	in	r24, 0x10	; 16
     144:	88 1f       	adc	r24, r24
     146:	88 27       	eor	r24, r24
     148:	88 1f       	adc	r24, r24
     14a:	20 ef       	ldi	r18, 0xF0	; 240
     14c:	2a 95       	dec	r18
     14e:	f1 f7       	brne	.-4      	; 0x14c <dt_readbit+0x2a>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     150:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     152:	08 95       	ret

00000154 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
     158:	c0 e0       	ldi	r28, 0x00	; 0
  return dt; //вернем результат
}
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
     15a:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
     15c:	0a c0       	rjmp	.+20     	; 0x172 <dt_readbyte+0x1e>
	{
	  c|=dt_readbit()<<i; //читаем бит
     15e:	e1 df       	rcall	.-62     	; 0x122 <dt_readbit>
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0c 2e       	mov	r0, r28
     164:	02 c0       	rjmp	.+4      	; 0x16a <dt_readbyte+0x16>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	0a 94       	dec	r0
     16c:	e2 f7       	brpl	.-8      	; 0x166 <dt_readbyte+0x12>
     16e:	d8 2b       	or	r29, r24
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     170:	cf 5f       	subi	r28, 0xFF	; 255
     172:	c8 30       	cpi	r28, 0x08	; 8
     174:	a0 f3       	brcs	.-24     	; 0x15e <dt_readbyte+0xa>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     176:	8d 2f       	mov	r24, r29
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <dt_sendbit>:
	}
}
//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     17e:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
     180:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
     182:	91 b3       	in	r25, 0x11	; 17
     184:	90 68       	ori	r25, 0x80	; 128
     186:	91 bb       	out	0x11, r25	; 17
     188:	9a e0       	ldi	r25, 0x0A	; 10
     18a:	9a 95       	dec	r25
     18c:	f1 f7       	brne	.-4      	; 0x18a <dt_sendbit+0xc>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     190:	88 23       	and	r24, r24
     192:	19 f0       	breq	.+6      	; 0x19a <dt_sendbit+0x1c>
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     194:	81 b3       	in	r24, 0x11	; 17
     196:	8f 77       	andi	r24, 0x7F	; 127
     198:	81 bb       	out	0x11, r24	; 17
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <dt_sendbit+0x20>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <dt_sendbit+0x26>
     1a4:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     1a6:	81 b3       	in	r24, 0x11	; 17
     1a8:	8f 77       	andi	r24, 0x7F	; 127
     1aa:	81 bb       	out	0x11, r24	; 17
	SREG = stektemp;// вернем значение стека
     1ac:	2f bf       	out	0x3f, r18	; 63
     1ae:	08 95       	ret

000001b0 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1b6:	c0 e0       	ldi	r28, 0x00	; 0
     1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <dt_sendbyte+0x34>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0c 2e       	mov	r0, r28
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <dt_sendbyte+0x16>
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	0a 94       	dec	r0
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <dt_sendbyte+0x12>
     1ca:	2d 2f       	mov	r18, r29
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	28 23       	and	r18, r24
     1d0:	39 23       	and	r19, r25
     1d2:	82 17       	cp	r24, r18
     1d4:	93 07       	cpc	r25, r19
     1d6:	19 f4       	brne	.+6      	; 0x1de <dt_sendbyte+0x2e>
		dt_sendbit(1);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	d1 df       	rcall	.-94     	; 0x17e <dt_sendbit>
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <dt_sendbyte+0x32>
		else //посылаем 0
		dt_sendbit(0);
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	ce df       	rcall	.-100    	; 0x17e <dt_sendbit>
}
//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     1e2:	cf 5f       	subi	r28, 0xFF	; 255
     1e4:	c8 30       	cpi	r28, 0x08	; 8
     1e6:	48 f3       	brcs	.-46     	; 0x1ba <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <dt_check>:
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
	}
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
     1ee:	cf 93       	push	r28
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     1f0:	77 df       	rcall	.-274    	; 0xe0 <dt_testdevice>
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	d1 f4       	brne	.+52     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     1f6:	8c ec       	ldi	r24, 0xCC	; 204
     1f8:	db df       	rcall	.-74     	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измер€ем температуру
     1fa:	84 e4       	ldi	r24, 0x44	; 68
     1fc:	d9 df       	rcall	.-78     	; 0x1b0 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fe:	2f ef       	ldi	r18, 0xFF	; 255
     200:	8d e2       	ldi	r24, 0x2D	; 45
     202:	99 e0       	ldi	r25, 0x09	; 9
     204:	21 50       	subi	r18, 0x01	; 1
     206:	80 40       	sbci	r24, 0x00	; 0
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	e1 f7       	brne	.-8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
     20e:	00 00       	nop
   _delay_ms(188); //в 10 битном режиме преобразовани€ Ч 188 милисекунд
   dt_testdevice(); //снова используем те же манипул€ции с шиной что и при проверке ее присутстви€
     210:	67 df       	rcall	.-306    	; 0xe0 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     212:	8c ec       	ldi	r24, 0xCC	; 204
     214:	cd df       	rcall	.-102    	; 0x1b0 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     216:	8e eb       	ldi	r24, 0xBE	; 190
     218:	cb df       	rcall	.-106    	; 0x1b0 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     21a:	9c df       	rcall	.-200    	; 0x154 <dt_readbyte>
     21c:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     21e:	9a df       	rcall	.-204    	; 0x154 <dt_readbyte>
     220:	90 e0       	ldi	r25, 0x00	; 0
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     222:	98 2f       	mov	r25, r24
     224:	88 27       	eor	r24, r24
     226:	8c 2b       	or	r24, r28
     228:	02 c0       	rjmp	.+4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
}
//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменна€ дл€ считывани€ байта
  unsigned int tt=0;
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <DS18b0_find_temp>:
extern uint8_t home_temp_own_fraction;

void DS18b0_find_temp(void)
{
	int tt = 0;
	tt = dt_check();
     232:	dd df       	rcall	.-70     	; 0x1ee <dt_check>
	uint8_t temp_sign = tt>>11;//вычисление знака температуры
     234:	29 2f       	mov	r18, r25
     236:	25 95       	asr	r18
     238:	25 95       	asr	r18
     23a:	25 95       	asr	r18
	uint8_t temp_integer;//цела€ часть темп
	uint8_t temp_fraction;//дробна€ часть темп
	if (temp_sign == 0x00)
     23c:	c1 f4       	brne	.+48     	; 0x26e <DS18b0_find_temp+0x3c>
	{
		home_temp_own_fraction = tt & 0xF;
     23e:	28 2f       	mov	r18, r24
     240:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// умножаем на 10
     242:	32 2f       	mov	r19, r18
     244:	33 0f       	add	r19, r19
     246:	22 0f       	add	r18, r18
     248:	22 0f       	add	r18, r18
     24a:	22 0f       	add	r18, r18
     24c:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     24e:	22 95       	swap	r18
     250:	2f 70       	andi	r18, 0x0F	; 15
     252:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <home_temp_own_fraction>
		home_temp_own_integer = (tt&0x07FF)>>4;
     256:	97 70       	andi	r25, 0x07	; 7
     258:	95 95       	asr	r25
     25a:	87 95       	ror	r24
     25c:	95 95       	asr	r25
     25e:	87 95       	ror	r24
     260:	95 95       	asr	r25
     262:	87 95       	ror	r24
     264:	95 95       	asr	r25
     266:	87 95       	ror	r24
     268:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <home_temp_own_integer>
     26c:	08 95       	ret
	}
	else
	{
		home_temp_own_fraction = ((~tt) & 0xF);
     26e:	28 2f       	mov	r18, r24
     270:	20 95       	com	r18
     272:	2f 70       	andi	r18, 0x0F	; 15
		home_temp_own_fraction = (home_temp_own_fraction<<1) + (home_temp_own_fraction<<3);// Фмножаем на 10
     274:	32 2f       	mov	r19, r18
     276:	33 0f       	add	r19, r19
     278:	22 0f       	add	r18, r18
     27a:	22 0f       	add	r18, r18
     27c:	22 0f       	add	r18, r18
     27e:	23 0f       	add	r18, r19
		home_temp_own_fraction = (home_temp_own_fraction>>4);//делим на 16 или умножаем на 0.0625
     280:	22 95       	swap	r18
     282:	2f 70       	andi	r18, 0x0F	; 15
     284:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <home_temp_own_fraction>
		home_temp_own_integer = ((~(tt))&0x07FF)>>4;
     288:	80 95       	com	r24
     28a:	90 95       	com	r25
     28c:	97 70       	andi	r25, 0x07	; 7
     28e:	95 95       	asr	r25
     290:	87 95       	ror	r24
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <home_temp_own_integer>
     2a2:	08 95       	ret

000002a4 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождени€ флага окончани€ последней операцией с пам€тью
     2a4:	e1 99       	sbic	0x1c, 1	; 28
     2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <EEPROM_write>
	{}
	EEAR = uiAddress; //”станавливаем адрес
     2a8:	9f bb       	out	0x1f, r25	; 31
     2aa:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //ѕищем данные в регистр
     2ac:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //–азрешаем запись
     2ae:	8c b3       	in	r24, 0x1c	; 28
     2b0:	84 60       	ori	r24, 0x04	; 4
     2b2:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE); //ѕишем байт в пам€ть
     2b4:	8c b3       	in	r24, 0x1c	; 28
     2b6:	82 60       	ori	r24, 0x02	; 2
     2b8:	8c bb       	out	0x1c, r24	; 28
     2ba:	08 95       	ret

000002bc <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     2bc:	e1 99       	sbic	0x1c, 1	; 28
     2be:	fe cf       	rjmp	.-4      	; 0x2bc <EEPROM_read>
	{} //ждем освобождени€ флага окончани€ последней операцией с пам€тью
	EEAR = uiAddress; //”станавливаем адрес
     2c0:	9f bb       	out	0x1f, r25	; 31
     2c2:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //«апускаем операцию считывани€ из пам€ти в регистр данных
     2c4:	8c b3       	in	r24, 0x1c	; 28
     2c6:	81 60       	ori	r24, 0x01	; 1
     2c8:	8c bb       	out	0x1c, r24	; 28
	return EEDR; //¬озвращаем результат
     2ca:	8d b3       	in	r24, 0x1d	; 29
}
     2cc:	08 95       	ret

000002ce <timer2_ini>:
char DATA_TO_UART[80] = {0};

unsigned int TIM2_COUNT = 0;
void timer2_ini(void)//период 100мкс
{
	TCCR2 |= (1<<WGM21); // устанавливаем режим —“— (сброс по совпадению)
     2ce:	85 b5       	in	r24, 0x25	; 37
     2d0:	88 60       	ori	r24, 0x08	; 8
     2d2:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     2d4:	89 b7       	in	r24, 0x39	; 57
     2d6:	80 68       	ori	r24, 0x80	; 128
     2d8:	89 bf       	out	0x39, r24	; 57
	OCR2 = 0b11001000; //записываем в регистр число дл€ сравнени€ 200
     2da:	88 ec       	ldi	r24, 0xC8	; 200
     2dc:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1<<CS21);//установим делитель 8.
     2de:	85 b5       	in	r24, 0x25	; 37
     2e0:	82 60       	ori	r24, 0x02	; 2
     2e2:	85 bd       	out	0x25, r24	; 37
     2e4:	08 95       	ret

000002e6 <__vector_3>:
}
ISR (TIMER2_COMP_vect)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	2f 93       	push	r18
     2f2:	3f 93       	push	r19
     2f4:	4f 93       	push	r20
     2f6:	5f 93       	push	r21
     2f8:	6f 93       	push	r22
     2fa:	7f 93       	push	r23
     2fc:	8f 93       	push	r24
     2fe:	9f 93       	push	r25
     300:	af 93       	push	r26
     302:	bf 93       	push	r27
     304:	ef 93       	push	r30
     306:	ff 93       	push	r31
	if(OK_BUTTON_FLAG == 1)
     308:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <OK_BUTTON_FLAG>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	09 f0       	breq	.+2      	; 0x312 <__vector_3+0x2c>
     310:	93 c0       	rjmp	.+294    	; 0x438 <__DATA_REGION_LENGTH__+0x38>
	{
		if(((PINC&(1<<BUTTON_UP)) == 0) && (UP_BUTTON_FLAG == 0))
     312:	9a 99       	sbic	0x13, 2	; 19
     314:	45 c0       	rjmp	.+138    	; 0x3a0 <__vector_3+0xba>
     316:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <UP_BUTTON_FLAG>
     31a:	81 11       	cpse	r24, r1
     31c:	41 c0       	rjmp	.+130    	; 0x3a0 <__vector_3+0xba>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     31e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	ac 01       	movw	r20, r24
     326:	44 0f       	add	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	48 0f       	add	r20, r24
     338:	59 1f       	adc	r21, r25
     33a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     33e:	48 0f       	add	r20, r24
     340:	51 1d       	adc	r21, r1
			temp_setpoint += 5;
     342:	4b 5f       	subi	r20, 0xFB	; 251
     344:	5f 4f       	sbci	r21, 0xFF	; 255
     346:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <temp_setpoint+0x1>
     34a:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     34e:	9a 01       	movw	r18, r20
     350:	ad ec       	ldi	r26, 0xCD	; 205
     352:	bc ec       	ldi	r27, 0xCC	; 204
     354:	be d7       	rcall	.+3964   	; 0x12d2 <__umulhisi3>
     356:	96 95       	lsr	r25
     358:	87 95       	ror	r24
     35a:	96 95       	lsr	r25
     35c:	87 95       	ror	r24
     35e:	96 95       	lsr	r25
     360:	87 95       	ror	r24
     362:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     366:	bc 01       	movw	r22, r24
     368:	66 0f       	add	r22, r22
     36a:	77 1f       	adc	r23, r23
     36c:	9c 01       	movw	r18, r24
     36e:	22 0f       	add	r18, r18
     370:	33 1f       	adc	r19, r19
     372:	22 0f       	add	r18, r18
     374:	33 1f       	adc	r19, r19
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	26 0f       	add	r18, r22
     37c:	37 1f       	adc	r19, r23
     37e:	42 1b       	sub	r20, r18
     380:	53 0b       	sbc	r21, r19
     382:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <temp_setpoint_fraction>
			UP_BUTTON_FLAG = 1;
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <UP_BUTTON_FLAG>
			EEPROM_write(1, temp_setpoint_integer);
     38c:	68 2f       	mov	r22, r24
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	88 df       	rcall	.-240    	; 0x2a4 <EEPROM_write>
			EEPROM_write(2, temp_setpoint_fraction);
     394:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	83 df       	rcall	.-250    	; 0x2a4 <EEPROM_write>
     39e:	46 c0       	rjmp	.+140    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
		}
		else if(((PINC&(1<<BUTTON_DOWN)) == 0) && (DOWN_BUTTON_FLAG == 0))
     3a0:	9b 99       	sbic	0x13, 3	; 19
     3a2:	44 c0       	rjmp	.+136    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
     3a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <DOWN_BUTTON_FLAG>
     3a8:	81 11       	cpse	r24, r1
     3aa:	40 c0       	rjmp	.+128    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
		{
			temp_setpoint = temp_setpoint_integer * 10 + temp_setpoint_fraction;
     3ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	ac 01       	movw	r20, r24
     3b4:	44 0f       	add	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	48 0f       	add	r20, r24
     3c6:	59 1f       	adc	r21, r25
     3c8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     3cc:	48 0f       	add	r20, r24
     3ce:	51 1d       	adc	r21, r1
			temp_setpoint -= 5;
     3d0:	45 50       	subi	r20, 0x05	; 5
     3d2:	51 09       	sbc	r21, r1
     3d4:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <temp_setpoint+0x1>
     3d8:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <temp_setpoint>
			temp_setpoint_integer = temp_setpoint/10;
     3dc:	9a 01       	movw	r18, r20
     3de:	ad ec       	ldi	r26, 0xCD	; 205
     3e0:	bc ec       	ldi	r27, 0xCC	; 204
     3e2:	77 d7       	rcall	.+3822   	; 0x12d2 <__umulhisi3>
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	96 95       	lsr	r25
     3ea:	87 95       	ror	r24
     3ec:	96 95       	lsr	r25
     3ee:	87 95       	ror	r24
     3f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
			temp_setpoint_fraction = temp_setpoint%10;
     3f4:	bc 01       	movw	r22, r24
     3f6:	66 0f       	add	r22, r22
     3f8:	77 1f       	adc	r23, r23
     3fa:	9c 01       	movw	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	26 0f       	add	r18, r22
     40a:	37 1f       	adc	r19, r23
     40c:	42 1b       	sub	r20, r18
     40e:	53 0b       	sbc	r21, r19
     410:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <temp_setpoint_fraction>
			DOWN_BUTTON_FLAG = 1;
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <DOWN_BUTTON_FLAG>
		    EEPROM_write(1, temp_setpoint_integer);
     41a:	68 2f       	mov	r22, r24
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	41 df       	rcall	.-382    	; 0x2a4 <EEPROM_write>
			EEPROM_write(2, temp_setpoint_fraction);
     422:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	3c df       	rcall	.-392    	; 0x2a4 <EEPROM_write>
		}
		if ((PINC&(1<<BUTTON_UP)) != 0)
     42c:	9a 99       	sbic	0x13, 2	; 19
		{
			UP_BUTTON_FLAG = 0;
     42e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <UP_BUTTON_FLAG>
		}
		if ((PINC&(1<<BUTTON_DOWN)) != 0)
     432:	9b 99       	sbic	0x13, 3	; 19
		{
			DOWN_BUTTON_FLAG = 0;
     434:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <DOWN_BUTTON_FLAG>
		}
	}
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	0f 90       	pop	r0
     452:	0f be       	out	0x3f, r0	; 63
     454:	0f 90       	pop	r0
     456:	1f 90       	pop	r1
     458:	18 95       	reti

0000045a <timer1_ini>:
void timer1_ini(void)//период 1мс
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим —“— (сброс по совпадению)
     45a:	8e b5       	in	r24, 0x2e	; 46
     45c:	88 60       	ori	r24, 0x08	; 8
     45e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешени€ прерывани€ 1ого счетчика по совпадению с OCR1A(H и L)
     460:	89 b7       	in	r24, 0x39	; 57
     462:	80 61       	ori	r24, 0x10	; 16
     464:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00000111; //записываем в регистр число дл€ сравнени€ 2000
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11010000;
     46a:	80 ed       	ldi	r24, 0xD0	; 208
     46c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель 8.
     46e:	8e b5       	in	r24, 0x2e	; 46
     470:	82 60       	ori	r24, 0x02	; 2
     472:	8e bd       	out	0x2e, r24	; 46
     474:	08 95       	ret

00000476 <__vector_6>:
}
ISR (TIMER1_COMPA_vect)
{	
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	2f 93       	push	r18
     482:	3f 93       	push	r19
     484:	4f 93       	push	r20
     486:	5f 93       	push	r21
     488:	6f 93       	push	r22
     48a:	7f 93       	push	r23
     48c:	8f 93       	push	r24
     48e:	9f 93       	push	r25
     490:	af 93       	push	r26
     492:	bf 93       	push	r27
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
	millis++;
     49c:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis>
     4a0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x1>
     4a4:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis+0x2>
     4a8:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis+0x3>
     4ac:	bc 01       	movw	r22, r24
     4ae:	cd 01       	movw	r24, r26
     4b0:	6f 5f       	subi	r22, 0xFF	; 255
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	8f 4f       	sbci	r24, 0xFF	; 255
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	60 93 e7 00 	sts	0x00E7, r22	; 0x8000e7 <millis>
     4bc:	70 93 e8 00 	sts	0x00E8, r23	; 0x8000e8 <millis+0x1>
     4c0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <millis+0x2>
     4c4:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <millis+0x3>
	{
		millis = 0;
		millis_hometemp_update = 0;
	}
	//каждые 10 сек работает контроллер и отправка актуальных данных в Ѕƒ
	if ((millis % 10000)==0)
     4c8:	20 e1       	ldi	r18, 0x10	; 16
     4ca:	37 e2       	ldi	r19, 0x27	; 39
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	e4 d6       	rcall	.+3528   	; 0x129a <__divmodsi4>
     4d2:	67 2b       	or	r22, r23
     4d4:	68 2b       	or	r22, r24
     4d6:	69 2b       	or	r22, r25
     4d8:	c1 f5       	brne	.+112    	; 0x54a <__vector_6+0xd4>
	{
		gas_boiler_controller();
     4da:	c1 dd       	rcall	.-1150   	; 0x5e <gas_boiler_controller>
		//отправл€ем в Ѕƒ данные с новой инфо
		sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     4dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <work_mode>
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     500:	1f 92       	push	r1
     502:	8f 93       	push	r24
     504:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     508:	1f 92       	push	r1
     50a:	8f 93       	push	r24
     50c:	88 e6       	ldi	r24, 0x68	; 104
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	c0 e9       	ldi	r28, 0x90	; 144
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	46 d7       	rcall	.+3724   	; 0x13aa <sprintf>
		USART_Transmit(DATA_TO_UART);
     51e:	ce 01       	movw	r24, r28
     520:	91 d6       	rcall	.+3362   	; 0x1244 <USART_Transmit>
		memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     522:	09 90       	ld	r0, Y+
     524:	00 20       	and	r0, r0
     526:	e9 f7       	brne	.-6      	; 0x522 <__vector_6+0xac>
     528:	21 97       	sbiw	r28, 0x01	; 1
     52a:	ae 01       	movw	r20, r28
     52c:	40 59       	subi	r20, 0x90	; 144
     52e:	50 40       	sbci	r21, 0x00	; 0
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e9       	ldi	r24, 0x90	; 144
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	17 d7       	rcall	.+3630   	; 0x1368 <memset>
     53a:	8d b7       	in	r24, 0x3d	; 61
     53c:	9e b7       	in	r25, 0x3e	; 62
     53e:	40 96       	adiw	r24, 0x10	; 16
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	9e bf       	out	0x3e, r25	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	8d bf       	out	0x3d, r24	; 61
	}
}
     54a:	ff 91       	pop	r31
     54c:	ef 91       	pop	r30
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_2>:
//прерывание по нажатию кнопки OK
ISR (INT1_vect)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	8f 93       	push	r24
	if (OK_BUTTON_FLAG == 1) OK_BUTTON_FLAG = 0;
     57c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <OK_BUTTON_FLAG>
     580:	81 30       	cpi	r24, 0x01	; 1
     582:	19 f4       	brne	.+6      	; 0x58a <__vector_2+0x1a>
     584:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <OK_BUTTON_FLAG>
     588:	03 c0       	rjmp	.+6      	; 0x590 <__vector_2+0x20>
	else OK_BUTTON_FLAG = 1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <OK_BUTTON_FLAG>
}
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <SPI_init>:
SPI_init(void) //инициализаци€ SPI
{
	DDRB |= ((1<<SS)|(1<<MOSI)|(1<<CE)|(1<<SCK)); //ножки SPI на выход
     59c:	87 b3       	in	r24, 0x17	; 23
     59e:	8e 62       	ori	r24, 0x2E	; 46
     5a0:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK)); //низкий уровень
     5a2:	88 b3       	in	r24, 0x18	; 24
     5a4:	83 7d       	andi	r24, 0xD3	; 211
     5a6:	88 bb       	out	0x18, r24	; 24
	HIGH_CSN;
     5a8:	88 b3       	in	r24, 0x18	; 24
     5aa:	84 60       	ori	r24, 0x04	; 4
     5ac:	88 bb       	out	0x18, r24	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);//включим шину, объ§вим ведущим
     5ae:	8d b1       	in	r24, 0x0d	; 13
     5b0:	80 65       	ori	r24, 0x50	; 80
     5b2:	8d b9       	out	0x0d, r24	; 13
}
     5b4:	08 95       	ret

000005b6 <port_init>:
port_init(void)
{
	//инициализаци€ ножки IRQ дл€ внеш прерывани€
	DDRD &= ~(1<<IRQ);
     5b6:	81 b3       	in	r24, 0x11	; 17
     5b8:	8b 7f       	andi	r24, 0xFB	; 251
     5ba:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<IRQ);
     5bc:	82 b3       	in	r24, 0x12	; 18
     5be:	84 60       	ori	r24, 0x04	; 4
     5c0:	82 bb       	out	0x12, r24	; 18
	//светодиод 
	DDRD |= (1<<LED_TX);
     5c2:	81 b3       	in	r24, 0x11	; 17
     5c4:	80 64       	ori	r24, 0x40	; 64
     5c6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_TX);
     5c8:	82 b3       	in	r24, 0x12	; 18
     5ca:	8f 7b       	andi	r24, 0xBF	; 191
     5cc:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_RX);
     5ce:	81 b3       	in	r24, 0x11	; 17
     5d0:	80 62       	ori	r24, 0x20	; 32
     5d2:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_RX);
     5d4:	82 b3       	in	r24, 0x12	; 18
     5d6:	8f 7d       	andi	r24, 0xDF	; 223
     5d8:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRD |= (1<<LED_BOILER_STATUS);
     5da:	81 b3       	in	r24, 0x11	; 17
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<LED_BOILER_STATUS);
     5e0:	82 b3       	in	r24, 0x12	; 18
     5e2:	8f 7e       	andi	r24, 0xEF	; 239
     5e4:	82 bb       	out	0x12, r24	; 18
	//светодиод
	DDRC |= (1<<LED_WIFI);
     5e6:	84 b3       	in	r24, 0x14	; 20
     5e8:	82 60       	ori	r24, 0x02	; 2
     5ea:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~(1<<LED_WIFI);
     5ec:	85 b3       	in	r24, 0x15	; 21
     5ee:	8d 7f       	andi	r24, 0xFD	; 253
     5f0:	85 bb       	out	0x15, r24	; 21
	//инициализаци€ мосфета
	DDRB |= (1<<MOSFET);
     5f2:	87 b3       	in	r24, 0x17	; 23
     5f4:	81 60       	ori	r24, 0x01	; 1
     5f6:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<MOSFET);
     5f8:	88 b3       	in	r24, 0x18	; 24
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	88 bb       	out	0x18, r24	; 24
	//инициализаци€ индикатора
	DDRC |= (1<<MAX7219_SS);
     5fe:	84 b3       	in	r24, 0x14	; 20
     600:	81 60       	ori	r24, 0x01	; 1
     602:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<MAX7219_SS);
     604:	85 b3       	in	r24, 0x15	; 21
     606:	81 60       	ori	r24, 0x01	; 1
     608:	85 bb       	out	0x15, r24	; 21
	//настройка кнопок
	DDRD &= ~(1<<BUTTON_OK);
     60a:	81 b3       	in	r24, 0x11	; 17
     60c:	87 7f       	andi	r24, 0xF7	; 247
     60e:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<BUTTON_OK);
     610:	82 b3       	in	r24, 0x12	; 18
     612:	88 60       	ori	r24, 0x08	; 8
     614:	82 bb       	out	0x12, r24	; 18
	DDRC &= ~(1<<BUTTON_UP);
     616:	84 b3       	in	r24, 0x14	; 20
     618:	8b 7f       	andi	r24, 0xFB	; 251
     61a:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_UP);
     61c:	85 b3       	in	r24, 0x15	; 21
     61e:	84 60       	ori	r24, 0x04	; 4
     620:	85 bb       	out	0x15, r24	; 21
	DDRC &= ~(1<<BUTTON_DOWN);
     622:	84 b3       	in	r24, 0x14	; 20
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<BUTTON_DOWN);
     628:	85 b3       	in	r24, 0x15	; 21
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	85 bb       	out	0x15, r24	; 21
	//датчик температуры
	DDRTEMP &= ~(1<<BITTEMP);
     62e:	81 b3       	in	r24, 0x11	; 17
     630:	8f 77       	andi	r24, 0x7F	; 127
     632:	81 bb       	out	0x11, r24	; 17
	PORTTEMP &= ~(1<<BITTEMP);
     634:	82 b3       	in	r24, 0x12	; 18
     636:	8f 77       	andi	r24, 0x7F	; 127
     638:	82 bb       	out	0x12, r24	; 18
}
     63a:	08 95       	ret

0000063c <__vector_11>:
//обработчик прерывани€ по UART
int uart_rx_count = 0;
char uart_rx_buffer[100];
char uart_message[100];
ISR(USART_RXC_vect)
{
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	uart_rx_buffer[uart_rx_count] = UDR;
     662:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     666:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     66a:	2c b1       	in	r18, 0x0c	; 12
     66c:	fc 01       	movw	r30, r24
     66e:	e5 59       	subi	r30, 0x95	; 149
     670:	fe 4f       	sbci	r31, 0xFE	; 254
     672:	20 83       	st	Z, r18
	if (uart_rx_buffer[uart_rx_count] == '/')
     674:	2f 32       	cpi	r18, 0x2F	; 47
     676:	a9 f5       	brne	.+106    	; 0x6e2 <__vector_11+0xa6>
	{
		memcpy(uart_message,uart_rx_buffer,strlen(uart_rx_buffer)-1);
     678:	cb e6       	ldi	r28, 0x6B	; 107
     67a:	d1 e0       	ldi	r29, 0x01	; 1
     67c:	fe 01       	movw	r30, r28
     67e:	01 90       	ld	r0, Z+
     680:	00 20       	and	r0, r0
     682:	e9 f7       	brne	.-6      	; 0x67e <__vector_11+0x42>
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	af 01       	movw	r20, r30
     688:	4b 56       	subi	r20, 0x6B	; 107
     68a:	51 40       	sbci	r21, 0x01	; 1
     68c:	41 50       	subi	r20, 0x01	; 1
     68e:	51 09       	sbc	r21, r1
     690:	be 01       	movw	r22, r28
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	5f d6       	rcall	.+3262   	; 0x1356 <memcpy>
		memset(uart_rx_buffer,'\0',strlen(uart_rx_buffer));
     698:	fe 01       	movw	r30, r28
     69a:	01 90       	ld	r0, Z+
     69c:	00 20       	and	r0, r0
     69e:	e9 f7       	brne	.-6      	; 0x69a <__vector_11+0x5e>
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	af 01       	movw	r20, r30
     6a4:	4b 56       	subi	r20, 0x6B	; 107
     6a6:	51 40       	sbci	r21, 0x01	; 1
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	ce 01       	movw	r24, r28
     6ae:	5c d6       	rcall	.+3256   	; 0x1368 <memset>
		uart_rx_count = 0;
     6b0:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__data_end+0x1>
     6b4:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
		//ѕолучение данные о wifi по uart
		if (strstr(uart_message,"WiFi-OK")!=0)
     6b8:	6b e7       	ldi	r22, 0x7B	; 123
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	5a d6       	rcall	.+3252   	; 0x1376 <strstr>
     6c2:	89 2b       	or	r24, r25
     6c4:	19 f0       	breq	.+6      	; 0x6cc <__vector_11+0x90>
		{
			PORTC |= (1<<LED_WIFI);
     6c6:	85 b3       	in	r24, 0x15	; 21
     6c8:	82 60       	ori	r24, 0x02	; 2
     6ca:	85 bb       	out	0x15, r24	; 21
		}
		if (strstr(uart_message,"WiFi-ERROR")!=0)
     6cc:	63 e8       	ldi	r22, 0x83	; 131
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	86 e0       	ldi	r24, 0x06	; 6
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	50 d6       	rcall	.+3232   	; 0x1376 <strstr>
     6d6:	89 2b       	or	r24, r25
     6d8:	49 f0       	breq	.+18     	; 0x6ec <__vector_11+0xb0>
		{
			PORTC &= ~(1<<LED_WIFI);
     6da:	85 b3       	in	r24, 0x15	; 21
     6dc:	8d 7f       	andi	r24, 0xFD	; 253
     6de:	85 bb       	out	0x15, r24	; 21
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <__vector_11+0xb0>
		}
	}
	else
	{
		uart_rx_count++;
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
     6e8:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	}
}
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	0f 90       	pop	r0
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	0f 90       	pop	r0
     70e:	1f 90       	pop	r1
     710:	18 95       	reti

00000712 <spi_send_recv>:
uint8_t spi_send_recv(uint8_t data) // ѕередаЄт и принимает 1 байт по SPI, возвращает полученное значение
{
	SPDR = data;
     712:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     714:	77 9b       	sbis	0x0e, 7	; 14
     716:	fe cf       	rjmp	.-4      	; 0x714 <spi_send_recv+0x2>
	return SPDR;
     718:	8f b1       	in	r24, 0x0f	; 15
}
     71a:	08 95       	ret

0000071c <main>:
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	43 ed       	ldi	r20, 0xD3	; 211
     720:	80 e3       	ldi	r24, 0x30	; 48
     722:	21 50       	subi	r18, 0x01	; 1
     724:	40 40       	sbci	r20, 0x00	; 0
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <main+0x6>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <main+0x10>
     72c:	00 00       	nop
int main(void)
{
	_delay_ms(1000);
	int k = 0;
	uint8_t data[5] = {0};
	port_init();
     72e:	43 df       	rcall	.-378    	; 0x5b6 <port_init>
	PORTD |= (1<<LED_TX);
     730:	82 b3       	in	r24, 0x12	; 18
     732:	80 64       	ori	r24, 0x40	; 64
     734:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_RX);
     736:	82 b3       	in	r24, 0x12	; 18
     738:	80 62       	ori	r24, 0x20	; 32
     73a:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<LED_BOILER_STATUS);
     73c:	82 b3       	in	r24, 0x12	; 18
     73e:	80 61       	ori	r24, 0x10	; 16
     740:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<LED_WIFI);
     742:	85 b3       	in	r24, 0x15	; 21
     744:	82 60       	ori	r24, 0x02	; 2
     746:	85 bb       	out	0x15, r24	; 21
	SPI_init();
     748:	29 df       	rcall	.-430    	; 0x59c <SPI_init>
	USART_Init(16);    //»нициализаци€ модул€ USART скорость 115200	
     74a:	80 e1       	ldi	r24, 0x10	; 16
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	6b d5       	rcall	.+2774   	; 0x1226 <USART_Init>
    NRF24_ini();
     750:	e4 d4       	rcall	.+2504   	; 0x111a <NRF24_ini>
     752:	9f ef       	ldi	r25, 0xFF	; 255
     754:	21 ee       	ldi	r18, 0xE1	; 225
     756:	44 e0       	ldi	r20, 0x04	; 4
     758:	91 50       	subi	r25, 0x01	; 1
     75a:	20 40       	sbci	r18, 0x00	; 0
     75c:	40 40       	sbci	r20, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x3c>
     760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x46>
     762:	00 00       	nop
	_delay_ms(100);
	MAX7219_init();
     764:	5e d1       	rcall	.+700    	; 0xa22 <MAX7219_init>
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	93 ed       	ldi	r25, 0xD3	; 211
     76a:	20 e3       	ldi	r18, 0x30	; 48
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	20 40       	sbci	r18, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <main+0x50>
     774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x5a>
     776:	00 00       	nop
	_delay_ms(1000);
	// настраиваем параметры прерывани€
	//----------------------
	MCUCR |= (1<<ISC01)|((1<<ISC11));
     778:	85 b7       	in	r24, 0x35	; 53
     77a:	8a 60       	ori	r24, 0x0A	; 10
     77c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0)|(1<<INT1);
     77e:	8b b7       	in	r24, 0x3b	; 59
     780:	80 6c       	ori	r24, 0xC0	; 192
     782:	8b bf       	out	0x3b, r24	; 59
     784:	4f ef       	ldi	r20, 0xFF	; 255
     786:	87 ea       	ldi	r24, 0xA7	; 167
     788:	91 e6       	ldi	r25, 0x61	; 97
     78a:	41 50       	subi	r20, 0x01	; 1
     78c:	80 40       	sbci	r24, 0x00	; 0
     78e:	90 40       	sbci	r25, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x6e>
     792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x78>
     794:	00 00       	nop
	//----------------------
	_delay_ms(2000);
	PORTD &= ~(1<<LED_TX);
     796:	82 b3       	in	r24, 0x12	; 18
     798:	8f 7b       	andi	r24, 0xBF	; 191
     79a:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_RX);
     79c:	82 b3       	in	r24, 0x12	; 18
     79e:	8f 7d       	andi	r24, 0xDF	; 223
     7a0:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<LED_BOILER_STATUS);
     7a2:	82 b3       	in	r24, 0x12	; 18
     7a4:	8f 7e       	andi	r24, 0xEF	; 239
     7a6:	82 bb       	out	0x12, r24	; 18
	PORTC &= ~(1<<LED_WIFI);
     7a8:	85 b3       	in	r24, 0x15	; 21
     7aa:	8d 7f       	andi	r24, 0xFD	; 253
     7ac:	85 bb       	out	0x15, r24	; 21
	timer1_ini();
     7ae:	55 de       	rcall	.-854    	; 0x45a <timer1_ini>
	timer2_ini();
     7b0:	8e dd       	rcall	.-1252   	; 0x2ce <timer2_ini>
	gas_boiler_controller();
     7b2:	55 dc       	rcall	.-1878   	; 0x5e <gas_boiler_controller>
    //настрока WDT
    WDTCR &= ~(1<<WDE);
     7b4:	81 b5       	in	r24, 0x21	; 33
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	81 bd       	out	0x21, r24	; 33
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     7ba:	9f e0       	ldi	r25, 0x0F	; 15
     7bc:	88 e1       	ldi	r24, 0x18	; 24
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	a8 95       	wdr
     7c4:	81 bd       	out	0x21, r24	; 33
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	91 bd       	out	0x21, r25	; 33
    //включаем Watchdog на 2 с
    wdt_enable(WDTO_2S);
    ACSR |= (1<<ACD);//откл компаратор
     7ca:	88 b1       	in	r24, 0x08	; 8
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	88 b9       	out	0x08, r24	; 8
	sei();
     7d0:	78 94       	sei
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	4d e3       	ldi	r20, 0x3D	; 61
     7d6:	89 e4       	ldi	r24, 0x49	; 73
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	40 40       	sbci	r20, 0x00	; 0
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0xbc>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0xc6>
     7e2:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     7e4:	a8 95       	wdr
     7e6:	9f ef       	ldi	r25, 0xFF	; 255
     7e8:	2d e3       	ldi	r18, 0x3D	; 61
     7ea:	49 e4       	ldi	r20, 0x49	; 73
     7ec:	91 50       	subi	r25, 0x01	; 1
     7ee:	20 40       	sbci	r18, 0x00	; 0
     7f0:	40 40       	sbci	r20, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0xd0>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0xda>
     7f6:	00 00       	nop
	_delay_ms(1500);
	wdt_reset();
     7f8:	a8 95       	wdr
	//считываем из eeprom значение уставки
	if(EEPROM_read(1) > 100) EEPROM_write(1,20);
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	5e dd       	rcall	.-1348   	; 0x2bc <EEPROM_read>
     800:	85 36       	cpi	r24, 0x65	; 101
     802:	20 f0       	brcs	.+8      	; 0x80c <main+0xf0>
     804:	64 e1       	ldi	r22, 0x14	; 20
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	4c dd       	rcall	.-1384   	; 0x2a4 <EEPROM_write>
	if(EEPROM_read(2) > 100) EEPROM_write(2,0);
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	55 dd       	rcall	.-1366   	; 0x2bc <EEPROM_read>
     812:	85 36       	cpi	r24, 0x65	; 101
     814:	20 f0       	brcs	.+8      	; 0x81e <main+0x102>
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	43 dd       	rcall	.-1402   	; 0x2a4 <EEPROM_write>
	temp_setpoint_integer = EEPROM_read(1);
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	4c dd       	rcall	.-1384   	; 0x2bc <EEPROM_read>
     824:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <temp_setpoint_integer>
	temp_setpoint_fraction = EEPROM_read(2);
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	47 dd       	rcall	.-1394   	; 0x2bc <EEPROM_read>
     82e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <temp_setpoint_fraction>
	//отправл€ем в Ѕƒ первичные данные после включени€
	sprintf(DATA_TO_UART,"%d %d.%d %d.%d %d ", gas_boiler_enable_flag, home_temp_rx_integer, home_temp_rx_fraction, temp_setpoint_integer, temp_setpoint_fraction, work_mode);
     832:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <work_mode>
     836:	1f 92       	push	r1
     838:	9f 93       	push	r25
     83a:	1f 92       	push	r1
     83c:	8f 93       	push	r24
     83e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     842:	1f 92       	push	r1
     844:	8f 93       	push	r24
     846:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     84a:	1f 92       	push	r1
     84c:	8f 93       	push	r24
     84e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     852:	1f 92       	push	r1
     854:	8f 93       	push	r24
     856:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     85a:	1f 92       	push	r1
     85c:	8f 93       	push	r24
     85e:	88 e6       	ldi	r24, 0x68	; 104
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	c0 e9       	ldi	r28, 0x90	; 144
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	9d d5       	rcall	.+2874   	; 0x13aa <sprintf>
	USART_Transmit(DATA_TO_UART);
     870:	ce 01       	movw	r24, r28
     872:	e8 d4       	rcall	.+2512   	; 0x1244 <USART_Transmit>
	memset(DATA_TO_UART, '\0', sizeof(char) * strlen(DATA_TO_UART));//очистка массива
     874:	09 90       	ld	r0, Y+
     876:	00 20       	and	r0, r0
     878:	e9 f7       	brne	.-6      	; 0x874 <main+0x158>
     87a:	21 97       	sbiw	r28, 0x01	; 1
     87c:	ae 01       	movw	r20, r28
     87e:	40 59       	subi	r20, 0x90	; 144
     880:	50 40       	sbci	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e9       	ldi	r24, 0x90	; 144
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	6e d5       	rcall	.+2780   	; 0x1368 <memset>
     88c:	8d b7       	in	r24, 0x3d	; 61
     88e:	9e b7       	in	r25, 0x3e	; 62
     890:	40 96       	adiw	r24, 0x10	; 16
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	9e bf       	out	0x3e, r25	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	8d bf       	out	0x3d, r24	; 61
	while (1) 
    {
		
		//если нет св€зи более 15 сек, то берем температуру от собственного датчика и переходим в режим авто
		if (abs(millis - millis_hometemp_update) > 15000)
     89c:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <millis>
     8a0:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <millis+0x1>
     8a4:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis+0x2>
     8a8:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis+0x3>
     8ac:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <millis_hometemp_update>
     8b0:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <millis_hometemp_update+0x1>
     8b4:	ab 01       	movw	r20, r22
     8b6:	42 1b       	sub	r20, r18
     8b8:	53 0b       	sbc	r21, r19
     8ba:	9a 01       	movw	r18, r20
     8bc:	22 f4       	brpl	.+8      	; 0x8c6 <main+0x1aa>
     8be:	22 27       	eor	r18, r18
     8c0:	33 27       	eor	r19, r19
     8c2:	24 1b       	sub	r18, r20
     8c4:	35 0b       	sbc	r19, r21
     8c6:	29 39       	cpi	r18, 0x99	; 153
     8c8:	3a 43       	sbci	r19, 0x3A	; 58
     8ca:	94 f0       	brlt	.+36     	; 0x8f0 <main+0x1d4>
		{
			work_mode = 0;
     8cc:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
			home_temp_rx_integer = home_temp_own_integer;
     8d0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <home_temp_own_integer>
     8d4:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			home_temp_rx_fraction = home_temp_own_fraction;
     8d8:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <home_temp_own_fraction>
     8dc:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <home_temp_rx_fraction>
			millis_hometemp_update = millis;
     8e0:	60 93 e3 00 	sts	0x00E3, r22	; 0x8000e3 <millis_hometemp_update>
     8e4:	70 93 e4 00 	sts	0x00E4, r23	; 0x8000e4 <millis_hometemp_update+0x1>
     8e8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <millis_hometemp_update+0x2>
     8ec:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <millis_hometemp_update+0x3>
		}
		//каждые 3сек отправл€ем данные и измер€ем температуру
		if ((millis%3000) == 0)
     8f0:	28 eb       	ldi	r18, 0xB8	; 184
     8f2:	3b e0       	ldi	r19, 0x0B	; 11
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	d0 d4       	rcall	.+2464   	; 0x129a <__divmodsi4>
     8fa:	67 2b       	or	r22, r23
     8fc:	68 2b       	or	r22, r24
     8fe:	69 2b       	or	r22, r25
     900:	91 f5       	brne	.+100    	; 0x966 <main+0x24a>
		{
			buf1[0] = gas_boiler_enable_flag;
     902:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <gas_boiler_enable_flag>
     906:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <buf1>
			//если хотим помен€ть уставку
			if ((temp_setpoint_integer != RX_BUF[1]) || (temp_setpoint_fraction != RX_BUF[2]))
     90a:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     90e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <temp_setpoint_integer>
     912:	29 13       	cpse	r18, r25
     914:	06 c0       	rjmp	.+12     	; 0x922 <main+0x206>
     916:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     91a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     91e:	32 17       	cp	r19, r18
     920:	19 f0       	breq	.+6      	; 0x928 <main+0x20c>
			{
				buf1[0] += 100;
     922:	8c 59       	subi	r24, 0x9C	; 156
     924:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <buf1>
			}
			buf1[1] = temp_setpoint_integer;
     928:	cf ee       	ldi	r28, 0xEF	; 239
     92a:	d0 e0       	ldi	r29, 0x00	; 0
     92c:	99 83       	std	Y+1, r25	; 0x01
			buf1[2] = temp_setpoint_fraction;
     92e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     932:	8a 83       	std	Y+2, r24	; 0x02
			buf1[3] = home_temp_rx_integer;
     934:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     938:	8b 83       	std	Y+3, r24	; 0x03
			buf1[4] = home_temp_rx_fraction;
     93a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     93e:	8c 83       	std	Y+4, r24	; 0x04
			dt = NRF24L01_Send(buf1);
     940:	ce 01       	movw	r24, r28
     942:	28 d4       	rcall	.+2128   	; 0x1194 <NRF24L01_Send>
     944:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <dt>
			memset(buf1, 0, sizeof(int) * strlen(buf1));//очистка массива
     948:	09 90       	ld	r0, Y+
     94a:	00 20       	and	r0, r0
     94c:	e9 f7       	brne	.-6      	; 0x948 <main+0x22c>
     94e:	21 97       	sbiw	r28, 0x01	; 1
     950:	cf 5e       	subi	r28, 0xEF	; 239
     952:	d0 40       	sbci	r29, 0x00	; 0
     954:	ae 01       	movw	r20, r28
     956:	44 0f       	add	r20, r20
     958:	55 1f       	adc	r21, r21
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	8f ee       	ldi	r24, 0xEF	; 239
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 d5       	rcall	.+2564   	; 0x1368 <memset>
			DS18b0_find_temp();
     964:	66 dc       	rcall	.-1844   	; 0x232 <DS18b0_find_temp>
		}
		//вывод инфы на индикатор
		if ((millis%500) == 0)
     966:	60 91 e7 00 	lds	r22, 0x00E7	; 0x8000e7 <millis>
     96a:	70 91 e8 00 	lds	r23, 0x00E8	; 0x8000e8 <millis+0x1>
     96e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <millis+0x2>
     972:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <millis+0x3>
     976:	24 ef       	ldi	r18, 0xF4	; 244
     978:	31 e0       	ldi	r19, 0x01	; 1
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	8d d4       	rcall	.+2330   	; 0x129a <__divmodsi4>
     980:	67 2b       	or	r22, r23
     982:	68 2b       	or	r22, r24
     984:	69 2b       	or	r22, r25
     986:	29 f5       	brne	.+74     	; 0x9d2 <main+0x2b6>
		{
			PrintTemp_MAX7219(home_temp_rx_integer*10+home_temp_rx_fraction, temp_setpoint_integer*10+temp_setpoint_fraction);
     988:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temp_setpoint_integer>
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	bc 01       	movw	r22, r24
     990:	66 0f       	add	r22, r22
     992:	77 1f       	adc	r23, r23
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	68 0f       	add	r22, r24
     9a2:	79 1f       	adc	r23, r25
     9a4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	c9 01       	movw	r24, r18
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     9c4:	62 0f       	add	r22, r18
     9c6:	71 1d       	adc	r23, r1
     9c8:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <home_temp_rx_fraction>
     9cc:	82 0f       	add	r24, r18
     9ce:	91 1d       	adc	r25, r1
     9d0:	81 d0       	rcall	.+258    	; 0xad4 <PrintTemp_MAX7219>
		}
		wdt_reset();
     9d2:	a8 95       	wdr
    }
     9d4:	63 cf       	rjmp	.-314    	; 0x89c <main+0x180>

000009d6 <Send_MAX7219>:
		n /= 10;
	} while (n);
	if (ng) {
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
     9d6:	cf 93       	push	r28
     9d8:	c6 2f       	mov	r28, r22
     9da:	95 b3       	in	r25, 0x15	; 21
     9dc:	9e 7f       	andi	r25, 0xFE	; 254
     9de:	95 bb       	out	0x15, r25	; 21
     9e0:	00 00       	nop
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	96 de       	rcall	.-724    	; 0x712 <spi_send_recv>
     9e6:	8c 2f       	mov	r24, r28
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	93 de       	rcall	.-730    	; 0x712 <spi_send_recv>
     9ec:	85 b3       	in	r24, 0x15	; 21
     9ee:	81 60       	ori	r24, 0x01	; 1
     9f0:	85 bb       	out	0x15, r24	; 21
     9f2:	00 00       	nop
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <MAX7219_clear>:
     9f8:	cf 93       	push	r28
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	8f e0       	ldi	r24, 0x0F	; 15
     9fe:	eb df       	rcall	.-42     	; 0x9d6 <Send_MAX7219>
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	e8 df       	rcall	.-48     	; 0x9d6 <Send_MAX7219>
     a06:	67 e0       	ldi	r22, 0x07	; 7
     a08:	8b e0       	ldi	r24, 0x0B	; 11
     a0a:	e5 df       	rcall	.-54     	; 0x9d6 <Send_MAX7219>
     a0c:	6f ef       	ldi	r22, 0xFF	; 255
     a0e:	89 e0       	ldi	r24, 0x09	; 9
     a10:	e2 df       	rcall	.-60     	; 0x9d6 <Send_MAX7219>
     a12:	c8 e0       	ldi	r28, 0x08	; 8
     a14:	6f e0       	ldi	r22, 0x0F	; 15
     a16:	8c 2f       	mov	r24, r28
     a18:	de df       	rcall	.-68     	; 0x9d6 <Send_MAX7219>
     a1a:	c1 50       	subi	r28, 0x01	; 1
     a1c:	d9 f7       	brne	.-10     	; 0xa14 <MAX7219_clear+0x1c>
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <MAX7219_init>:
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	8f e0       	ldi	r24, 0x0F	; 15
     a26:	d7 df       	rcall	.-82     	; 0x9d6 <Send_MAX7219>
     a28:	8f e3       	ldi	r24, 0x3F	; 63
     a2a:	9c e9       	ldi	r25, 0x9C	; 156
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <MAX7219_init+0xa>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <MAX7219_init+0x10>
     a32:	00 00       	nop
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	8c e0       	ldi	r24, 0x0C	; 12
     a38:	ce df       	rcall	.-100    	; 0x9d6 <Send_MAX7219>
     a3a:	8f e3       	ldi	r24, 0x3F	; 63
     a3c:	9c e9       	ldi	r25, 0x9C	; 156
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <MAX7219_init+0x1c>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <MAX7219_init+0x22>
     a44:	00 00       	nop
     a46:	67 e0       	ldi	r22, 0x07	; 7
     a48:	8b e0       	ldi	r24, 0x0B	; 11
     a4a:	c5 df       	rcall	.-118    	; 0x9d6 <Send_MAX7219>
     a4c:	8f e3       	ldi	r24, 0x3F	; 63
     a4e:	9c e9       	ldi	r25, 0x9C	; 156
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <MAX7219_init+0x2e>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <MAX7219_init+0x34>
     a56:	00 00       	nop
     a58:	6f ef       	ldi	r22, 0xFF	; 255
     a5a:	89 e0       	ldi	r24, 0x09	; 9
     a5c:	bc df       	rcall	.-136    	; 0x9d6 <Send_MAX7219>
     a5e:	8f e3       	ldi	r24, 0x3F	; 63
     a60:	9c e9       	ldi	r25, 0x9C	; 156
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <MAX7219_init+0x40>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <MAX7219_init+0x46>
     a68:	00 00       	nop
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	8a e0       	ldi	r24, 0x0A	; 10
     a6e:	b3 df       	rcall	.-154    	; 0x9d6 <Send_MAX7219>
     a70:	8f e3       	ldi	r24, 0x3F	; 63
     a72:	9c e9       	ldi	r25, 0x9C	; 156
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <MAX7219_init+0x52>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <MAX7219_init+0x58>
     a7a:	00 00       	nop
     a7c:	bd df       	rcall	.-134    	; 0x9f8 <MAX7219_clear>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	89 e0       	ldi	r24, 0x09	; 9
     a82:	a9 df       	rcall	.-174    	; 0x9d6 <Send_MAX7219>
     a84:	8f e3       	ldi	r24, 0x3F	; 63
     a86:	9c e9       	ldi	r25, 0x9C	; 156
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <MAX7219_init+0x66>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <MAX7219_init+0x6c>
     a8e:	00 00       	nop
     a90:	6f ef       	ldi	r22, 0xFF	; 255
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	a0 df       	rcall	.-192    	; 0x9d6 <Send_MAX7219>
     a96:	6f ef       	ldi	r22, 0xFF	; 255
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	9d df       	rcall	.-198    	; 0x9d6 <Send_MAX7219>
     a9c:	6f ef       	ldi	r22, 0xFF	; 255
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	9a df       	rcall	.-204    	; 0x9d6 <Send_MAX7219>
     aa2:	6f ef       	ldi	r22, 0xFF	; 255
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	97 df       	rcall	.-210    	; 0x9d6 <Send_MAX7219>
     aa8:	6f ef       	ldi	r22, 0xFF	; 255
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	94 df       	rcall	.-216    	; 0x9d6 <Send_MAX7219>
     aae:	6f ef       	ldi	r22, 0xFF	; 255
     ab0:	86 e0       	ldi	r24, 0x06	; 6
     ab2:	91 df       	rcall	.-222    	; 0x9d6 <Send_MAX7219>
     ab4:	6f ef       	ldi	r22, 0xFF	; 255
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	8e df       	rcall	.-228    	; 0x9d6 <Send_MAX7219>
     aba:	6f ef       	ldi	r22, 0xFF	; 255
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	8b df       	rcall	.-234    	; 0x9d6 <Send_MAX7219>
     ac0:	9f ef       	ldi	r25, 0xFF	; 255
     ac2:	23 ed       	ldi	r18, 0xD3	; 211
     ac4:	80 e3       	ldi	r24, 0x30	; 48
     ac6:	91 50       	subi	r25, 0x01	; 1
     ac8:	20 40       	sbci	r18, 0x00	; 0
     aca:	80 40       	sbci	r24, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <MAX7219_init+0xa4>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <MAX7219_init+0xae>
     ad0:	00 00       	nop
     ad2:	08 95       	ret

00000ad4 <PrintTemp_MAX7219>:
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	8c 01       	movw	r16, r24
     ae0:	eb 01       	movw	r28, r22
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     ae2:	08 3e       	cpi	r16, 0xE8	; 232
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	18 07       	cpc	r17, r24
     ae8:	0c f0       	brlt	.+2      	; 0xaec <PrintTemp_MAX7219+0x18>
     aea:	67 c0       	rjmp	.+206    	; 0xbba <PrintTemp_MAX7219+0xe6>
     aec:	68 3e       	cpi	r22, 0xE8	; 232
     aee:	73 40       	sbci	r23, 0x03	; 3
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <PrintTemp_MAX7219+0x20>
     af2:	65 c0       	rjmp	.+202    	; 0xbbe <PrintTemp_MAX7219+0xea>
	uint8_t start_pos;
	start_pos = 2;

	MAX7219_clear();
     af4:	81 df       	rcall	.-254    	; 0x9f8 <MAX7219_clear>
	Send_MAX7219(0x09, 0xEE); //включим режим декодировани€ дл€ всех разр€дов кроме позиций 2 и 6
     af6:	6e ee       	ldi	r22, 0xEE	; 238
     af8:	89 e0       	ldi	r24, 0x09	; 9
     afa:	6d df       	rcall	.-294    	; 0x9d6 <Send_MAX7219>
	//_delay_ms(10);
	Send_MAX7219(1, 0x4E);//вывод букв —
     afc:	6e e4       	ldi	r22, 0x4E	; 78
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	6a df       	rcall	.-300    	; 0x9d6 <Send_MAX7219>
	Send_MAX7219(5, 0x4E);//вывод букв —
     b02:	6e e4       	ldi	r22, 0x4E	; 78
     b04:	85 e0       	ldi	r24, 0x05	; 5
     b06:	67 df       	rcall	.-306    	; 0x9d6 <Send_MAX7219>
	if (current_temp == 0)
     b08:	01 15       	cp	r16, r1
     b0a:	11 05       	cpc	r17, r1
     b0c:	29 f5       	brne	.+74     	; 0xb58 <PrintTemp_MAX7219+0x84>
	{
		Send_MAX7219(start_pos, 0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	61 df       	rcall	.-318    	; 0x9d6 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     b14:	60 e8       	ldi	r22, 0x80	; 128
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	5e df       	rcall	.-324    	; 0x9d6 <Send_MAX7219>
     b1a:	24 c0       	rjmp	.+72     	; 0xb64 <PrintTemp_MAX7219+0x90>
	}
	else
	{
		while (current_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	f8 16       	cp	r15, r24
     b20:	19 f0       	breq	.+6      	; 0xb28 <PrintTemp_MAX7219+0x54>
     b22:	87 e0       	ldi	r24, 0x07	; 7
     b24:	f8 12       	cpse	r15, r24
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <PrintTemp_MAX7219+0x66>
			{
				Send_MAX7219(start_pos, (current_temp%10)|0x80);//вывод с точкой
     b28:	c8 01       	movw	r24, r16
     b2a:	6a e0       	ldi	r22, 0x0A	; 10
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	a2 d3       	rcall	.+1860   	; 0x1274 <__divmodhi4>
     b30:	68 2f       	mov	r22, r24
     b32:	60 68       	ori	r22, 0x80	; 128
     b34:	8f 2d       	mov	r24, r15
     b36:	4f df       	rcall	.-354    	; 0x9d6 <Send_MAX7219>
     b38:	07 c0       	rjmp	.+14     	; 0xb48 <PrintTemp_MAX7219+0x74>
			}
			else
			{
				Send_MAX7219(start_pos, current_temp%10);
     b3a:	c8 01       	movw	r24, r16
     b3c:	6a e0       	ldi	r22, 0x0A	; 10
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	99 d3       	rcall	.+1842   	; 0x1274 <__divmodhi4>
     b42:	68 2f       	mov	r22, r24
     b44:	8f 2d       	mov	r24, r15
     b46:	47 df       	rcall	.-370    	; 0x9d6 <Send_MAX7219>
			}
			start_pos++;
     b48:	f3 94       	inc	r15
			current_temp /= 10;
     b4a:	c8 01       	movw	r24, r16
     b4c:	6a e0       	ldi	r22, 0x0A	; 10
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	91 d3       	rcall	.+1826   	; 0x1274 <__divmodhi4>
     b52:	8b 01       	movw	r16, r22
			asm("nop");
     b54:	00 00       	nop
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <PrintTemp_MAX7219+0x8a>
     b58:	68 94       	set
     b5a:	ff 24       	eor	r15, r15
     b5c:	f1 f8       	bld	r15, 1
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (current_temp != 0)
     b5e:	01 15       	cp	r16, r1
     b60:	11 05       	cpc	r17, r1
     b62:	e1 f6       	brne	.-72     	; 0xb1c <PrintTemp_MAX7219+0x48>
			current_temp /= 10;
			asm("nop");
		}
	}
	start_pos = 6;
	if (setpoint_temp == 0)
     b64:	20 97       	sbiw	r28, 0x00	; 0
     b66:	21 f5       	brne	.+72     	; 0xbb0 <PrintTemp_MAX7219+0xdc>
	{
		Send_MAX7219(start_pos, 0);
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	34 df       	rcall	.-408    	; 0x9d6 <Send_MAX7219>
		Send_MAX7219(start_pos+1, 0x80);
     b6e:	60 e8       	ldi	r22, 0x80	; 128
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	31 df       	rcall	.-414    	; 0x9d6 <Send_MAX7219>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	24 c0       	rjmp	.+72     	; 0xbc0 <PrintTemp_MAX7219+0xec>
	}
	else
	{
		while (setpoint_temp != 0)
		{
			if((start_pos == 3)||(start_pos == 7))
     b78:	13 30       	cpi	r17, 0x03	; 3
     b7a:	11 f0       	breq	.+4      	; 0xb80 <PrintTemp_MAX7219+0xac>
     b7c:	17 30       	cpi	r17, 0x07	; 7
     b7e:	49 f4       	brne	.+18     	; 0xb92 <PrintTemp_MAX7219+0xbe>
			{
				Send_MAX7219(start_pos, (setpoint_temp%10)|0x80);//вывод с точкой
     b80:	ce 01       	movw	r24, r28
     b82:	6a e0       	ldi	r22, 0x0A	; 10
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	76 d3       	rcall	.+1772   	; 0x1274 <__divmodhi4>
     b88:	68 2f       	mov	r22, r24
     b8a:	60 68       	ori	r22, 0x80	; 128
     b8c:	81 2f       	mov	r24, r17
     b8e:	23 df       	rcall	.-442    	; 0x9d6 <Send_MAX7219>
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <PrintTemp_MAX7219+0xcc>
			}
			else
			{
				Send_MAX7219(start_pos, setpoint_temp%10);
     b92:	ce 01       	movw	r24, r28
     b94:	6a e0       	ldi	r22, 0x0A	; 10
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	6d d3       	rcall	.+1754   	; 0x1274 <__divmodhi4>
     b9a:	68 2f       	mov	r22, r24
     b9c:	81 2f       	mov	r24, r17
     b9e:	1b df       	rcall	.-458    	; 0x9d6 <Send_MAX7219>
			}
			start_pos++;
     ba0:	1f 5f       	subi	r17, 0xFF	; 255
			setpoint_temp /= 10;
     ba2:	ce 01       	movw	r24, r28
     ba4:	6a e0       	ldi	r22, 0x0A	; 10
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	65 d3       	rcall	.+1738   	; 0x1274 <__divmodhi4>
     baa:	eb 01       	movw	r28, r22
			asm("nop");
     bac:	00 00       	nop
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <PrintTemp_MAX7219+0xde>
     bb0:	16 e0       	ldi	r17, 0x06	; 6
		Send_MAX7219(start_pos, 0);
		Send_MAX7219(start_pos+1, 0x80);
	}
	else
	{
		while (setpoint_temp != 0)
     bb2:	20 97       	sbiw	r28, 0x00	; 0
     bb4:	09 f7       	brne	.-62     	; 0xb78 <PrintTemp_MAX7219+0xa4>
			start_pos++;
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <PrintTemp_MAX7219+0xec>
		Send_MAX7219(i+1, 0xA); //символ Ч
	}
}
uint8_t PrintTemp_MAX7219(int current_temp, int setpoint_temp)
{
	if ((current_temp > 999) || (setpoint_temp > 999)) return 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <PrintTemp_MAX7219+0xec>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
			setpoint_temp /= 10;
			asm("nop");
		}
	}
	return 0;
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	08 95       	ret

00000bcc <NRF24_Transmit>:
//-------------------------------------------------------------
void nRF_command(uint8_t command)
{
	LOW_CSN;
	spi_send_recv(command);
	HIGH_CSN;
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	8b 01       	movw	r16, r22
     bda:	c4 2f       	mov	r28, r20
     bdc:	98 b3       	in	r25, 0x18	; 24
     bde:	9d 7f       	andi	r25, 0xFD	; 253
     be0:	98 bb       	out	0x18, r25	; 24
     be2:	98 b3       	in	r25, 0x18	; 24
     be4:	9b 7f       	andi	r25, 0xFB	; 251
     be6:	98 bb       	out	0x18, r25	; 24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	93 dd       	rcall	.-1242   	; 0x712 <spi_send_recv>
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	8a 95       	dec	r24
     bf0:	f1 f7       	brne	.-4      	; 0xbee <NRF24_Transmit+0x22>
     bf2:	00 00       	nop
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <NRF24_Transmit+0x3e>
     bf6:	78 01       	movw	r14, r16
     bf8:	ef ef       	ldi	r30, 0xFF	; 255
     bfa:	ee 1a       	sub	r14, r30
     bfc:	fe 0a       	sbc	r15, r30
     bfe:	f8 01       	movw	r30, r16
     c00:	80 81       	ld	r24, Z
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	86 dd       	rcall	.-1268   	; 0x712 <spi_send_recv>
     c06:	cd 2f       	mov	r28, r29
     c08:	87 01       	movw	r16, r14
     c0a:	df ef       	ldi	r29, 0xFF	; 255
     c0c:	dc 0f       	add	r29, r28
     c0e:	c1 11       	cpse	r28, r1
     c10:	f2 cf       	rjmp	.-28     	; 0xbf6 <NRF24_Transmit+0x2a>
     c12:	88 b3       	in	r24, 0x18	; 24
     c14:	84 60       	ori	r24, 0x04	; 4
     c16:	88 bb       	out	0x18, r24	; 24
     c18:	88 b3       	in	r24, 0x18	; 24
     c1a:	82 60       	ori	r24, 0x02	; 2
     c1c:	88 bb       	out	0x18, r24	; 24
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <NRF24_FlushRX>:
     c2c:	88 b3       	in	r24, 0x18	; 24
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	88 bb       	out	0x18, r24	; 24
     c32:	82 ee       	ldi	r24, 0xE2	; 226
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	6d dd       	rcall	.-1318   	; 0x712 <spi_send_recv>
     c38:	85 e0       	ldi	r24, 0x05	; 5
     c3a:	8a 95       	dec	r24
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <NRF24_FlushRX+0xe>
     c3e:	00 00       	nop
     c40:	88 b3       	in	r24, 0x18	; 24
     c42:	84 60       	ori	r24, 0x04	; 4
     c44:	88 bb       	out	0x18, r24	; 24
     c46:	08 95       	ret

00000c48 <NRF24_FlushTX>:
     c48:	88 b3       	in	r24, 0x18	; 24
     c4a:	8b 7f       	andi	r24, 0xFB	; 251
     c4c:	88 bb       	out	0x18, r24	; 24
     c4e:	81 ee       	ldi	r24, 0xE1	; 225
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	5f dd       	rcall	.-1346   	; 0x712 <spi_send_recv>
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	8a 95       	dec	r24
     c58:	f1 f7       	brne	.-4      	; 0xc56 <NRF24_FlushTX+0xe>
     c5a:	00 00       	nop
     c5c:	88 b3       	in	r24, 0x18	; 24
     c5e:	84 60       	ori	r24, 0x04	; 4
     c60:	88 bb       	out	0x18, r24	; 24
     c62:	08 95       	ret

00000c64 <NRF24_ToggleFeatures>:
     c64:	88 b3       	in	r24, 0x18	; 24
     c66:	8b 7f       	andi	r24, 0xFB	; 251
     c68:	88 bb       	out	0x18, r24	; 24
     c6a:	80 e5       	ldi	r24, 0x50	; 80
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	51 dd       	rcall	.-1374   	; 0x712 <spi_send_recv>
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	8a 95       	dec	r24
     c74:	f1 f7       	brne	.-4      	; 0xc72 <NRF24_ToggleFeatures+0xe>
     c76:	00 00       	nop
     c78:	83 e7       	ldi	r24, 0x73	; 115
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	4a dd       	rcall	.-1388   	; 0x712 <spi_send_recv>
     c7e:	88 b3       	in	r24, 0x18	; 24
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	88 bb       	out	0x18, r24	; 24
     c84:	08 95       	ret

00000c86 <NRF24_Read_Buf>:
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	8b 01       	movw	r16, r22
     c94:	c4 2f       	mov	r28, r20
     c96:	98 b3       	in	r25, 0x18	; 24
     c98:	9b 7f       	andi	r25, 0xFB	; 251
     c9a:	98 bb       	out	0x18, r25	; 24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	39 dd       	rcall	.-1422   	; 0x712 <spi_send_recv>
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <NRF24_Read_Buf+0x32>
     ca2:	78 01       	movw	r14, r16
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	e8 1a       	sub	r14, r24
     ca8:	f8 0a       	sbc	r15, r24
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	31 dd       	rcall	.-1438   	; 0x712 <spi_send_recv>
     cb0:	f8 01       	movw	r30, r16
     cb2:	80 83       	st	Z, r24
     cb4:	cd 2f       	mov	r28, r29
     cb6:	87 01       	movw	r16, r14
     cb8:	df ef       	ldi	r29, 0xFF	; 255
     cba:	dc 0f       	add	r29, r28
     cbc:	c1 11       	cpse	r28, r1
     cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <NRF24_Read_Buf+0x1c>
     cc0:	88 b3       	in	r24, 0x18	; 24
     cc2:	84 60       	ori	r24, 0x04	; 4
     cc4:	88 bb       	out	0x18, r24	; 24
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	08 95       	ret

00000cd4 <NRF24_Write_Buf>:
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	8b 01       	movw	r16, r22
     ce2:	c4 2f       	mov	r28, r20
     ce4:	80 62       	ori	r24, 0x20	; 32
     ce6:	98 b3       	in	r25, 0x18	; 24
     ce8:	9b 7f       	andi	r25, 0xFB	; 251
     cea:	98 bb       	out	0x18, r25	; 24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	11 dd       	rcall	.-1502   	; 0x712 <spi_send_recv>
     cf0:	85 e0       	ldi	r24, 0x05	; 5
     cf2:	8a 95       	dec	r24
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <NRF24_Write_Buf+0x1e>
     cf6:	00 00       	nop
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <NRF24_Write_Buf+0x3a>
     cfa:	78 01       	movw	r14, r16
     cfc:	ef ef       	ldi	r30, 0xFF	; 255
     cfe:	ee 1a       	sub	r14, r30
     d00:	fe 0a       	sbc	r15, r30
     d02:	f8 01       	movw	r30, r16
     d04:	80 81       	ld	r24, Z
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	04 dd       	rcall	.-1528   	; 0x712 <spi_send_recv>
     d0a:	cd 2f       	mov	r28, r29
     d0c:	87 01       	movw	r16, r14
     d0e:	df ef       	ldi	r29, 0xFF	; 255
     d10:	dc 0f       	add	r29, r28
     d12:	c1 11       	cpse	r28, r1
     d14:	f2 cf       	rjmp	.-28     	; 0xcfa <NRF24_Write_Buf+0x26>
     d16:	88 b3       	in	r24, 0x18	; 24
     d18:	84 60       	ori	r24, 0x04	; 4
     d1a:	88 bb       	out	0x18, r24	; 24
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <NRF24L01_TX_Mode>:
     d2a:	43 e0       	ldi	r20, 0x03	; 3
     d2c:	65 e6       	ldi	r22, 0x65	; 101
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	d0 df       	rcall	.-96     	; 0xcd4 <NRF24_Write_Buf>
     d34:	43 e0       	ldi	r20, 0x03	; 3
     d36:	65 e6       	ldi	r22, 0x65	; 101
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
     d3c:	cb df       	rcall	.-106    	; 0xcd4 <NRF24_Write_Buf>
     d3e:	88 b3       	in	r24, 0x18	; 24
     d40:	8d 7f       	andi	r24, 0xFD	; 253
     d42:	88 bb       	out	0x18, r24	; 24
     d44:	73 df       	rcall	.-282    	; 0xc2c <NRF24_FlushRX>
     d46:	80 df       	rcall	.-256    	; 0xc48 <NRF24_FlushTX>
     d48:	08 95       	ret

00000d4a <nRF_write_register>:
}
//-------------------------------------------------------------
void nRF_write_register(uint8_t reg, uint8_t data_out)
{
     d4a:	cf 93       	push	r28
     d4c:	c6 2f       	mov	r28, r22
	reg |= W_REGISTER;
     d4e:	80 62       	ori	r24, 0x20	; 32
	LOW_CSN;
     d50:	98 b3       	in	r25, 0x18	; 24
     d52:	9b 7f       	andi	r25, 0xFB	; 251
     d54:	98 bb       	out	0x18, r25	; 24
	spi_send_recv(reg);
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	dc dc       	rcall	.-1608   	; 0x712 <spi_send_recv>
	spi_send_recv(data_out);
     d5a:	8c 2f       	mov	r24, r28
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	d9 dc       	rcall	.-1614   	; 0x712 <spi_send_recv>
	HIGH_CSN;
     d60:	88 b3       	in	r24, 0x18	; 24
     d62:	84 60       	ori	r24, 0x04	; 4
     d64:	88 bb       	out	0x18, r24	; 24
}
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <nRF_read_register>:
//-------------------------------------------------------------
uint8_t nRF_read_register(uint8_t reg)
{
     d6a:	cf 93       	push	r28
     d6c:	c8 2f       	mov	r28, r24
	uint8_t data_in;
	LOW_CSN;
     d6e:	88 b3       	in	r24, 0x18	; 24
     d70:	8b 7f       	andi	r24, 0xFB	; 251
     d72:	88 bb       	out	0x18, r24	; 24
	data_in = spi_send_recv(reg);
     d74:	8c 2f       	mov	r24, r28
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	cc dc       	rcall	.-1640   	; 0x712 <spi_send_recv>
	if(reg != STATUS)
     d7a:	c7 30       	cpi	r28, 0x07	; 7
     d7c:	19 f0       	breq	.+6      	; 0xd84 <nRF_read_register+0x1a>
	{
		data_in = spi_send_recv(NOP);
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	c7 dc       	rcall	.-1650   	; 0x712 <spi_send_recv>
	}
	HIGH_CSN;
     d84:	98 b3       	in	r25, 0x18	; 24
     d86:	94 60       	ori	r25, 0x04	; 4
     d88:	98 bb       	out	0x18, r25	; 24
	return data_in;
}
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <__vector_1>:
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
	return regval;
}
//-------------------------------------------------------------
ISR(INT0_vect)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	cf 93       	push	r28
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	uint8_t status=0x01;
	status = nRF_read_register(STATUS);
     db2:	87 e0       	ldi	r24, 0x07	; 7
     db4:	da df       	rcall	.-76     	; 0xd6a <nRF_read_register>
     db6:	c8 2f       	mov	r28, r24
	if(status & 0x40)
     db8:	86 ff       	sbrs	r24, 6
     dba:	7c c1       	rjmp	.+760    	; 0x10b4 <__vector_1+0x326>
	{
		pipe = (status>>1)&0x07;
     dbc:	86 95       	lsr	r24
     dbe:	87 70       	andi	r24, 0x07	; 7
     dc0:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <pipe>
		NRF24_Read_Buf(R_RX_PAYLOAD,RX_BUF,TX_PLOAD_WIDTH);
     dc4:	45 e0       	ldi	r20, 0x05	; 5
     dc6:	6c ef       	ldi	r22, 0xFC	; 252
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	81 e6       	ldi	r24, 0x61	; 97
     dcc:	5c df       	rcall	.-328    	; 0xc86 <NRF24_Read_Buf>
		nRF_write_register(STATUS, 0x40);
     dce:	60 e4       	ldi	r22, 0x40	; 64
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	bb df       	rcall	.-138    	; 0xd4a <nRF_write_register>
		rx_flag = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <rx_flag>
		PORTD |= (1<<LED_RX);
     dda:	82 b3       	in	r24, 0x12	; 18
     ddc:	80 62       	ori	r24, 0x20	; 32
     dde:	82 bb       	out	0x12, r24	; 18
     de0:	2f ef       	ldi	r18, 0xFF	; 255
     de2:	81 ee       	ldi	r24, 0xE1	; 225
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	21 50       	subi	r18, 0x01	; 1
     de8:	80 40       	sbci	r24, 0x00	; 0
     dea:	90 40       	sbci	r25, 0x00	; 0
     dec:	e1 f7       	brne	.-8      	; 0xde6 <__vector_1+0x58>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <__vector_1+0x62>
     df0:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_RX);
     df2:	82 b3       	in	r24, 0x12	; 18
     df4:	8f 7d       	andi	r24, 0xDF	; 223
     df6:	82 bb       	out	0x12, r24	; 18
		millis_hometemp_update = millis;
     df8:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <millis>
     dfc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <millis+0x1>
     e00:	a0 91 e9 00 	lds	r26, 0x00E9	; 0x8000e9 <millis+0x2>
     e04:	b0 91 ea 00 	lds	r27, 0x00EA	; 0x8000ea <millis+0x3>
     e08:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <millis_hometemp_update>
     e0c:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <millis_hometemp_update+0x1>
     e10:	a0 93 e5 00 	sts	0x00E5, r26	; 0x8000e5 <millis_hometemp_update+0x2>
     e14:	b0 93 e6 00 	sts	0x00E6, r27	; 0x8000e6 <millis_hometemp_update+0x3>
		
		gas_boiler_enable_flag = RX_BUF[0];
     e18:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <RX_BUF>
     e1c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <gas_boiler_enable_flag>
		switch (gas_boiler_enable_flag)
     e20:	8b 30       	cpi	r24, 0x0B	; 11
     e22:	09 f4       	brne	.+2      	; 0xe26 <__vector_1+0x98>
     e24:	71 c0       	rjmp	.+226    	; 0xf08 <__vector_1+0x17a>
     e26:	38 f4       	brcc	.+14     	; 0xe36 <__vector_1+0xa8>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	79 f1       	breq	.+94     	; 0xe8a <__vector_1+0xfc>
     e2c:	98 f0       	brcs	.+38     	; 0xe54 <__vector_1+0xc6>
     e2e:	8a 30       	cpi	r24, 0x0A	; 10
     e30:	09 f4       	brne	.+2      	; 0xe34 <__vector_1+0xa6>
     e32:	46 c0       	rjmp	.+140    	; 0xec0 <__vector_1+0x132>
     e34:	3f c1       	rjmp	.+638    	; 0x10b4 <__vector_1+0x326>
     e36:	85 36       	cpi	r24, 0x65	; 101
     e38:	09 f4       	brne	.+2      	; 0xe3c <__vector_1+0xae>
     e3a:	b3 c0       	rjmp	.+358    	; 0xfa2 <__vector_1+0x214>
     e3c:	20 f4       	brcc	.+8      	; 0xe46 <__vector_1+0xb8>
     e3e:	84 36       	cpi	r24, 0x64	; 100
     e40:	09 f4       	brne	.+2      	; 0xe44 <__vector_1+0xb6>
     e42:	86 c0       	rjmp	.+268    	; 0xf50 <__vector_1+0x1c2>
     e44:	37 c1       	rjmp	.+622    	; 0x10b4 <__vector_1+0x326>
     e46:	8e 36       	cpi	r24, 0x6E	; 110
     e48:	09 f4       	brne	.+2      	; 0xe4c <__vector_1+0xbe>
     e4a:	d5 c0       	rjmp	.+426    	; 0xff6 <__vector_1+0x268>
     e4c:	8f 36       	cpi	r24, 0x6F	; 111
     e4e:	09 f4       	brne	.+2      	; 0xe52 <__vector_1+0xc4>
     e50:	04 c1       	rjmp	.+520    	; 0x105a <__vector_1+0x2cc>
     e52:	30 c1       	rjmp	.+608    	; 0x10b4 <__vector_1+0x326>
		{
			case 0:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     e54:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     e58:	83 33       	cpi	r24, 0x33	; 51
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <__vector_1+0xd0>
     e5c:	2b c1       	rjmp	.+598    	; 0x10b4 <__vector_1+0x326>
     e5e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     e62:	9a 30       	cpi	r25, 0x0A	; 10
     e64:	08 f0       	brcs	.+2      	; 0xe68 <__vector_1+0xda>
     e66:	26 c1       	rjmp	.+588    	; 0x10b4 <__vector_1+0x326>
     e68:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     e6c:	23 33       	cpi	r18, 0x33	; 51
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <__vector_1+0xe4>
     e70:	21 c1       	rjmp	.+578    	; 0x10b4 <__vector_1+0x326>
     e72:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     e76:	2a 30       	cpi	r18, 0x0A	; 10
     e78:	08 f0       	brcs	.+2      	; 0xe7c <__vector_1+0xee>
     e7a:	1c c1       	rjmp	.+568    	; 0x10b4 <__vector_1+0x326>
					{
						work_mode = 0;
     e7c:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     e80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     e84:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
     e88:	15 c1       	rjmp	.+554    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 1:	
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     e8a:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     e8e:	83 33       	cpi	r24, 0x33	; 51
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__vector_1+0x106>
     e92:	10 c1       	rjmp	.+544    	; 0x10b4 <__vector_1+0x326>
     e94:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     e98:	9a 30       	cpi	r25, 0x0A	; 10
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <__vector_1+0x110>
     e9c:	0b c1       	rjmp	.+534    	; 0x10b4 <__vector_1+0x326>
     e9e:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     ea2:	23 33       	cpi	r18, 0x33	; 51
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <__vector_1+0x11a>
     ea6:	06 c1       	rjmp	.+524    	; 0x10b4 <__vector_1+0x326>
     ea8:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     eac:	2a 30       	cpi	r18, 0x0A	; 10
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <__vector_1+0x124>
     eb0:	01 c1       	rjmp	.+514    	; 0x10b4 <__vector_1+0x326>
					{
						work_mode = 0;
     eb2:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     eb6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     eba:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
     ebe:	fa c0       	rjmp	.+500    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 10:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     ec0:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     ec4:	83 33       	cpi	r24, 0x33	; 51
     ec6:	08 f0       	brcs	.+2      	; 0xeca <__vector_1+0x13c>
     ec8:	f5 c0       	rjmp	.+490    	; 0x10b4 <__vector_1+0x326>
     eca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     ece:	9a 30       	cpi	r25, 0x0A	; 10
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <__vector_1+0x146>
     ed2:	f0 c0       	rjmp	.+480    	; 0x10b4 <__vector_1+0x326>
     ed4:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     ed8:	23 33       	cpi	r18, 0x33	; 51
     eda:	08 f0       	brcs	.+2      	; 0xede <__vector_1+0x150>
     edc:	eb c0       	rjmp	.+470    	; 0x10b4 <__vector_1+0x326>
     ede:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     ee2:	2a 30       	cpi	r18, 0x0A	; 10
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <__vector_1+0x15a>
     ee6:	e6 c0       	rjmp	.+460    	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 0;
     ee8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     ef2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     ef6:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						PORTB |= (1<<MOSFET);
     efa:	88 b3       	in	r24, 0x18	; 24
     efc:	81 60       	ori	r24, 0x01	; 1
     efe:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
     f00:	82 b3       	in	r24, 0x12	; 18
     f02:	8f 7e       	andi	r24, 0xEF	; 239
     f04:	82 bb       	out	0x12, r24	; 18
     f06:	d6 c0       	rjmp	.+428    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 11:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f08:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     f0c:	83 33       	cpi	r24, 0x33	; 51
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <__vector_1+0x184>
     f10:	d1 c0       	rjmp	.+418    	; 0x10b4 <__vector_1+0x326>
     f12:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     f16:	9a 30       	cpi	r25, 0x0A	; 10
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__vector_1+0x18e>
     f1a:	cc c0       	rjmp	.+408    	; 0x10b4 <__vector_1+0x326>
     f1c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     f20:	23 33       	cpi	r18, 0x33	; 51
     f22:	08 f0       	brcs	.+2      	; 0xf26 <__vector_1+0x198>
     f24:	c7 c0       	rjmp	.+398    	; 0x10b4 <__vector_1+0x326>
     f26:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     f2a:	2a 30       	cpi	r18, 0x0A	; 10
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <__vector_1+0x1a2>
     f2e:	c2 c0       	rjmp	.+388    	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 1;
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	20 93 ee 00 	sts	0x00EE, r18	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
     f36:	20 93 eb 00 	sts	0x00EB, r18	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f3a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     f3e:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						PORTB &= ~(1<<MOSFET);
     f42:	88 b3       	in	r24, 0x18	; 24
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
     f48:	82 b3       	in	r24, 0x12	; 18
     f4a:	80 61       	ori	r24, 0x10	; 16
     f4c:	82 bb       	out	0x12, r24	; 18
     f4e:	b2 c0       	rjmp	.+356    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 100:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     f50:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     f54:	83 33       	cpi	r24, 0x33	; 51
     f56:	08 f0       	brcs	.+2      	; 0xf5a <__vector_1+0x1cc>
     f58:	ad c0       	rjmp	.+346    	; 0x10b4 <__vector_1+0x326>
     f5a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     f5e:	9a 30       	cpi	r25, 0x0A	; 10
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__vector_1+0x1d6>
     f62:	a8 c0       	rjmp	.+336    	; 0x10b4 <__vector_1+0x326>
     f64:	60 91 fd 00 	lds	r22, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     f68:	63 33       	cpi	r22, 0x33	; 51
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__vector_1+0x1e0>
     f6c:	a3 c0       	rjmp	.+326    	; 0x10b4 <__vector_1+0x326>
     f6e:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     f72:	2a 30       	cpi	r18, 0x0A	; 10
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__vector_1+0x1ea>
     f76:	9e c0       	rjmp	.+316    	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 0;
     f78:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 0;
     f7c:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     f80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     f84:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     f88:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     f8c:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <temp_setpoint_fraction>
						EEPROM_write(1, temp_setpoint_integer);
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	87 d9       	rcall	.-3314   	; 0x2a4 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
     f96:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	82 d9       	rcall	.-3324   	; 0x2a4 <EEPROM_write>
     fa0:	89 c0       	rjmp	.+274    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 101:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     fa2:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     fa6:	83 33       	cpi	r24, 0x33	; 51
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__vector_1+0x21e>
     faa:	84 c0       	rjmp	.+264    	; 0x10b4 <__vector_1+0x326>
     fac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
     fb0:	9a 30       	cpi	r25, 0x0A	; 10
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <__vector_1+0x228>
     fb4:	7f c0       	rjmp	.+254    	; 0x10b4 <__vector_1+0x326>
     fb6:	60 91 fd 00 	lds	r22, 0x00FD	; 0x8000fd <RX_BUF+0x1>
     fba:	63 33       	cpi	r22, 0x33	; 51
     fbc:	08 f0       	brcs	.+2      	; 0xfc0 <__vector_1+0x232>
     fbe:	7a c0       	rjmp	.+244    	; 0x10b4 <__vector_1+0x326>
     fc0:	20 91 fe 00 	lds	r18, 0x00FE	; 0x8000fe <RX_BUF+0x2>
     fc4:	2a 30       	cpi	r18, 0x0A	; 10
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__vector_1+0x23c>
     fc8:	75 c0       	rjmp	.+234    	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 1;
     fca:	31 e0       	ldi	r19, 0x01	; 1
     fcc:	30 93 ee 00 	sts	0x00EE, r19	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 0;
     fd0:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
     fd4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
     fd8:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
     fdc:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
     fe0:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <temp_setpoint_fraction>
						EEPROM_write(1, temp_setpoint_integer);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	5d d9       	rcall	.-3398   	; 0x2a4 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
     fea:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	58 d9       	rcall	.-3408   	; 0x2a4 <EEPROM_write>
     ff4:	5f c0       	rjmp	.+190    	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 110:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
     ff6:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
     ffa:	83 33       	cpi	r24, 0x33	; 51
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <__vector_1+0x272>
     ffe:	5a c0       	rjmp	.+180    	; 0x10b4 <__vector_1+0x326>
    1000:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
    1004:	9a 30       	cpi	r25, 0x0A	; 10
    1006:	08 f0       	brcs	.+2      	; 0x100a <__vector_1+0x27c>
    1008:	55 c0       	rjmp	.+170    	; 0x10b4 <__vector_1+0x326>
    100a:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
    100e:	23 33       	cpi	r18, 0x33	; 51
    1010:	08 f0       	brcs	.+2      	; 0x1014 <__vector_1+0x286>
    1012:	50 c0       	rjmp	.+160    	; 0x10b4 <__vector_1+0x326>
    1014:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
    1018:	3a 30       	cpi	r19, 0x0A	; 10
    101a:	08 f0       	brcs	.+2      	; 0x101e <__vector_1+0x290>
    101c:	4b c0       	rjmp	.+150    	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 0;
    101e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
    1022:	41 e0       	ldi	r20, 0x01	; 1
    1024:	40 93 eb 00 	sts	0x00EB, r20	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1028:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
    102c:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    1030:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    1034:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
						PORTB |= (1<<MOSFET);
    1038:	88 b3       	in	r24, 0x18	; 24
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	88 bb       	out	0x18, r24	; 24
						PORTD &= ~(1<<LED_BOILER_STATUS);
    103e:	82 b3       	in	r24, 0x12	; 18
    1040:	8f 7e       	andi	r24, 0xEF	; 239
    1042:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(1, temp_setpoint_integer);
    1044:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <temp_setpoint_integer>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	2b d9       	rcall	.-3498   	; 0x2a4 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    104e:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	26 d9       	rcall	.-3508   	; 0x2a4 <EEPROM_write>
    1058:	2d c0       	rjmp	.+90     	; 0x10b4 <__vector_1+0x326>
					}
					break;
			case 111:
					if((RX_BUF[3] <= 50) && (RX_BUF[4] <= 9) && (RX_BUF[1] <= 50) && (RX_BUF[2] <= 9))
    105a:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <RX_BUF+0x3>
    105e:	83 33       	cpi	r24, 0x33	; 51
    1060:	48 f5       	brcc	.+82     	; 0x10b4 <__vector_1+0x326>
    1062:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <RX_BUF+0x4>
    1066:	9a 30       	cpi	r25, 0x0A	; 10
    1068:	28 f5       	brcc	.+74     	; 0x10b4 <__vector_1+0x326>
    106a:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <RX_BUF+0x1>
    106e:	23 33       	cpi	r18, 0x33	; 51
    1070:	08 f5       	brcc	.+66     	; 0x10b4 <__vector_1+0x326>
    1072:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <RX_BUF+0x2>
    1076:	3a 30       	cpi	r19, 0x0A	; 10
    1078:	e8 f4       	brcc	.+58     	; 0x10b4 <__vector_1+0x326>
					{
						gas_boiler_enable_flag = 1;
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	40 93 ee 00 	sts	0x00EE, r20	; 0x8000ee <gas_boiler_enable_flag>
						work_mode = 1;
    1080:	40 93 eb 00 	sts	0x00EB, r20	; 0x8000eb <work_mode>
						home_temp_rx_integer = RX_BUF[3];
    1084:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						home_temp_rx_fraction = RX_BUF[4];
    1088:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <home_temp_rx_fraction>
						temp_setpoint_integer = RX_BUF[1];
    108c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <temp_setpoint_integer>
						temp_setpoint_fraction = RX_BUF[2];
    1090:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <temp_setpoint_fraction>
						PORTB &= ~(1<<MOSFET);
    1094:	88 b3       	in	r24, 0x18	; 24
    1096:	8e 7f       	andi	r24, 0xFE	; 254
    1098:	88 bb       	out	0x18, r24	; 24
						PORTD |= (1<<LED_BOILER_STATUS);
    109a:	82 b3       	in	r24, 0x12	; 18
    109c:	80 61       	ori	r24, 0x10	; 16
    109e:	82 bb       	out	0x12, r24	; 18
						EEPROM_write(1, temp_setpoint_integer);
    10a0:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <temp_setpoint_integer>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	fd d8       	rcall	.-3590   	; 0x2a4 <EEPROM_write>
						EEPROM_write(2, temp_setpoint_fraction);
    10aa:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <temp_setpoint_fraction>
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	f8 d8       	rcall	.-3600   	; 0x2a4 <EEPROM_write>
		}
		home_temp_rx_integer = RX_BUF[3];
		home_temp_rx_fraction = RX_BUF[4];
		*/
	}
	if(status&TX_DS) //tx_ds == 0x20
    10b4:	c5 70       	andi	r28, 0x05	; 5
    10b6:	19 f0       	breq	.+6      	; 0x10be <__vector_1+0x330>
	{
		nRF_write_register(STATUS, 0x20);
    10b8:	60 e2       	ldi	r22, 0x20	; 32
    10ba:	87 e0       	ldi	r24, 0x07	; 7
    10bc:	46 de       	rcall	.-884    	; 0xd4a <nRF_write_register>
	}
}
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	cf 91       	pop	r28
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <NRF24L01_RX_Mode>:
}
//-------------------------------------------------------------
void NRF24L01_RX_Mode(void) // включение режима приема
{
	uint8_t regval = 0x00;
	regval = nRF_read_register(CONFIG);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	42 de       	rcall	.-892    	; 0xd6a <nRF_read_register>
	//разбудим модуль и переведЄм его в режим приЄмника, включив биты PWR_UP и PRIM_RX
	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
    10e6:	68 2f       	mov	r22, r24
    10e8:	63 60       	ori	r22, 0x03	; 3
	nRF_write_register(CONFIG,regval);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	2e de       	rcall	.-932    	; 0xd4a <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    10ee:	43 e0       	ldi	r20, 0x03	; 3
    10f0:	62 e6       	ldi	r22, 0x62	; 98
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e1       	ldi	r24, 0x10	; 16
    10f6:	ee dd       	rcall	.-1060   	; 0xcd4 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    10f8:	43 e0       	ldi	r20, 0x03	; 3
    10fa:	62 e6       	ldi	r22, 0x62	; 98
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	8b e0       	ldi	r24, 0x0B	; 11
    1100:	e9 dd       	rcall	.-1070   	; 0xcd4 <NRF24_Write_Buf>
	HIGH_CE;
    1102:	88 b3       	in	r24, 0x18	; 24
    1104:	82 60       	ori	r24, 0x02	; 2
    1106:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1108:	87 e5       	ldi	r24, 0x57	; 87
    110a:	92 e0       	ldi	r25, 0x02	; 2
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <NRF24L01_RX_Mode+0x2a>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <NRF24L01_RX_Mode+0x30>
    1112:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	// Flush buffers
	NRF24_FlushRX();
    1114:	8b dd       	rcall	.-1258   	; 0xc2c <NRF24_FlushRX>
	NRF24_FlushTX();
    1116:	98 dd       	rcall	.-1232   	; 0xc48 <NRF24_FlushTX>
    1118:	08 95       	ret

0000111a <NRF24_ini>:
extern uint8_t gas_boiler_enable_flag;
extern uint8_t work_mode;
//-------------------------------------------------------------
void NRF24_ini(void)
{
	LOW_CE;
    111a:	88 b3       	in	r24, 0x18	; 24
    111c:	8d 7f       	andi	r24, 0xFD	; 253
    111e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1120:	8f e1       	ldi	r24, 0x1F	; 31
    1122:	9e e4       	ldi	r25, 0x4E	; 78
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <NRF24_ini+0xa>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <NRF24_ini+0x10>
    112a:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0c de       	rcall	.-1000   	; 0xd4a <nRF_write_register>
    1132:	8f e1       	ldi	r24, 0x1F	; 31
    1134:	9e e4       	ldi	r25, 0x4E	; 78
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <NRF24_ini+0x1c>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <NRF24_ini+0x22>
    113c:	00 00       	nop
	_delay_ms(5);
	nRF_write_register(EN_AA, 0x03); // Enable Pipe1&3
    113e:	63 e0       	ldi	r22, 0x03	; 3
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	03 de       	rcall	.-1018   	; 0xd4a <nRF_write_register>
	nRF_write_register(EN_RXADDR, 0x03); // Enable Pipe1&3
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	00 de       	rcall	.-1024   	; 0xd4a <nRF_write_register>
	nRF_write_register(SETUP_AW, 0x01); // Setup address width=3 bytes
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	fd dd       	rcall	.-1030   	; 0xd4a <nRF_write_register>
	nRF_write_register(SETUP_RETR, 0x6F); // // 1750us, 15 retrans
    1150:	6f e6       	ldi	r22, 0x6F	; 111
    1152:	84 e0       	ldi	r24, 0x04	; 4
    1154:	fa dd       	rcall	.-1036   	; 0xd4a <nRF_write_register>
	NRF24_ToggleFeatures();
    1156:	86 dd       	rcall	.-1268   	; 0xc64 <NRF24_ToggleFeatures>
	nRF_write_register(FEATURE, 0);
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	8d e1       	ldi	r24, 0x1D	; 29
    115c:	f6 dd       	rcall	.-1044   	; 0xd4a <nRF_write_register>
	nRF_write_register(DYNPD, 0);
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	8c e1       	ldi	r24, 0x1C	; 28
    1162:	f3 dd       	rcall	.-1050   	; 0xd4a <nRF_write_register>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    1164:	60 e7       	ldi	r22, 0x70	; 112
    1166:	87 e0       	ldi	r24, 0x07	; 7
    1168:	f0 dd       	rcall	.-1056   	; 0xd4a <nRF_write_register>
	nRF_write_register(RF_CH, 76); // частота 2476 MHz
    116a:	6c e4       	ldi	r22, 0x4C	; 76
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	ed dd       	rcall	.-1062   	; 0xd4a <nRF_write_register>
	nRF_write_register(RF_SETUP, 0x06); //TX_PWR:0dBm, Datarate:1Mbps
    1170:	66 e0       	ldi	r22, 0x06	; 6
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	ea dd       	rcall	.-1068   	; 0xd4a <nRF_write_register>
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);
    1176:	43 e0       	ldi	r20, 0x03	; 3
    1178:	62 e6       	ldi	r22, 0x62	; 98
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e1       	ldi	r24, 0x10	; 16
    117e:	aa dd       	rcall	.-1196   	; 0xcd4 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS1, TX_ADR_WIDTH);
    1180:	43 e0       	ldi	r20, 0x03	; 3
    1182:	62 e6       	ldi	r22, 0x62	; 98
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	8b e0       	ldi	r24, 0x0B	; 11
    1188:	a5 dd       	rcall	.-1206   	; 0xcd4 <NRF24_Write_Buf>
	nRF_write_register(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
    118a:	65 e0       	ldi	r22, 0x05	; 5
    118c:	82 e1       	ldi	r24, 0x12	; 18
    118e:	dd dd       	rcall	.-1094   	; 0xd4a <nRF_write_register>
	//пока уходим в режим приЄмника
	NRF24L01_RX_Mode();
    1190:	a8 df       	rcall	.-176    	; 0x10e2 <NRF24L01_RX_Mode>
    1192:	08 95       	ret

00001194 <NRF24L01_Send>:
	HIGH_CSN;
	HIGH_CE;
}
//-------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ec 01       	movw	r28, r24
	uint8_t status=0x00, regval=0x00; //количество повторных попыток передачи, а также количество потер€нных пакетов
	NRF24L01_TX_Mode(pBuf);//перевод в режим передатчика
    119a:	c7 dd       	rcall	.-1138   	; 0xd2a <NRF24L01_TX_Mode>
	regval = nRF_read_register(CONFIG);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	e5 dd       	rcall	.-1078   	; 0xd6a <nRF_read_register>
    11a0:	8e 7f       	andi	r24, 0xFE	; 254
	//если модуль ушел в сп€щий режим, то разбудим его, включив бит PWR_UP и выключив PRIM_RX
	regval |= (1<<PWR_UP);
	regval &= ~(1<<PRIM_RX);
    11a2:	68 2f       	mov	r22, r24
    11a4:	62 60       	ori	r22, 0x02	; 2
	nRF_write_register(CONFIG,regval);
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	d0 dd       	rcall	.-1120   	; 0xd4a <nRF_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11aa:	87 e5       	ldi	r24, 0x57	; 87
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <NRF24L01_Send+0x1a>
    11b2:	00 c0       	rjmp	.+0      	; 0x11b4 <NRF24L01_Send+0x20>
    11b4:	00 00       	nop
	_delay_us(150); //«адержка минимум 130 мкс
	//ќтправим данные в воздух
	NRF24_Transmit(W_TX_PAYLOAD, pBuf, TX_PLOAD_WIDTH);
    11b6:	45 e0       	ldi	r20, 0x05	; 5
    11b8:	be 01       	movw	r22, r28
    11ba:	80 ea       	ldi	r24, 0xA0	; 160
    11bc:	07 dd       	rcall	.-1522   	; 0xbcc <NRF24_Transmit>
	HIGH_CE;
    11be:	88 b3       	in	r24, 0x18	; 24
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	88 bb       	out	0x18, r24	; 24
    11c4:	90 e5       	ldi	r25, 0x50	; 80
    11c6:	9a 95       	dec	r25
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <NRF24L01_Send+0x32>
	_delay_us(15); //minimum 10us high pulse (Page 21)
	LOW_CE;
    11ca:	88 b3       	in	r24, 0x18	; 24
    11cc:	8d 7f       	andi	r24, 0xFD	; 253
    11ce:	88 bb       	out	0x18, r24	; 24
	while( (PIND&(1<<IRQ)) != 0);
    11d0:	82 99       	sbic	0x10, 2	; 16
    11d2:	fe cf       	rjmp	.-4      	; 0x11d0 <NRF24L01_Send+0x3c>
	status = nRF_read_register(STATUS);
    11d4:	87 e0       	ldi	r24, 0x07	; 7
    11d6:	c9 dd       	rcall	.-1134   	; 0xd6a <nRF_read_register>
	if(status&TX_DS) //tx_ds == 0x20
    11d8:	98 2f       	mov	r25, r24
    11da:	95 70       	andi	r25, 0x05	; 5
    11dc:	99 f0       	breq	.+38     	; 0x1204 <NRF24L01_Send+0x70>
	{
		PORTD |= (1<<LED_TX);
    11de:	82 b3       	in	r24, 0x12	; 18
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e4:	2f ef       	ldi	r18, 0xFF	; 255
    11e6:	81 ee       	ldi	r24, 0xE1	; 225
    11e8:	94 e0       	ldi	r25, 0x04	; 4
    11ea:	21 50       	subi	r18, 0x01	; 1
    11ec:	80 40       	sbci	r24, 0x00	; 0
    11ee:	90 40       	sbci	r25, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <NRF24L01_Send+0x56>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <NRF24L01_Send+0x60>
    11f4:	00 00       	nop
		_delay_ms(100);
		PORTD &= ~(1<<LED_TX);
    11f6:	82 b3       	in	r24, 0x12	; 18
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	82 bb       	out	0x12, r24	; 18
		nRF_write_register(STATUS, 0x20);
    11fc:	60 e2       	ldi	r22, 0x20	; 32
    11fe:	87 e0       	ldi	r24, 0x07	; 7
    1200:	a4 dd       	rcall	.-1208   	; 0xd4a <nRF_write_register>
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <NRF24L01_Send+0x7c>
	}
	else if(status&MAX_RT)
    1204:	82 ff       	sbrs	r24, 2
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <NRF24L01_Send+0x7c>
	{
		nRF_write_register(STATUS, 0x10);
    1208:	60 e1       	ldi	r22, 0x10	; 16
    120a:	87 e0       	ldi	r24, 0x07	; 7
    120c:	9e dd       	rcall	.-1220   	; 0xd4a <nRF_write_register>
		NRF24_FlushTX();
    120e:	1c dd       	rcall	.-1480   	; 0xc48 <NRF24_FlushTX>
	}
	regval = nRF_read_register(OBSERVE_TX);
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	ab dd       	rcall	.-1194   	; 0xd6a <nRF_read_register>
    1214:	c8 2f       	mov	r28, r24
	//”ходим в режим приЄмника
	NRF24L01_RX_Mode();
    1216:	65 df       	rcall	.-310    	; 0x10e2 <NRF24L01_RX_Mode>
	nRF_write_register(STATUS, 0x70);//Reset flags for IRQ
    1218:	60 e7       	ldi	r22, 0x70	; 112
    121a:	87 e0       	ldi	r24, 0x07	; 7
    121c:	96 dd       	rcall	.-1236   	; 0xd4a <nRF_write_register>
	return regval;
}
    121e:	8c 2f       	mov	r24, r28
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <USART_Init>:

extern uint8_t rx_flag;

void USART_Init( unsigned int speed)//»нициализаци€ модул€ USART
{	
  UBRRH = (unsigned char)(speed>>8);
    1226:	90 bd       	out	0x20, r25	; 32
  UBRRL = (unsigned char)speed;
    1228:	89 b9       	out	0x09, r24	; 9
  UCSRB |= (1<<RXEN)|( 1<<TXEN); //¬ключаем прием и передачу по USART
    122a:	8a b1       	in	r24, 0x0a	; 10
    122c:	88 61       	ori	r24, 0x18	; 24
    122e:	8a b9       	out	0x0a, r24	; 10
  UCSRB |= (1<<RXCIE); //–азрешаем прерывание при приеме
    1230:	8a b1       	in	r24, 0x0a	; 10
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	8a b9       	out	0x0a, r24	; 10
  UCSRA |= (1<<U2X); // ƒл€ 8 мгц, удвоение скорости
    1236:	8b b1       	in	r24, 0x0b	; 11
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	8b b9       	out	0x0b, r24	; 11
  UCSRC |= (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// ќбращаемс€ именно к регистру UCSRC (URSEL=1),
    123c:	80 b5       	in	r24, 0x20	; 32
    123e:	8e 68       	ori	r24, 0x8E	; 142
    1240:	80 bd       	out	0x20, r24	; 32
    1242:	08 95       	ret

00001244 <USART_Transmit>:
  //ассинхронный режим (UMSEL=0), без контрол€ четности (UPM1=0 и UPM0=0),
  //2 стоп-бит (USBS=1), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
  //UCSRC |= (1<<UPM1);//четность
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
    1244:	dc 01       	movw	r26, r24
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 c0       	rjmp	.+16     	; 0x125a <USART_Transmit+0x16>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
    124a:	5d 9b       	sbis	0x0b, 5	; 11
    124c:	fe cf       	rjmp	.-4      	; 0x124a <USART_Transmit+0x6>
	  UDR = data[i]; //Ќачало передачи данных
    124e:	fd 01       	movw	r30, r26
    1250:	e2 0f       	add	r30, r18
    1252:	f3 1f       	adc	r31, r19
    1254:	90 81       	ld	r25, Z
    1256:	9c b9       	out	0x0c, r25	; 12
}
void USART_Transmit( char* data ) //‘ункци€ отправки данных
{
  uint8_t i;
  
  for (i = 0; i < strlen(data); i++)
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	fd 01       	movw	r30, r26
    1260:	01 90       	ld	r0, Z+
    1262:	00 20       	and	r0, r0
    1264:	e9 f7       	brne	.-6      	; 0x1260 <USART_Transmit+0x1c>
    1266:	31 97       	sbiw	r30, 0x01	; 1
    1268:	ea 1b       	sub	r30, r26
    126a:	fb 0b       	sbc	r31, r27
    126c:	2e 17       	cp	r18, r30
    126e:	3f 07       	cpc	r19, r31
    1270:	60 f3       	brcs	.-40     	; 0x124a <USART_Transmit+0x6>
  {
	  while ( !(UCSRA & (1<<UDRE)) );//ќжидание опустошени€ буфера приема
	  UDR = data[i]; //Ќачало передачи данных
  }
}
    1272:	08 95       	ret

00001274 <__divmodhi4>:
    1274:	97 fb       	bst	r25, 7
    1276:	07 2e       	mov	r0, r23
    1278:	16 f4       	brtc	.+4      	; 0x127e <__divmodhi4+0xa>
    127a:	00 94       	com	r0
    127c:	06 d0       	rcall	.+12     	; 0x128a <__divmodhi4_neg1>
    127e:	77 fd       	sbrc	r23, 7
    1280:	08 d0       	rcall	.+16     	; 0x1292 <__divmodhi4_neg2>
    1282:	33 d0       	rcall	.+102    	; 0x12ea <__udivmodhi4>
    1284:	07 fc       	sbrc	r0, 7
    1286:	05 d0       	rcall	.+10     	; 0x1292 <__divmodhi4_neg2>
    1288:	3e f4       	brtc	.+14     	; 0x1298 <__divmodhi4_exit>

0000128a <__divmodhi4_neg1>:
    128a:	90 95       	com	r25
    128c:	81 95       	neg	r24
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	08 95       	ret

00001292 <__divmodhi4_neg2>:
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255

00001298 <__divmodhi4_exit>:
    1298:	08 95       	ret

0000129a <__divmodsi4>:
    129a:	05 2e       	mov	r0, r21
    129c:	97 fb       	bst	r25, 7
    129e:	16 f4       	brtc	.+4      	; 0x12a4 <__divmodsi4+0xa>
    12a0:	00 94       	com	r0
    12a2:	0f d0       	rcall	.+30     	; 0x12c2 <__negsi2>
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	05 d0       	rcall	.+10     	; 0x12b2 <__divmodsi4_neg2>
    12a8:	34 d0       	rcall	.+104    	; 0x1312 <__udivmodsi4>
    12aa:	07 fc       	sbrc	r0, 7
    12ac:	02 d0       	rcall	.+4      	; 0x12b2 <__divmodsi4_neg2>
    12ae:	46 f4       	brtc	.+16     	; 0x12c0 <__divmodsi4_exit>
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <__negsi2>

000012b2 <__divmodsi4_neg2>:
    12b2:	50 95       	com	r21
    12b4:	40 95       	com	r20
    12b6:	30 95       	com	r19
    12b8:	21 95       	neg	r18
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	4f 4f       	sbci	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255

000012c0 <__divmodsi4_exit>:
    12c0:	08 95       	ret

000012c2 <__negsi2>:
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__umulhisi3>:
    12d2:	a2 9f       	mul	r26, r18
    12d4:	b0 01       	movw	r22, r0
    12d6:	b3 9f       	mul	r27, r19
    12d8:	c0 01       	movw	r24, r0
    12da:	a3 9f       	mul	r26, r19
    12dc:	01 d0       	rcall	.+2      	; 0x12e0 <__umulhisi3+0xe>
    12de:	b2 9f       	mul	r27, r18
    12e0:	70 0d       	add	r23, r0
    12e2:	81 1d       	adc	r24, r1
    12e4:	11 24       	eor	r1, r1
    12e6:	91 1d       	adc	r25, r1
    12e8:	08 95       	ret

000012ea <__udivmodhi4>:
    12ea:	aa 1b       	sub	r26, r26
    12ec:	bb 1b       	sub	r27, r27
    12ee:	51 e1       	ldi	r21, 0x11	; 17
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <__udivmodhi4_ep>

000012f2 <__udivmodhi4_loop>:
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	a6 17       	cp	r26, r22
    12f8:	b7 07       	cpc	r27, r23
    12fa:	10 f0       	brcs	.+4      	; 0x1300 <__udivmodhi4_ep>
    12fc:	a6 1b       	sub	r26, r22
    12fe:	b7 0b       	sbc	r27, r23

00001300 <__udivmodhi4_ep>:
    1300:	88 1f       	adc	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	5a 95       	dec	r21
    1306:	a9 f7       	brne	.-22     	; 0x12f2 <__udivmodhi4_loop>
    1308:	80 95       	com	r24
    130a:	90 95       	com	r25
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	08 95       	ret

00001312 <__udivmodsi4>:
    1312:	a1 e2       	ldi	r26, 0x21	; 33
    1314:	1a 2e       	mov	r1, r26
    1316:	aa 1b       	sub	r26, r26
    1318:	bb 1b       	sub	r27, r27
    131a:	fd 01       	movw	r30, r26
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <__udivmodsi4_ep>

0000131e <__udivmodsi4_loop>:
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	ee 1f       	adc	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	a2 17       	cp	r26, r18
    1328:	b3 07       	cpc	r27, r19
    132a:	e4 07       	cpc	r30, r20
    132c:	f5 07       	cpc	r31, r21
    132e:	20 f0       	brcs	.+8      	; 0x1338 <__udivmodsi4_ep>
    1330:	a2 1b       	sub	r26, r18
    1332:	b3 0b       	sbc	r27, r19
    1334:	e4 0b       	sbc	r30, r20
    1336:	f5 0b       	sbc	r31, r21

00001338 <__udivmodsi4_ep>:
    1338:	66 1f       	adc	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	1a 94       	dec	r1
    1342:	69 f7       	brne	.-38     	; 0x131e <__udivmodsi4_loop>
    1344:	60 95       	com	r22
    1346:	70 95       	com	r23
    1348:	80 95       	com	r24
    134a:	90 95       	com	r25
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	bd 01       	movw	r22, r26
    1352:	cf 01       	movw	r24, r30
    1354:	08 95       	ret

00001356 <memcpy>:
    1356:	fb 01       	movw	r30, r22
    1358:	dc 01       	movw	r26, r24
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <memcpy+0xa>
    135c:	01 90       	ld	r0, Z+
    135e:	0d 92       	st	X+, r0
    1360:	41 50       	subi	r20, 0x01	; 1
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	d8 f7       	brcc	.-10     	; 0x135c <memcpy+0x6>
    1366:	08 95       	ret

00001368 <memset>:
    1368:	dc 01       	movw	r26, r24
    136a:	01 c0       	rjmp	.+2      	; 0x136e <memset+0x6>
    136c:	6d 93       	st	X+, r22
    136e:	41 50       	subi	r20, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	e0 f7       	brcc	.-8      	; 0x136c <memset+0x4>
    1374:	08 95       	ret

00001376 <strstr>:
    1376:	fb 01       	movw	r30, r22
    1378:	51 91       	ld	r21, Z+
    137a:	55 23       	and	r21, r21
    137c:	a9 f0       	breq	.+42     	; 0x13a8 <strstr+0x32>
    137e:	bf 01       	movw	r22, r30
    1380:	dc 01       	movw	r26, r24
    1382:	4d 91       	ld	r20, X+
    1384:	45 17       	cp	r20, r21
    1386:	41 11       	cpse	r20, r1
    1388:	e1 f7       	brne	.-8      	; 0x1382 <strstr+0xc>
    138a:	59 f4       	brne	.+22     	; 0x13a2 <strstr+0x2c>
    138c:	cd 01       	movw	r24, r26
    138e:	01 90       	ld	r0, Z+
    1390:	00 20       	and	r0, r0
    1392:	49 f0       	breq	.+18     	; 0x13a6 <strstr+0x30>
    1394:	4d 91       	ld	r20, X+
    1396:	40 15       	cp	r20, r0
    1398:	41 11       	cpse	r20, r1
    139a:	c9 f3       	breq	.-14     	; 0x138e <strstr+0x18>
    139c:	fb 01       	movw	r30, r22
    139e:	41 11       	cpse	r20, r1
    13a0:	ef cf       	rjmp	.-34     	; 0x1380 <strstr+0xa>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	08 95       	ret

000013aa <sprintf>:
    13aa:	ae e0       	ldi	r26, 0x0E	; 14
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea ed       	ldi	r30, 0xDA	; 218
    13b0:	f9 e0       	ldi	r31, 0x09	; 9
    13b2:	aa c2       	rjmp	.+1364   	; 0x1908 <__prologue_saves__+0x1c>
    13b4:	0d 89       	ldd	r16, Y+21	; 0x15
    13b6:	1e 89       	ldd	r17, Y+22	; 0x16
    13b8:	86 e0       	ldi	r24, 0x06	; 6
    13ba:	8c 83       	std	Y+4, r24	; 0x04
    13bc:	1a 83       	std	Y+2, r17	; 0x02
    13be:	09 83       	std	Y+1, r16	; 0x01
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	9f e7       	ldi	r25, 0x7F	; 127
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	ae 01       	movw	r20, r28
    13ca:	47 5e       	subi	r20, 0xE7	; 231
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	6f 89       	ldd	r22, Y+23	; 0x17
    13d0:	78 8d       	ldd	r23, Y+24	; 0x18
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	08 d0       	rcall	.+16     	; 0x13e8 <vfprintf>
    13d8:	ef 81       	ldd	r30, Y+7	; 0x07
    13da:	f8 85       	ldd	r31, Y+8	; 0x08
    13dc:	e0 0f       	add	r30, r16
    13de:	f1 1f       	adc	r31, r17
    13e0:	10 82       	st	Z, r1
    13e2:	2e 96       	adiw	r28, 0x0e	; 14
    13e4:	e4 e0       	ldi	r30, 0x04	; 4
    13e6:	ac c2       	rjmp	.+1368   	; 0x1940 <__epilogue_restores__+0x1c>

000013e8 <vfprintf>:
    13e8:	ab e0       	ldi	r26, 0x0B	; 11
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e9 ef       	ldi	r30, 0xF9	; 249
    13ee:	f9 e0       	ldi	r31, 0x09	; 9
    13f0:	7d c2       	rjmp	.+1274   	; 0x18ec <__prologue_saves__>
    13f2:	6c 01       	movw	r12, r24
    13f4:	7b 01       	movw	r14, r22
    13f6:	8a 01       	movw	r16, r20
    13f8:	fc 01       	movw	r30, r24
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	16 82       	std	Z+6, r1	; 0x06
    13fe:	83 81       	ldd	r24, Z+3	; 0x03
    1400:	81 ff       	sbrs	r24, 1
    1402:	bf c1       	rjmp	.+894    	; 0x1782 <vfprintf+0x39a>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	3c 01       	movw	r6, r24
    140a:	f6 01       	movw	r30, r12
    140c:	93 81       	ldd	r25, Z+3	; 0x03
    140e:	f7 01       	movw	r30, r14
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	7f 01       	movw	r14, r30
    141a:	88 23       	and	r24, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <vfprintf+0x38>
    141e:	ad c1       	rjmp	.+858    	; 0x177a <vfprintf+0x392>
    1420:	85 32       	cpi	r24, 0x25	; 37
    1422:	39 f4       	brne	.+14     	; 0x1432 <vfprintf+0x4a>
    1424:	93 fd       	sbrc	r25, 3
    1426:	85 91       	lpm	r24, Z+
    1428:	93 ff       	sbrs	r25, 3
    142a:	81 91       	ld	r24, Z+
    142c:	7f 01       	movw	r14, r30
    142e:	85 32       	cpi	r24, 0x25	; 37
    1430:	21 f4       	brne	.+8      	; 0x143a <vfprintf+0x52>
    1432:	b6 01       	movw	r22, r12
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	c0 d1       	rcall	.+896    	; 0x17b8 <fputc>
    1438:	e8 cf       	rjmp	.-48     	; 0x140a <vfprintf+0x22>
    143a:	91 2c       	mov	r9, r1
    143c:	21 2c       	mov	r2, r1
    143e:	31 2c       	mov	r3, r1
    1440:	ff e1       	ldi	r31, 0x1F	; 31
    1442:	f3 15       	cp	r31, r3
    1444:	d8 f0       	brcs	.+54     	; 0x147c <vfprintf+0x94>
    1446:	8b 32       	cpi	r24, 0x2B	; 43
    1448:	79 f0       	breq	.+30     	; 0x1468 <vfprintf+0x80>
    144a:	38 f4       	brcc	.+14     	; 0x145a <vfprintf+0x72>
    144c:	80 32       	cpi	r24, 0x20	; 32
    144e:	79 f0       	breq	.+30     	; 0x146e <vfprintf+0x86>
    1450:	83 32       	cpi	r24, 0x23	; 35
    1452:	a1 f4       	brne	.+40     	; 0x147c <vfprintf+0x94>
    1454:	23 2d       	mov	r18, r3
    1456:	20 61       	ori	r18, 0x10	; 16
    1458:	1d c0       	rjmp	.+58     	; 0x1494 <vfprintf+0xac>
    145a:	8d 32       	cpi	r24, 0x2D	; 45
    145c:	61 f0       	breq	.+24     	; 0x1476 <vfprintf+0x8e>
    145e:	80 33       	cpi	r24, 0x30	; 48
    1460:	69 f4       	brne	.+26     	; 0x147c <vfprintf+0x94>
    1462:	23 2d       	mov	r18, r3
    1464:	21 60       	ori	r18, 0x01	; 1
    1466:	16 c0       	rjmp	.+44     	; 0x1494 <vfprintf+0xac>
    1468:	83 2d       	mov	r24, r3
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	38 2e       	mov	r3, r24
    146e:	e3 2d       	mov	r30, r3
    1470:	e4 60       	ori	r30, 0x04	; 4
    1472:	3e 2e       	mov	r3, r30
    1474:	2a c0       	rjmp	.+84     	; 0x14ca <vfprintf+0xe2>
    1476:	f3 2d       	mov	r31, r3
    1478:	f8 60       	ori	r31, 0x08	; 8
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <vfprintf+0xce>
    147c:	37 fc       	sbrc	r3, 7
    147e:	2d c0       	rjmp	.+90     	; 0x14da <vfprintf+0xf2>
    1480:	20 ed       	ldi	r18, 0xD0	; 208
    1482:	28 0f       	add	r18, r24
    1484:	2a 30       	cpi	r18, 0x0A	; 10
    1486:	40 f0       	brcs	.+16     	; 0x1498 <vfprintf+0xb0>
    1488:	8e 32       	cpi	r24, 0x2E	; 46
    148a:	b9 f4       	brne	.+46     	; 0x14ba <vfprintf+0xd2>
    148c:	36 fc       	sbrc	r3, 6
    148e:	75 c1       	rjmp	.+746    	; 0x177a <vfprintf+0x392>
    1490:	23 2d       	mov	r18, r3
    1492:	20 64       	ori	r18, 0x40	; 64
    1494:	32 2e       	mov	r3, r18
    1496:	19 c0       	rjmp	.+50     	; 0x14ca <vfprintf+0xe2>
    1498:	36 fe       	sbrs	r3, 6
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <vfprintf+0xc0>
    149c:	8a e0       	ldi	r24, 0x0A	; 10
    149e:	98 9e       	mul	r9, r24
    14a0:	20 0d       	add	r18, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	92 2e       	mov	r9, r18
    14a6:	11 c0       	rjmp	.+34     	; 0x14ca <vfprintf+0xe2>
    14a8:	ea e0       	ldi	r30, 0x0A	; 10
    14aa:	2e 9e       	mul	r2, r30
    14ac:	20 0d       	add	r18, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	22 2e       	mov	r2, r18
    14b2:	f3 2d       	mov	r31, r3
    14b4:	f0 62       	ori	r31, 0x20	; 32
    14b6:	3f 2e       	mov	r3, r31
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <vfprintf+0xe2>
    14ba:	8c 36       	cpi	r24, 0x6C	; 108
    14bc:	21 f4       	brne	.+8      	; 0x14c6 <vfprintf+0xde>
    14be:	83 2d       	mov	r24, r3
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	38 2e       	mov	r3, r24
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0xe2>
    14c6:	88 36       	cpi	r24, 0x68	; 104
    14c8:	41 f4       	brne	.+16     	; 0x14da <vfprintf+0xf2>
    14ca:	f7 01       	movw	r30, r14
    14cc:	93 fd       	sbrc	r25, 3
    14ce:	85 91       	lpm	r24, Z+
    14d0:	93 ff       	sbrs	r25, 3
    14d2:	81 91       	ld	r24, Z+
    14d4:	7f 01       	movw	r14, r30
    14d6:	81 11       	cpse	r24, r1
    14d8:	b3 cf       	rjmp	.-154    	; 0x1440 <vfprintf+0x58>
    14da:	98 2f       	mov	r25, r24
    14dc:	9f 7d       	andi	r25, 0xDF	; 223
    14de:	95 54       	subi	r25, 0x45	; 69
    14e0:	93 30       	cpi	r25, 0x03	; 3
    14e2:	28 f4       	brcc	.+10     	; 0x14ee <vfprintf+0x106>
    14e4:	0c 5f       	subi	r16, 0xFC	; 252
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	9f e3       	ldi	r25, 0x3F	; 63
    14ea:	99 83       	std	Y+1, r25	; 0x01
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <vfprintf+0x120>
    14ee:	83 36       	cpi	r24, 0x63	; 99
    14f0:	31 f0       	breq	.+12     	; 0x14fe <vfprintf+0x116>
    14f2:	83 37       	cpi	r24, 0x73	; 115
    14f4:	71 f0       	breq	.+28     	; 0x1512 <vfprintf+0x12a>
    14f6:	83 35       	cpi	r24, 0x53	; 83
    14f8:	09 f0       	breq	.+2      	; 0x14fc <vfprintf+0x114>
    14fa:	55 c0       	rjmp	.+170    	; 0x15a6 <vfprintf+0x1be>
    14fc:	20 c0       	rjmp	.+64     	; 0x153e <vfprintf+0x156>
    14fe:	f8 01       	movw	r30, r16
    1500:	80 81       	ld	r24, Z
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	0e 5f       	subi	r16, 0xFE	; 254
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	88 24       	eor	r8, r8
    150a:	83 94       	inc	r8
    150c:	91 2c       	mov	r9, r1
    150e:	53 01       	movw	r10, r6
    1510:	12 c0       	rjmp	.+36     	; 0x1536 <vfprintf+0x14e>
    1512:	28 01       	movw	r4, r16
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	4f 0e       	add	r4, r31
    1518:	51 1c       	adc	r5, r1
    151a:	f8 01       	movw	r30, r16
    151c:	a0 80       	ld	r10, Z
    151e:	b1 80       	ldd	r11, Z+1	; 0x01
    1520:	36 fe       	sbrs	r3, 6
    1522:	03 c0       	rjmp	.+6      	; 0x152a <vfprintf+0x142>
    1524:	69 2d       	mov	r22, r9
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <vfprintf+0x146>
    152a:	6f ef       	ldi	r22, 0xFF	; 255
    152c:	7f ef       	ldi	r23, 0xFF	; 255
    152e:	c5 01       	movw	r24, r10
    1530:	38 d1       	rcall	.+624    	; 0x17a2 <strnlen>
    1532:	4c 01       	movw	r8, r24
    1534:	82 01       	movw	r16, r4
    1536:	f3 2d       	mov	r31, r3
    1538:	ff 77       	andi	r31, 0x7F	; 127
    153a:	3f 2e       	mov	r3, r31
    153c:	15 c0       	rjmp	.+42     	; 0x1568 <vfprintf+0x180>
    153e:	28 01       	movw	r4, r16
    1540:	22 e0       	ldi	r18, 0x02	; 2
    1542:	42 0e       	add	r4, r18
    1544:	51 1c       	adc	r5, r1
    1546:	f8 01       	movw	r30, r16
    1548:	a0 80       	ld	r10, Z
    154a:	b1 80       	ldd	r11, Z+1	; 0x01
    154c:	36 fe       	sbrs	r3, 6
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <vfprintf+0x16e>
    1550:	69 2d       	mov	r22, r9
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x172>
    1556:	6f ef       	ldi	r22, 0xFF	; 255
    1558:	7f ef       	ldi	r23, 0xFF	; 255
    155a:	c5 01       	movw	r24, r10
    155c:	17 d1       	rcall	.+558    	; 0x178c <strnlen_P>
    155e:	4c 01       	movw	r8, r24
    1560:	f3 2d       	mov	r31, r3
    1562:	f0 68       	ori	r31, 0x80	; 128
    1564:	3f 2e       	mov	r3, r31
    1566:	82 01       	movw	r16, r4
    1568:	33 fc       	sbrc	r3, 3
    156a:	19 c0       	rjmp	.+50     	; 0x159e <vfprintf+0x1b6>
    156c:	82 2d       	mov	r24, r2
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	88 16       	cp	r8, r24
    1572:	99 06       	cpc	r9, r25
    1574:	a0 f4       	brcc	.+40     	; 0x159e <vfprintf+0x1b6>
    1576:	b6 01       	movw	r22, r12
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	1d d1       	rcall	.+570    	; 0x17b8 <fputc>
    157e:	2a 94       	dec	r2
    1580:	f5 cf       	rjmp	.-22     	; 0x156c <vfprintf+0x184>
    1582:	f5 01       	movw	r30, r10
    1584:	37 fc       	sbrc	r3, 7
    1586:	85 91       	lpm	r24, Z+
    1588:	37 fe       	sbrs	r3, 7
    158a:	81 91       	ld	r24, Z+
    158c:	5f 01       	movw	r10, r30
    158e:	b6 01       	movw	r22, r12
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	12 d1       	rcall	.+548    	; 0x17b8 <fputc>
    1594:	21 10       	cpse	r2, r1
    1596:	2a 94       	dec	r2
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	82 1a       	sub	r8, r18
    159c:	91 08       	sbc	r9, r1
    159e:	81 14       	cp	r8, r1
    15a0:	91 04       	cpc	r9, r1
    15a2:	79 f7       	brne	.-34     	; 0x1582 <vfprintf+0x19a>
    15a4:	e1 c0       	rjmp	.+450    	; 0x1768 <vfprintf+0x380>
    15a6:	84 36       	cpi	r24, 0x64	; 100
    15a8:	11 f0       	breq	.+4      	; 0x15ae <vfprintf+0x1c6>
    15aa:	89 36       	cpi	r24, 0x69	; 105
    15ac:	39 f5       	brne	.+78     	; 0x15fc <vfprintf+0x214>
    15ae:	f8 01       	movw	r30, r16
    15b0:	37 fe       	sbrs	r3, 7
    15b2:	07 c0       	rjmp	.+14     	; 0x15c2 <vfprintf+0x1da>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	0c 5f       	subi	r16, 0xFC	; 252
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x1ea>
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	07 2e       	mov	r0, r23
    15c8:	00 0c       	add	r0, r0
    15ca:	88 0b       	sbc	r24, r24
    15cc:	99 0b       	sbc	r25, r25
    15ce:	0e 5f       	subi	r16, 0xFE	; 254
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	f3 2d       	mov	r31, r3
    15d4:	ff 76       	andi	r31, 0x6F	; 111
    15d6:	3f 2e       	mov	r3, r31
    15d8:	97 ff       	sbrs	r25, 7
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <vfprintf+0x206>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	f0 68       	ori	r31, 0x80	; 128
    15ec:	3f 2e       	mov	r3, r31
    15ee:	2a e0       	ldi	r18, 0x0A	; 10
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	a3 01       	movw	r20, r6
    15f4:	1d d1       	rcall	.+570    	; 0x1830 <__ultoa_invert>
    15f6:	88 2e       	mov	r8, r24
    15f8:	86 18       	sub	r8, r6
    15fa:	44 c0       	rjmp	.+136    	; 0x1684 <vfprintf+0x29c>
    15fc:	85 37       	cpi	r24, 0x75	; 117
    15fe:	31 f4       	brne	.+12     	; 0x160c <vfprintf+0x224>
    1600:	23 2d       	mov	r18, r3
    1602:	2f 7e       	andi	r18, 0xEF	; 239
    1604:	b2 2e       	mov	r11, r18
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	25 c0       	rjmp	.+74     	; 0x1656 <vfprintf+0x26e>
    160c:	93 2d       	mov	r25, r3
    160e:	99 7f       	andi	r25, 0xF9	; 249
    1610:	b9 2e       	mov	r11, r25
    1612:	8f 36       	cpi	r24, 0x6F	; 111
    1614:	c1 f0       	breq	.+48     	; 0x1646 <vfprintf+0x25e>
    1616:	18 f4       	brcc	.+6      	; 0x161e <vfprintf+0x236>
    1618:	88 35       	cpi	r24, 0x58	; 88
    161a:	79 f0       	breq	.+30     	; 0x163a <vfprintf+0x252>
    161c:	ae c0       	rjmp	.+348    	; 0x177a <vfprintf+0x392>
    161e:	80 37       	cpi	r24, 0x70	; 112
    1620:	19 f0       	breq	.+6      	; 0x1628 <vfprintf+0x240>
    1622:	88 37       	cpi	r24, 0x78	; 120
    1624:	21 f0       	breq	.+8      	; 0x162e <vfprintf+0x246>
    1626:	a9 c0       	rjmp	.+338    	; 0x177a <vfprintf+0x392>
    1628:	e9 2f       	mov	r30, r25
    162a:	e0 61       	ori	r30, 0x10	; 16
    162c:	be 2e       	mov	r11, r30
    162e:	b4 fe       	sbrs	r11, 4
    1630:	0d c0       	rjmp	.+26     	; 0x164c <vfprintf+0x264>
    1632:	fb 2d       	mov	r31, r11
    1634:	f4 60       	ori	r31, 0x04	; 4
    1636:	bf 2e       	mov	r11, r31
    1638:	09 c0       	rjmp	.+18     	; 0x164c <vfprintf+0x264>
    163a:	34 fe       	sbrs	r3, 4
    163c:	0a c0       	rjmp	.+20     	; 0x1652 <vfprintf+0x26a>
    163e:	29 2f       	mov	r18, r25
    1640:	26 60       	ori	r18, 0x06	; 6
    1642:	b2 2e       	mov	r11, r18
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x26a>
    1646:	28 e0       	ldi	r18, 0x08	; 8
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <vfprintf+0x26e>
    164c:	20 e1       	ldi	r18, 0x10	; 16
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <vfprintf+0x26e>
    1652:	20 e1       	ldi	r18, 0x10	; 16
    1654:	32 e0       	ldi	r19, 0x02	; 2
    1656:	f8 01       	movw	r30, r16
    1658:	b7 fe       	sbrs	r11, 7
    165a:	07 c0       	rjmp	.+14     	; 0x166a <vfprintf+0x282>
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	0c 5f       	subi	r16, 0xFC	; 252
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <vfprintf+0x28e>
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 5f       	subi	r16, 0xFE	; 254
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	a3 01       	movw	r20, r6
    1678:	db d0       	rcall	.+438    	; 0x1830 <__ultoa_invert>
    167a:	88 2e       	mov	r8, r24
    167c:	86 18       	sub	r8, r6
    167e:	fb 2d       	mov	r31, r11
    1680:	ff 77       	andi	r31, 0x7F	; 127
    1682:	3f 2e       	mov	r3, r31
    1684:	36 fe       	sbrs	r3, 6
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x2ba>
    1688:	23 2d       	mov	r18, r3
    168a:	2e 7f       	andi	r18, 0xFE	; 254
    168c:	a2 2e       	mov	r10, r18
    168e:	89 14       	cp	r8, r9
    1690:	58 f4       	brcc	.+22     	; 0x16a8 <vfprintf+0x2c0>
    1692:	34 fe       	sbrs	r3, 4
    1694:	0b c0       	rjmp	.+22     	; 0x16ac <vfprintf+0x2c4>
    1696:	32 fc       	sbrc	r3, 2
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <vfprintf+0x2c4>
    169a:	83 2d       	mov	r24, r3
    169c:	8e 7e       	andi	r24, 0xEE	; 238
    169e:	a8 2e       	mov	r10, r24
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <vfprintf+0x2c4>
    16a2:	b8 2c       	mov	r11, r8
    16a4:	a3 2c       	mov	r10, r3
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <vfprintf+0x2c6>
    16a8:	b8 2c       	mov	r11, r8
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <vfprintf+0x2c6>
    16ac:	b9 2c       	mov	r11, r9
    16ae:	a4 fe       	sbrs	r10, 4
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <vfprintf+0x2e8>
    16b2:	fe 01       	movw	r30, r28
    16b4:	e8 0d       	add	r30, r8
    16b6:	f1 1d       	adc	r31, r1
    16b8:	80 81       	ld	r24, Z
    16ba:	80 33       	cpi	r24, 0x30	; 48
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <vfprintf+0x2de>
    16be:	9a 2d       	mov	r25, r10
    16c0:	99 7e       	andi	r25, 0xE9	; 233
    16c2:	a9 2e       	mov	r10, r25
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <vfprintf+0x2f0>
    16c6:	a2 fe       	sbrs	r10, 2
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x2ee>
    16ca:	b3 94       	inc	r11
    16cc:	b3 94       	inc	r11
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <vfprintf+0x2f0>
    16d0:	8a 2d       	mov	r24, r10
    16d2:	86 78       	andi	r24, 0x86	; 134
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <vfprintf+0x2f0>
    16d6:	b3 94       	inc	r11
    16d8:	a3 fc       	sbrc	r10, 3
    16da:	10 c0       	rjmp	.+32     	; 0x16fc <vfprintf+0x314>
    16dc:	a0 fe       	sbrs	r10, 0
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <vfprintf+0x304>
    16e0:	b2 14       	cp	r11, r2
    16e2:	80 f4       	brcc	.+32     	; 0x1704 <vfprintf+0x31c>
    16e4:	28 0c       	add	r2, r8
    16e6:	92 2c       	mov	r9, r2
    16e8:	9b 18       	sub	r9, r11
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <vfprintf+0x31e>
    16ec:	b2 14       	cp	r11, r2
    16ee:	58 f4       	brcc	.+22     	; 0x1706 <vfprintf+0x31e>
    16f0:	b6 01       	movw	r22, r12
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	60 d0       	rcall	.+192    	; 0x17b8 <fputc>
    16f8:	b3 94       	inc	r11
    16fa:	f8 cf       	rjmp	.-16     	; 0x16ec <vfprintf+0x304>
    16fc:	b2 14       	cp	r11, r2
    16fe:	18 f4       	brcc	.+6      	; 0x1706 <vfprintf+0x31e>
    1700:	2b 18       	sub	r2, r11
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x320>
    1704:	98 2c       	mov	r9, r8
    1706:	21 2c       	mov	r2, r1
    1708:	a4 fe       	sbrs	r10, 4
    170a:	0f c0       	rjmp	.+30     	; 0x172a <vfprintf+0x342>
    170c:	b6 01       	movw	r22, r12
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	52 d0       	rcall	.+164    	; 0x17b8 <fputc>
    1714:	a2 fe       	sbrs	r10, 2
    1716:	16 c0       	rjmp	.+44     	; 0x1744 <vfprintf+0x35c>
    1718:	a1 fc       	sbrc	r10, 1
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <vfprintf+0x33a>
    171c:	88 e7       	ldi	r24, 0x78	; 120
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x33e>
    1722:	88 e5       	ldi	r24, 0x58	; 88
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	b6 01       	movw	r22, r12
    1728:	0c c0       	rjmp	.+24     	; 0x1742 <vfprintf+0x35a>
    172a:	8a 2d       	mov	r24, r10
    172c:	86 78       	andi	r24, 0x86	; 134
    172e:	51 f0       	breq	.+20     	; 0x1744 <vfprintf+0x35c>
    1730:	a1 fe       	sbrs	r10, 1
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x350>
    1734:	8b e2       	ldi	r24, 0x2B	; 43
    1736:	01 c0       	rjmp	.+2      	; 0x173a <vfprintf+0x352>
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	a7 fc       	sbrc	r10, 7
    173c:	8d e2       	ldi	r24, 0x2D	; 45
    173e:	b6 01       	movw	r22, r12
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	3a d0       	rcall	.+116    	; 0x17b8 <fputc>
    1744:	89 14       	cp	r8, r9
    1746:	30 f4       	brcc	.+12     	; 0x1754 <vfprintf+0x36c>
    1748:	b6 01       	movw	r22, r12
    174a:	80 e3       	ldi	r24, 0x30	; 48
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	34 d0       	rcall	.+104    	; 0x17b8 <fputc>
    1750:	9a 94       	dec	r9
    1752:	f8 cf       	rjmp	.-16     	; 0x1744 <vfprintf+0x35c>
    1754:	8a 94       	dec	r8
    1756:	f3 01       	movw	r30, r6
    1758:	e8 0d       	add	r30, r8
    175a:	f1 1d       	adc	r31, r1
    175c:	80 81       	ld	r24, Z
    175e:	b6 01       	movw	r22, r12
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	2a d0       	rcall	.+84     	; 0x17b8 <fputc>
    1764:	81 10       	cpse	r8, r1
    1766:	f6 cf       	rjmp	.-20     	; 0x1754 <vfprintf+0x36c>
    1768:	22 20       	and	r2, r2
    176a:	09 f4       	brne	.+2      	; 0x176e <vfprintf+0x386>
    176c:	4e ce       	rjmp	.-868    	; 0x140a <vfprintf+0x22>
    176e:	b6 01       	movw	r22, r12
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	21 d0       	rcall	.+66     	; 0x17b8 <fputc>
    1776:	2a 94       	dec	r2
    1778:	f7 cf       	rjmp	.-18     	; 0x1768 <vfprintf+0x380>
    177a:	f6 01       	movw	r30, r12
    177c:	86 81       	ldd	r24, Z+6	; 0x06
    177e:	97 81       	ldd	r25, Z+7	; 0x07
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x39e>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	9f ef       	ldi	r25, 0xFF	; 255
    1786:	2b 96       	adiw	r28, 0x0b	; 11
    1788:	e2 e1       	ldi	r30, 0x12	; 18
    178a:	cc c0       	rjmp	.+408    	; 0x1924 <__epilogue_restores__>

0000178c <strnlen_P>:
    178c:	fc 01       	movw	r30, r24
    178e:	05 90       	lpm	r0, Z+
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	70 40       	sbci	r23, 0x00	; 0
    1794:	01 10       	cpse	r0, r1
    1796:	d8 f7       	brcc	.-10     	; 0x178e <strnlen_P+0x2>
    1798:	80 95       	com	r24
    179a:	90 95       	com	r25
    179c:	8e 0f       	add	r24, r30
    179e:	9f 1f       	adc	r25, r31
    17a0:	08 95       	ret

000017a2 <strnlen>:
    17a2:	fc 01       	movw	r30, r24
    17a4:	61 50       	subi	r22, 0x01	; 1
    17a6:	70 40       	sbci	r23, 0x00	; 0
    17a8:	01 90       	ld	r0, Z+
    17aa:	01 10       	cpse	r0, r1
    17ac:	d8 f7       	brcc	.-10     	; 0x17a4 <strnlen+0x2>
    17ae:	80 95       	com	r24
    17b0:	90 95       	com	r25
    17b2:	8e 0f       	add	r24, r30
    17b4:	9f 1f       	adc	r25, r31
    17b6:	08 95       	ret

000017b8 <fputc>:
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	fb 01       	movw	r30, r22
    17c2:	23 81       	ldd	r18, Z+3	; 0x03
    17c4:	21 fd       	sbrc	r18, 1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <fputc+0x16>
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	9f ef       	ldi	r25, 0xFF	; 255
    17cc:	2c c0       	rjmp	.+88     	; 0x1826 <fputc+0x6e>
    17ce:	22 ff       	sbrs	r18, 2
    17d0:	16 c0       	rjmp	.+44     	; 0x17fe <fputc+0x46>
    17d2:	46 81       	ldd	r20, Z+6	; 0x06
    17d4:	57 81       	ldd	r21, Z+7	; 0x07
    17d6:	24 81       	ldd	r18, Z+4	; 0x04
    17d8:	35 81       	ldd	r19, Z+5	; 0x05
    17da:	42 17       	cp	r20, r18
    17dc:	53 07       	cpc	r21, r19
    17de:	44 f4       	brge	.+16     	; 0x17f0 <fputc+0x38>
    17e0:	a0 81       	ld	r26, Z
    17e2:	b1 81       	ldd	r27, Z+1	; 0x01
    17e4:	9d 01       	movw	r18, r26
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	31 83       	std	Z+1, r19	; 0x01
    17ec:	20 83       	st	Z, r18
    17ee:	8c 93       	st	X, r24
    17f0:	26 81       	ldd	r18, Z+6	; 0x06
    17f2:	37 81       	ldd	r19, Z+7	; 0x07
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	37 83       	std	Z+7, r19	; 0x07
    17fa:	26 83       	std	Z+6, r18	; 0x06
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <fputc+0x6e>
    17fe:	8b 01       	movw	r16, r22
    1800:	ec 01       	movw	r28, r24
    1802:	fb 01       	movw	r30, r22
    1804:	00 84       	ldd	r0, Z+8	; 0x08
    1806:	f1 85       	ldd	r31, Z+9	; 0x09
    1808:	e0 2d       	mov	r30, r0
    180a:	09 95       	icall
    180c:	89 2b       	or	r24, r25
    180e:	e1 f6       	brne	.-72     	; 0x17c8 <fputc+0x10>
    1810:	d8 01       	movw	r26, r16
    1812:	16 96       	adiw	r26, 0x06	; 6
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	17 97       	sbiw	r26, 0x07	; 7
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	17 96       	adiw	r26, 0x07	; 7
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
    1822:	16 97       	sbiw	r26, 0x06	; 6
    1824:	ce 01       	movw	r24, r28
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <__ultoa_invert>:
    1830:	fa 01       	movw	r30, r20
    1832:	aa 27       	eor	r26, r26
    1834:	28 30       	cpi	r18, 0x08	; 8
    1836:	51 f1       	breq	.+84     	; 0x188c <__ultoa_invert+0x5c>
    1838:	20 31       	cpi	r18, 0x10	; 16
    183a:	81 f1       	breq	.+96     	; 0x189c <__ultoa_invert+0x6c>
    183c:	e8 94       	clt
    183e:	6f 93       	push	r22
    1840:	6e 7f       	andi	r22, 0xFE	; 254
    1842:	6e 5f       	subi	r22, 0xFE	; 254
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	af 4f       	sbci	r26, 0xFF	; 255
    184c:	b1 e0       	ldi	r27, 0x01	; 1
    184e:	3e d0       	rcall	.+124    	; 0x18cc <__ultoa_invert+0x9c>
    1850:	b4 e0       	ldi	r27, 0x04	; 4
    1852:	3c d0       	rcall	.+120    	; 0x18cc <__ultoa_invert+0x9c>
    1854:	67 0f       	add	r22, r23
    1856:	78 1f       	adc	r23, r24
    1858:	89 1f       	adc	r24, r25
    185a:	9a 1f       	adc	r25, r26
    185c:	a1 1d       	adc	r26, r1
    185e:	68 0f       	add	r22, r24
    1860:	79 1f       	adc	r23, r25
    1862:	8a 1f       	adc	r24, r26
    1864:	91 1d       	adc	r25, r1
    1866:	a1 1d       	adc	r26, r1
    1868:	6a 0f       	add	r22, r26
    186a:	71 1d       	adc	r23, r1
    186c:	81 1d       	adc	r24, r1
    186e:	91 1d       	adc	r25, r1
    1870:	a1 1d       	adc	r26, r1
    1872:	20 d0       	rcall	.+64     	; 0x18b4 <__ultoa_invert+0x84>
    1874:	09 f4       	brne	.+2      	; 0x1878 <__ultoa_invert+0x48>
    1876:	68 94       	set
    1878:	3f 91       	pop	r19
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	26 9f       	mul	r18, r22
    187e:	11 24       	eor	r1, r1
    1880:	30 19       	sub	r19, r0
    1882:	30 5d       	subi	r19, 0xD0	; 208
    1884:	31 93       	st	Z+, r19
    1886:	de f6       	brtc	.-74     	; 0x183e <__ultoa_invert+0xe>
    1888:	cf 01       	movw	r24, r30
    188a:	08 95       	ret
    188c:	46 2f       	mov	r20, r22
    188e:	47 70       	andi	r20, 0x07	; 7
    1890:	40 5d       	subi	r20, 0xD0	; 208
    1892:	41 93       	st	Z+, r20
    1894:	b3 e0       	ldi	r27, 0x03	; 3
    1896:	0f d0       	rcall	.+30     	; 0x18b6 <__ultoa_invert+0x86>
    1898:	c9 f7       	brne	.-14     	; 0x188c <__ultoa_invert+0x5c>
    189a:	f6 cf       	rjmp	.-20     	; 0x1888 <__ultoa_invert+0x58>
    189c:	46 2f       	mov	r20, r22
    189e:	4f 70       	andi	r20, 0x0F	; 15
    18a0:	40 5d       	subi	r20, 0xD0	; 208
    18a2:	4a 33       	cpi	r20, 0x3A	; 58
    18a4:	18 f0       	brcs	.+6      	; 0x18ac <__ultoa_invert+0x7c>
    18a6:	49 5d       	subi	r20, 0xD9	; 217
    18a8:	31 fd       	sbrc	r19, 1
    18aa:	40 52       	subi	r20, 0x20	; 32
    18ac:	41 93       	st	Z+, r20
    18ae:	02 d0       	rcall	.+4      	; 0x18b4 <__ultoa_invert+0x84>
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__ultoa_invert+0x6c>
    18b2:	ea cf       	rjmp	.-44     	; 0x1888 <__ultoa_invert+0x58>
    18b4:	b4 e0       	ldi	r27, 0x04	; 4
    18b6:	a6 95       	lsr	r26
    18b8:	97 95       	ror	r25
    18ba:	87 95       	ror	r24
    18bc:	77 95       	ror	r23
    18be:	67 95       	ror	r22
    18c0:	ba 95       	dec	r27
    18c2:	c9 f7       	brne	.-14     	; 0x18b6 <__ultoa_invert+0x86>
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	61 05       	cpc	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	08 95       	ret
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	0a 2e       	mov	r0, r26
    18d2:	06 94       	lsr	r0
    18d4:	57 95       	ror	r21
    18d6:	47 95       	ror	r20
    18d8:	37 95       	ror	r19
    18da:	27 95       	ror	r18
    18dc:	ba 95       	dec	r27
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <__ultoa_invert+0xa2>
    18e0:	62 0f       	add	r22, r18
    18e2:	73 1f       	adc	r23, r19
    18e4:	84 1f       	adc	r24, r20
    18e6:	95 1f       	adc	r25, r21
    18e8:	a0 1d       	adc	r26, r0
    18ea:	08 95       	ret

000018ec <__prologue_saves__>:
    18ec:	2f 92       	push	r2
    18ee:	3f 92       	push	r3
    18f0:	4f 92       	push	r4
    18f2:	5f 92       	push	r5
    18f4:	6f 92       	push	r6
    18f6:	7f 92       	push	r7
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	cf 92       	push	r12
    1902:	df 92       	push	r13
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	ca 1b       	sub	r28, r26
    1916:	db 0b       	sbc	r29, r27
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	09 94       	ijmp

00001924 <__epilogue_restores__>:
    1924:	2a 88       	ldd	r2, Y+18	; 0x12
    1926:	39 88       	ldd	r3, Y+17	; 0x11
    1928:	48 88       	ldd	r4, Y+16	; 0x10
    192a:	5f 84       	ldd	r5, Y+15	; 0x0f
    192c:	6e 84       	ldd	r6, Y+14	; 0x0e
    192e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1930:	8c 84       	ldd	r8, Y+12	; 0x0c
    1932:	9b 84       	ldd	r9, Y+11	; 0x0b
    1934:	aa 84       	ldd	r10, Y+10	; 0x0a
    1936:	b9 84       	ldd	r11, Y+9	; 0x09
    1938:	c8 84       	ldd	r12, Y+8	; 0x08
    193a:	df 80       	ldd	r13, Y+7	; 0x07
    193c:	ee 80       	ldd	r14, Y+6	; 0x06
    193e:	fd 80       	ldd	r15, Y+5	; 0x05
    1940:	0c 81       	ldd	r16, Y+4	; 0x04
    1942:	1b 81       	ldd	r17, Y+3	; 0x03
    1944:	aa 81       	ldd	r26, Y+2	; 0x02
    1946:	b9 81       	ldd	r27, Y+1	; 0x01
    1948:	ce 0f       	add	r28, r30
    194a:	d1 1d       	adc	r29, r1
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	ed 01       	movw	r28, r26
    1958:	08 95       	ret

0000195a <_exit>:
    195a:	f8 94       	cli

0000195c <__stop_program>:
    195c:	ff cf       	rjmp	.-2      	; 0x195c <__stop_program>
